# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from bgrafana_api.models.hit import Hit
from bgrafana_api.models.list_sort_options200_response import ListSortOptions200Response

from bgrafana_api.api_client import ApiClient
from bgrafana_api.api_response import ApiResponse
from bgrafana_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def list_sort_options(self, **kwargs) -> ListSortOptions200Response:  # noqa: E501
        """List search sorting options.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sort_options(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSortOptions200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_sort_options_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_sort_options_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_sort_options_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List search sorting options.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sort_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSortOptions200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sort_options" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "ListSortOptions200Response",
            '401': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/search/sorting', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search(self, query : Annotated[Optional[StrictStr], Field(description="Search Query")] = None, tag : Annotated[Optional[conlist(StrictStr)], Field(description="List of tags to search for")] = None, type : Annotated[Optional[StrictStr], Field(description="Type to search for, dash-folder or dash-db")] = None, dashboard_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of dashboard id’s to search for")] = None, dashboard_uids : Annotated[Optional[conlist(StrictStr)], Field(description="List of dashboard uid’s to search for")] = None, folder_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of folder id’s to search in for dashboards")] = None, starred : Annotated[Optional[StrictBool], Field(description="Flag indicating if only starred Dashboards should be returned")] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit the number of returned results (max 5000)")] = None, page : Annotated[Optional[StrictInt], Field(description="Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.")] = None, permission : Annotated[Optional[StrictStr], Field(description="Set to `Edit` to return dashboards/folders that the user can edit")] = None, sort : Annotated[Optional[StrictStr], Field(description="Sort method; for listing all the possible sort methods use the search sorting endpoint.")] = None, **kwargs) -> List[Hit]:  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(query, tag, type, dashboard_ids, dashboard_uids, folder_ids, starred, limit, page, permission, sort, async_req=True)
        >>> result = thread.get()

        :param query: Search Query
        :type query: str
        :param tag: List of tags to search for
        :type tag: List[str]
        :param type: Type to search for, dash-folder or dash-db
        :type type: str
        :param dashboard_ids: List of dashboard id’s to search for
        :type dashboard_ids: List[int]
        :param dashboard_uids: List of dashboard uid’s to search for
        :type dashboard_uids: List[str]
        :param folder_ids: List of folder id’s to search in for dashboards
        :type folder_ids: List[int]
        :param starred: Flag indicating if only starred Dashboards should be returned
        :type starred: bool
        :param limit: Limit the number of returned results (max 5000)
        :type limit: int
        :param page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
        :type page: int
        :param permission: Set to `Edit` to return dashboards/folders that the user can edit
        :type permission: str
        :param sort: Sort method; for listing all the possible sort methods use the search sorting endpoint.
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Hit]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_with_http_info(query, tag, type, dashboard_ids, dashboard_uids, folder_ids, starred, limit, page, permission, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def search_with_http_info(self, query : Annotated[Optional[StrictStr], Field(description="Search Query")] = None, tag : Annotated[Optional[conlist(StrictStr)], Field(description="List of tags to search for")] = None, type : Annotated[Optional[StrictStr], Field(description="Type to search for, dash-folder or dash-db")] = None, dashboard_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of dashboard id’s to search for")] = None, dashboard_uids : Annotated[Optional[conlist(StrictStr)], Field(description="List of dashboard uid’s to search for")] = None, folder_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of folder id’s to search in for dashboards")] = None, starred : Annotated[Optional[StrictBool], Field(description="Flag indicating if only starred Dashboards should be returned")] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit the number of returned results (max 5000)")] = None, page : Annotated[Optional[StrictInt], Field(description="Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.")] = None, permission : Annotated[Optional[StrictStr], Field(description="Set to `Edit` to return dashboards/folders that the user can edit")] = None, sort : Annotated[Optional[StrictStr], Field(description="Sort method; for listing all the possible sort methods use the search sorting endpoint.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_with_http_info(query, tag, type, dashboard_ids, dashboard_uids, folder_ids, starred, limit, page, permission, sort, async_req=True)
        >>> result = thread.get()

        :param query: Search Query
        :type query: str
        :param tag: List of tags to search for
        :type tag: List[str]
        :param type: Type to search for, dash-folder or dash-db
        :type type: str
        :param dashboard_ids: List of dashboard id’s to search for
        :type dashboard_ids: List[int]
        :param dashboard_uids: List of dashboard uid’s to search for
        :type dashboard_uids: List[str]
        :param folder_ids: List of folder id’s to search in for dashboards
        :type folder_ids: List[int]
        :param starred: Flag indicating if only starred Dashboards should be returned
        :type starred: bool
        :param limit: Limit the number of returned results (max 5000)
        :type limit: int
        :param page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
        :type page: int
        :param permission: Set to `Edit` to return dashboards/folders that the user can edit
        :type permission: str
        :param sort: Sort method; for listing all the possible sort methods use the search sorting endpoint.
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Hit], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'tag',
            'type',
            'dashboard_ids',
            'dashboard_uids',
            'folder_ids',
            'starred',
            'limit',
            'page',
            'permission',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('tag') is not None:  # noqa: E501
            _query_params.append(('tag', _params['tag']))
            _collection_formats['tag'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('dashboard_ids') is not None:  # noqa: E501
            _query_params.append(('dashboardIds', _params['dashboard_ids']))
            _collection_formats['dashboardIds'] = 'multi'

        if _params.get('dashboard_uids') is not None:  # noqa: E501
            _query_params.append(('dashboardUIDs', _params['dashboard_uids']))
            _collection_formats['dashboardUIDs'] = 'multi'

        if _params.get('folder_ids') is not None:  # noqa: E501
            _query_params.append(('folderIds', _params['folder_ids']))
            _collection_formats['folderIds'] = 'multi'

        if _params.get('starred') is not None:  # noqa: E501
            _query_params.append(('starred', _params['starred']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('permission') is not None:  # noqa: E501
            _query_params.append(('permission', _params['permission']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "List[Hit]",
            '401': "ErrorResponseBody",
            '422': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
