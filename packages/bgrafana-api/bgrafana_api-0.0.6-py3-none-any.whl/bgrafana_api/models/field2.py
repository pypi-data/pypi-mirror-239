# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from bgrafana_api.models.field_config import FieldConfig

class Field2(BaseModel):
    """
    A Field is essentially a slice of various types with extra properties and methods. See NewField() for supported types.  The slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.  # noqa: E501
    """
    config: Optional[FieldConfig] = None
    labels: Optional[Dict[str, StrictStr]] = Field(None, description="Labels are used to add metadata to an object.  The JSON will always be sorted keys")
    name: Optional[StrictStr] = Field(None, description="Name is default identifier of the field. The name does not have to be unique, but the combination of name and Labels should be unique for proper behavior in all situations.")
    __properties = ["config", "labels", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Field2:
        """Create an instance of Field2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Field2:
        """Create an instance of Field2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Field2.parse_obj(obj)

        _obj = Field2.parse_obj({
            "config": FieldConfig.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name")
        })
        return _obj


