# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class TLSConfig(BaseModel):
    """
    TLSConfig
    """
    ca_file: Optional[StrictStr] = Field(None, description="The CA cert to use for the targets.")
    cert_file: Optional[StrictStr] = Field(None, description="The client cert file for the targets.")
    insecure_skip_verify: Optional[StrictBool] = Field(None, description="Disable target certificate validation.")
    key_file: Optional[StrictStr] = Field(None, description="The client key file for the targets.")
    max_version: Optional[StrictInt] = None
    min_version: Optional[StrictInt] = None
    server_name: Optional[StrictStr] = Field(None, description="Used to verify the hostname for the targets.")
    __properties = ["ca_file", "cert_file", "insecure_skip_verify", "key_file", "max_version", "min_version", "server_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TLSConfig:
        """Create an instance of TLSConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TLSConfig:
        """Create an instance of TLSConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TLSConfig.parse_obj(obj)

        _obj = TLSConfig.parse_obj({
            "ca_file": obj.get("ca_file"),
            "cert_file": obj.get("cert_file"),
            "insecure_skip_verify": obj.get("insecure_skip_verify"),
            "key_file": obj.get("key_file"),
            "max_version": obj.get("max_version"),
            "min_version": obj.get("min_version"),
            "server_name": obj.get("server_name")
        })
        return _obj


