# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conlist

from typing import List, Optional

from bgrafana_api.models.alert_list_item_dto import AlertListItemDTO
from bgrafana_api.models.alert_state_info_dto import AlertStateInfoDTO
from bgrafana_api.models.alert_test_command import AlertTestCommand
from bgrafana_api.models.alert_test_result import AlertTestResult
from bgrafana_api.models.legacy_alert import LegacyAlert
from bgrafana_api.models.pause_alert200_response import PauseAlert200Response
from bgrafana_api.models.pause_alert_command import PauseAlertCommand

from bgrafana_api.api_client import ApiClient
from bgrafana_api.api_response import ApiResponse
from bgrafana_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LegacyAlertsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_alert_by_id(self, alert_id : StrictStr, **kwargs) -> LegacyAlert:  # noqa: E501
        """Get alert by ID.  # noqa: E501

        “evalMatches” data in the response is cached in the db when and only when the state of the alert changes (e.g. transitioning from “ok” to “alerting” state). If data from one server triggers the alert first and, before that server is seen leaving alerting state, a second server also enters a state that would trigger the alert, the second server will not be visible in “evalMatches” data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alert_by_id(alert_id, async_req=True)
        >>> result = thread.get()

        :param alert_id: (required)
        :type alert_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LegacyAlert
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_alert_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_alert_by_id_with_http_info(alert_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_alert_by_id_with_http_info(self, alert_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get alert by ID.  # noqa: E501

        “evalMatches” data in the response is cached in the db when and only when the state of the alert changes (e.g. transitioning from “ok” to “alerting” state). If data from one server triggers the alert first and, before that server is seen leaving alerting state, a second server also enters a state that would trigger the alert, the second server will not be visible in “evalMatches” data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alert_by_id_with_http_info(alert_id, async_req=True)
        >>> result = thread.get()

        :param alert_id: (required)
        :type alert_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LegacyAlert, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'alert_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['alert_id']:
            _path_params['alert_id'] = _params['alert_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "LegacyAlert",
            '401': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/alerts/{alert_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_alerts(self, dashboard_id : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts in specified dashboard(s). You can specify multiple dashboards.")] = None, panel_id : Annotated[Optional[StrictInt], Field(description="Limit response to alert for a specified panel on a dashboard.")] = None, query : Annotated[Optional[StrictStr], Field(description="Limit response to alerts having a name like this value.")] = None, state : Annotated[Optional[StrictStr], Field(description="Return alerts with one or more of the following alert states")] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit response to X number of alerts.")] = None, folder_id : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts of dashboards in specified folder(s). You can specify multiple folders")] = None, dashboard_query : Annotated[Optional[StrictStr], Field(description="Limit response to alerts having a dashboard name like this value./ Limit response to alerts having a dashboard name like this value.")] = None, dashboard_tag : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts of dashboards with specified tags. To do an “AND” filtering with multiple tags, specify the tags parameter multiple times")] = None, **kwargs) -> List[AlertListItemDTO]:  # noqa: E501
        """Get legacy alerts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alerts(dashboard_id, panel_id, query, state, limit, folder_id, dashboard_query, dashboard_tag, async_req=True)
        >>> result = thread.get()

        :param dashboard_id: Limit response to alerts in specified dashboard(s). You can specify multiple dashboards.
        :type dashboard_id: List[str]
        :param panel_id: Limit response to alert for a specified panel on a dashboard.
        :type panel_id: int
        :param query: Limit response to alerts having a name like this value.
        :type query: str
        :param state: Return alerts with one or more of the following alert states
        :type state: str
        :param limit: Limit response to X number of alerts.
        :type limit: int
        :param folder_id: Limit response to alerts of dashboards in specified folder(s). You can specify multiple folders
        :type folder_id: List[str]
        :param dashboard_query: Limit response to alerts having a dashboard name like this value./ Limit response to alerts having a dashboard name like this value.
        :type dashboard_query: str
        :param dashboard_tag: Limit response to alerts of dashboards with specified tags. To do an “AND” filtering with multiple tags, specify the tags parameter multiple times
        :type dashboard_tag: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AlertListItemDTO]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_alerts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_alerts_with_http_info(dashboard_id, panel_id, query, state, limit, folder_id, dashboard_query, dashboard_tag, **kwargs)  # noqa: E501

    @validate_arguments
    def get_alerts_with_http_info(self, dashboard_id : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts in specified dashboard(s). You can specify multiple dashboards.")] = None, panel_id : Annotated[Optional[StrictInt], Field(description="Limit response to alert for a specified panel on a dashboard.")] = None, query : Annotated[Optional[StrictStr], Field(description="Limit response to alerts having a name like this value.")] = None, state : Annotated[Optional[StrictStr], Field(description="Return alerts with one or more of the following alert states")] = None, limit : Annotated[Optional[StrictInt], Field(description="Limit response to X number of alerts.")] = None, folder_id : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts of dashboards in specified folder(s). You can specify multiple folders")] = None, dashboard_query : Annotated[Optional[StrictStr], Field(description="Limit response to alerts having a dashboard name like this value./ Limit response to alerts having a dashboard name like this value.")] = None, dashboard_tag : Annotated[Optional[conlist(StrictStr)], Field(description="Limit response to alerts of dashboards with specified tags. To do an “AND” filtering with multiple tags, specify the tags parameter multiple times")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get legacy alerts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alerts_with_http_info(dashboard_id, panel_id, query, state, limit, folder_id, dashboard_query, dashboard_tag, async_req=True)
        >>> result = thread.get()

        :param dashboard_id: Limit response to alerts in specified dashboard(s). You can specify multiple dashboards.
        :type dashboard_id: List[str]
        :param panel_id: Limit response to alert for a specified panel on a dashboard.
        :type panel_id: int
        :param query: Limit response to alerts having a name like this value.
        :type query: str
        :param state: Return alerts with one or more of the following alert states
        :type state: str
        :param limit: Limit response to X number of alerts.
        :type limit: int
        :param folder_id: Limit response to alerts of dashboards in specified folder(s). You can specify multiple folders
        :type folder_id: List[str]
        :param dashboard_query: Limit response to alerts having a dashboard name like this value./ Limit response to alerts having a dashboard name like this value.
        :type dashboard_query: str
        :param dashboard_tag: Limit response to alerts of dashboards with specified tags. To do an “AND” filtering with multiple tags, specify the tags parameter multiple times
        :type dashboard_tag: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AlertListItemDTO], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dashboard_id',
            'panel_id',
            'query',
            'state',
            'limit',
            'folder_id',
            'dashboard_query',
            'dashboard_tag'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dashboard_id') is not None:  # noqa: E501
            _query_params.append(('dashboardId', _params['dashboard_id']))
            _collection_formats['dashboardId'] = 'multi'

        if _params.get('panel_id') is not None:  # noqa: E501
            _query_params.append(('panelId', _params['panel_id']))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('folder_id') is not None:  # noqa: E501
            _query_params.append(('folderId', _params['folder_id']))
            _collection_formats['folderId'] = 'multi'

        if _params.get('dashboard_query') is not None:  # noqa: E501
            _query_params.append(('dashboardQuery', _params['dashboard_query']))

        if _params.get('dashboard_tag') is not None:  # noqa: E501
            _query_params.append(('dashboardTag', _params['dashboard_tag']))
            _collection_formats['dashboardTag'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "List[AlertListItemDTO]",
            '401': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/alerts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_dashboard_states(self, dashboard_id : StrictInt, **kwargs) -> List[AlertStateInfoDTO]:  # noqa: E501
        """Get alert states for a dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dashboard_states(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param dashboard_id: (required)
        :type dashboard_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AlertStateInfoDTO]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_dashboard_states_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_dashboard_states_with_http_info(dashboard_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_dashboard_states_with_http_info(self, dashboard_id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Get alert states for a dashboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dashboard_states_with_http_info(dashboard_id, async_req=True)
        >>> result = thread.get()

        :param dashboard_id: (required)
        :type dashboard_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AlertStateInfoDTO], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dashboard_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dashboard_states" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dashboard_id') is not None:  # noqa: E501
            _query_params.append(('dashboardId', _params['dashboard_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "List[AlertStateInfoDTO]",
            '400': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/alerts/states-for-dashboard', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pause_alert(self, alert_id : StrictStr, pause_alert_command : PauseAlertCommand, **kwargs) -> PauseAlert200Response:  # noqa: E501
        """Pause/unpause alert by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_alert(alert_id, pause_alert_command, async_req=True)
        >>> result = thread.get()

        :param alert_id: (required)
        :type alert_id: str
        :param pause_alert_command: (required)
        :type pause_alert_command: PauseAlertCommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PauseAlert200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the pause_alert_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.pause_alert_with_http_info(alert_id, pause_alert_command, **kwargs)  # noqa: E501

    @validate_arguments
    def pause_alert_with_http_info(self, alert_id : StrictStr, pause_alert_command : PauseAlertCommand, **kwargs) -> ApiResponse:  # noqa: E501
        """Pause/unpause alert by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_alert_with_http_info(alert_id, pause_alert_command, async_req=True)
        >>> result = thread.get()

        :param alert_id: (required)
        :type alert_id: str
        :param pause_alert_command: (required)
        :type pause_alert_command: PauseAlertCommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PauseAlert200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'alert_id',
            'pause_alert_command'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_alert" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['alert_id']:
            _path_params['alert_id'] = _params['alert_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['pause_alert_command'] is not None:
            _body_params = _params['pause_alert_command']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "PauseAlert200Response",
            '401': "ErrorResponseBody",
            '403': "ErrorResponseBody",
            '404': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/alerts/{alert_id}/pause', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def test_alert(self, alert_test_command : Optional[AlertTestCommand] = None, **kwargs) -> AlertTestResult:  # noqa: E501
        """Test alert.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_alert(alert_test_command, async_req=True)
        >>> result = thread.get()

        :param alert_test_command:
        :type alert_test_command: AlertTestCommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AlertTestResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the test_alert_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.test_alert_with_http_info(alert_test_command, **kwargs)  # noqa: E501

    @validate_arguments
    def test_alert_with_http_info(self, alert_test_command : Optional[AlertTestCommand] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Test alert.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_alert_with_http_info(alert_test_command, async_req=True)
        >>> result = thread.get()

        :param alert_test_command:
        :type alert_test_command: AlertTestCommand
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AlertTestResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'alert_test_command'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_alert" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['alert_test_command'] is not None:
            _body_params = _params['alert_test_command']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key', 'basic']  # noqa: E501

        _response_types_map = {
            '200': "AlertTestResult",
            '400': "ErrorResponseBody",
            '403': "ErrorResponseBody",
            '422': "ErrorResponseBody",
            '500': "ErrorResponseBody",
        }

        return self.api_client.call_api(
            '/alerts/test', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
