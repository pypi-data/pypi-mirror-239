# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field
from bgrafana_api.models.alertmanager_config import AlertmanagerConfig
from bgrafana_api.models.cluster_status import ClusterStatus
from bgrafana_api.models.version_info import VersionInfo

class AlertmanagerStatus(BaseModel):
    """
    AlertmanagerStatus alertmanager status  # noqa: E501
    """
    cluster: ClusterStatus = Field(...)
    config: AlertmanagerConfig = Field(...)
    uptime: datetime = Field(..., description="uptime")
    version_info: VersionInfo = Field(..., alias="versionInfo")
    __properties = ["cluster", "config", "uptime", "versionInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlertmanagerStatus:
        """Create an instance of AlertmanagerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_info
        if self.version_info:
            _dict['versionInfo'] = self.version_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlertmanagerStatus:
        """Create an instance of AlertmanagerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlertmanagerStatus.parse_obj(obj)

        _obj = AlertmanagerStatus.parse_obj({
            "cluster": ClusterStatus.from_dict(obj.get("cluster")) if obj.get("cluster") is not None else None,
            "config": AlertmanagerConfig.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "uptime": obj.get("uptime"),
            "version_info": VersionInfo.from_dict(obj.get("versionInfo")) if obj.get("versionInfo") is not None else None
        })
        return _obj


