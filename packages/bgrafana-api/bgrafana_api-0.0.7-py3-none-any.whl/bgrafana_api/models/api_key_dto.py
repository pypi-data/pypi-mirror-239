# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class ApiKeyDTO(BaseModel):
    """
    ApiKeyDTO
    """
    access_control: Optional[Dict[str, StrictBool]] = Field(None, alias="accessControl", description="Metadata contains user accesses for a given resource Ex: map[string]bool{\"create\":true, \"delete\": true}")
    expiration: Optional[datetime] = None
    id: Optional[StrictInt] = None
    last_used_at: Optional[datetime] = Field(None, alias="lastUsedAt")
    name: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    __properties = ["accessControl", "expiration", "id", "lastUsedAt", "name", "role"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Viewer', 'Editor', 'Admin'):
            raise ValueError("must be one of enum values ('Viewer', 'Editor', 'Admin')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiKeyDTO:
        """Create an instance of ApiKeyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiKeyDTO:
        """Create an instance of ApiKeyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiKeyDTO.parse_obj(obj)

        _obj = ApiKeyDTO.parse_obj({
            "access_control": obj.get("accessControl"),
            "expiration": obj.get("expiration"),
            "id": obj.get("id"),
            "last_used_at": obj.get("lastUsedAt"),
            "name": obj.get("name"),
            "role": obj.get("role")
        })
        return _obj


