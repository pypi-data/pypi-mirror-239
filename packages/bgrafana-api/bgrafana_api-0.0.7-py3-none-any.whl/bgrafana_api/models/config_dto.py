# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from bgrafana_api.models.dashboard_dto import DashboardDTO
from bgrafana_api.models.report_options_dto import ReportOptionsDTO
from bgrafana_api.models.schedule_dto import ScheduleDTO

class ConfigDTO(BaseModel):
    """
    ConfigDTO is model representation in transfer  # noqa: E501
    """
    created: Optional[datetime] = None
    dashboard_id: Optional[StrictInt] = Field(None, alias="dashboardId")
    dashboard_name: Optional[StrictStr] = Field(None, alias="dashboardName")
    dashboard_uid: Optional[StrictStr] = Field(None, alias="dashboardUid")
    dashboards: Optional[conlist(DashboardDTO)] = None
    enable_csv: Optional[StrictBool] = Field(None, alias="enableCsv")
    enable_dashboard_url: Optional[StrictBool] = Field(None, alias="enableDashboardUrl")
    formats: Optional[conlist(StrictStr)] = None
    id: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    options: Optional[ReportOptionsDTO] = None
    org_id: Optional[StrictInt] = Field(None, alias="orgId")
    recipients: Optional[StrictStr] = None
    reply_to: Optional[StrictStr] = Field(None, alias="replyTo")
    scale_factor: Optional[StrictInt] = Field(None, alias="scaleFactor")
    schedule: Optional[ScheduleDTO] = None
    state: Optional[StrictStr] = None
    template_vars: Optional[Dict[str, Any]] = Field(None, alias="templateVars")
    updated: Optional[datetime] = None
    user_id: Optional[StrictInt] = Field(None, alias="userId")
    __properties = ["created", "dashboardId", "dashboardName", "dashboardUid", "dashboards", "enableCsv", "enableDashboardUrl", "formats", "id", "message", "name", "options", "orgId", "recipients", "replyTo", "scaleFactor", "schedule", "state", "templateVars", "updated", "userId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigDTO:
        """Create an instance of ConfigDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in dashboards (list)
        _items = []
        if self.dashboards:
            for _item in self.dashboards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dashboards'] = _items
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigDTO:
        """Create an instance of ConfigDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigDTO.parse_obj(obj)

        _obj = ConfigDTO.parse_obj({
            "created": obj.get("created"),
            "dashboard_id": obj.get("dashboardId"),
            "dashboard_name": obj.get("dashboardName"),
            "dashboard_uid": obj.get("dashboardUid"),
            "dashboards": [DashboardDTO.from_dict(_item) for _item in obj.get("dashboards")] if obj.get("dashboards") is not None else None,
            "enable_csv": obj.get("enableCsv"),
            "enable_dashboard_url": obj.get("enableDashboardUrl"),
            "formats": obj.get("formats"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "options": ReportOptionsDTO.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "org_id": obj.get("orgId"),
            "recipients": obj.get("recipients"),
            "reply_to": obj.get("replyTo"),
            "scale_factor": obj.get("scaleFactor"),
            "schedule": ScheduleDTO.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None,
            "state": obj.get("state"),
            "template_vars": obj.get("templateVars"),
            "updated": obj.get("updated"),
            "user_id": obj.get("userId")
        })
        return _obj


