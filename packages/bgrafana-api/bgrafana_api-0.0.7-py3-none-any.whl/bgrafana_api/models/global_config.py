# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from bgrafana_api.models.host_port import HostPort
from bgrafana_api.models.http_client_config import HTTPClientConfig
from bgrafana_api.models.url import URL

class GlobalConfig(BaseModel):
    """
    GlobalConfig defines configuration parameters that are valid globally unless overwritten.  # noqa: E501
    """
    http_config: Optional[HTTPClientConfig] = None
    opsgenie_api_key: Optional[StrictStr] = None
    opsgenie_api_key_file: Optional[StrictStr] = None
    opsgenie_api_url: Optional[URL] = None
    pagerduty_url: Optional[URL] = None
    resolve_timeout: Optional[StrictInt] = None
    slack_api_url: Optional[URL] = None
    slack_api_url_file: Optional[StrictStr] = None
    smtp_auth_identity: Optional[StrictStr] = None
    smtp_auth_password: Optional[StrictStr] = None
    smtp_auth_password_file: Optional[StrictStr] = None
    smtp_auth_secret: Optional[StrictStr] = None
    smtp_auth_username: Optional[StrictStr] = None
    smtp_from: Optional[StrictStr] = None
    smtp_hello: Optional[StrictStr] = None
    smtp_require_tls: Optional[StrictBool] = None
    smtp_smarthost: Optional[HostPort] = None
    telegram_api_url: Optional[URL] = None
    victorops_api_key: Optional[StrictStr] = None
    victorops_api_key_file: Optional[StrictStr] = None
    victorops_api_url: Optional[URL] = None
    webex_api_url: Optional[URL] = None
    wechat_api_corp_id: Optional[StrictStr] = None
    wechat_api_secret: Optional[StrictStr] = None
    wechat_api_url: Optional[URL] = None
    __properties = ["http_config", "opsgenie_api_key", "opsgenie_api_key_file", "opsgenie_api_url", "pagerduty_url", "resolve_timeout", "slack_api_url", "slack_api_url_file", "smtp_auth_identity", "smtp_auth_password", "smtp_auth_password_file", "smtp_auth_secret", "smtp_auth_username", "smtp_from", "smtp_hello", "smtp_require_tls", "smtp_smarthost", "telegram_api_url", "victorops_api_key", "victorops_api_key_file", "victorops_api_url", "webex_api_url", "wechat_api_corp_id", "wechat_api_secret", "wechat_api_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GlobalConfig:
        """Create an instance of GlobalConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of http_config
        if self.http_config:
            _dict['http_config'] = self.http_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opsgenie_api_url
        if self.opsgenie_api_url:
            _dict['opsgenie_api_url'] = self.opsgenie_api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagerduty_url
        if self.pagerduty_url:
            _dict['pagerduty_url'] = self.pagerduty_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack_api_url
        if self.slack_api_url:
            _dict['slack_api_url'] = self.slack_api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smtp_smarthost
        if self.smtp_smarthost:
            _dict['smtp_smarthost'] = self.smtp_smarthost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telegram_api_url
        if self.telegram_api_url:
            _dict['telegram_api_url'] = self.telegram_api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of victorops_api_url
        if self.victorops_api_url:
            _dict['victorops_api_url'] = self.victorops_api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webex_api_url
        if self.webex_api_url:
            _dict['webex_api_url'] = self.webex_api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wechat_api_url
        if self.wechat_api_url:
            _dict['wechat_api_url'] = self.wechat_api_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GlobalConfig:
        """Create an instance of GlobalConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GlobalConfig.parse_obj(obj)

        _obj = GlobalConfig.parse_obj({
            "http_config": HTTPClientConfig.from_dict(obj.get("http_config")) if obj.get("http_config") is not None else None,
            "opsgenie_api_key": obj.get("opsgenie_api_key"),
            "opsgenie_api_key_file": obj.get("opsgenie_api_key_file"),
            "opsgenie_api_url": URL.from_dict(obj.get("opsgenie_api_url")) if obj.get("opsgenie_api_url") is not None else None,
            "pagerduty_url": URL.from_dict(obj.get("pagerduty_url")) if obj.get("pagerduty_url") is not None else None,
            "resolve_timeout": obj.get("resolve_timeout"),
            "slack_api_url": URL.from_dict(obj.get("slack_api_url")) if obj.get("slack_api_url") is not None else None,
            "slack_api_url_file": obj.get("slack_api_url_file"),
            "smtp_auth_identity": obj.get("smtp_auth_identity"),
            "smtp_auth_password": obj.get("smtp_auth_password"),
            "smtp_auth_password_file": obj.get("smtp_auth_password_file"),
            "smtp_auth_secret": obj.get("smtp_auth_secret"),
            "smtp_auth_username": obj.get("smtp_auth_username"),
            "smtp_from": obj.get("smtp_from"),
            "smtp_hello": obj.get("smtp_hello"),
            "smtp_require_tls": obj.get("smtp_require_tls"),
            "smtp_smarthost": HostPort.from_dict(obj.get("smtp_smarthost")) if obj.get("smtp_smarthost") is not None else None,
            "telegram_api_url": URL.from_dict(obj.get("telegram_api_url")) if obj.get("telegram_api_url") is not None else None,
            "victorops_api_key": obj.get("victorops_api_key"),
            "victorops_api_key_file": obj.get("victorops_api_key_file"),
            "victorops_api_url": URL.from_dict(obj.get("victorops_api_url")) if obj.get("victorops_api_url") is not None else None,
            "webex_api_url": URL.from_dict(obj.get("webex_api_url")) if obj.get("webex_api_url") is not None else None,
            "wechat_api_corp_id": obj.get("wechat_api_corp_id"),
            "wechat_api_secret": obj.get("wechat_api_secret"),
            "wechat_api_url": URL.from_dict(obj.get("wechat_api_url")) if obj.get("wechat_api_url") is not None else None
        })
        return _obj


