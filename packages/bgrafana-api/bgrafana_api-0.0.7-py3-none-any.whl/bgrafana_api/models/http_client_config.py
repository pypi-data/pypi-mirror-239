# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from bgrafana_api.models.authorization import Authorization
from bgrafana_api.models.basic_auth import BasicAuth
from bgrafana_api.models.o_auth2 import OAuth2
from bgrafana_api.models.tls_config import TLSConfig
from bgrafana_api.models.url import URL

class HTTPClientConfig(BaseModel):
    """
    HTTPClientConfig
    """
    authorization: Optional[Authorization] = None
    basic_auth: Optional[BasicAuth] = None
    bearer_token: Optional[StrictStr] = None
    bearer_token_file: Optional[StrictStr] = Field(None, description="The bearer token file for the targets. Deprecated in favour of Authorization.CredentialsFile.")
    enable_http2: Optional[StrictBool] = Field(None, description="EnableHTTP2 specifies whether the client should configure HTTP2. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.")
    follow_redirects: Optional[StrictBool] = Field(None, description="FollowRedirects specifies whether the client should follow HTTP 3xx redirects. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.")
    oauth2: Optional[OAuth2] = None
    proxy_connect_header: Optional[Dict[str, conlist(StrictStr)]] = None
    proxy_url: Optional[URL] = None
    tls_config: Optional[TLSConfig] = None
    __properties = ["authorization", "basic_auth", "bearer_token", "bearer_token_file", "enable_http2", "follow_redirects", "oauth2", "proxy_connect_header", "proxy_url", "tls_config"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HTTPClientConfig:
        """Create an instance of HTTPClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            _dict['authorization'] = self.authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_auth
        if self.basic_auth:
            _dict['basic_auth'] = self.basic_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2
        if self.oauth2:
            _dict['oauth2'] = self.oauth2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in proxy_connect_header (dict of array)
        _field_dict_of_array = {}
        if self.proxy_connect_header:
            for _key in self.proxy_connect_header:
                if self.proxy_connect_header[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.proxy_connect_header[_key]
                    ]
            _dict['proxy_connect_header'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of proxy_url
        if self.proxy_url:
            _dict['proxy_url'] = self.proxy_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tls_config
        if self.tls_config:
            _dict['tls_config'] = self.tls_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HTTPClientConfig:
        """Create an instance of HTTPClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HTTPClientConfig.parse_obj(obj)

        _obj = HTTPClientConfig.parse_obj({
            "authorization": Authorization.from_dict(obj.get("authorization")) if obj.get("authorization") is not None else None,
            "basic_auth": BasicAuth.from_dict(obj.get("basic_auth")) if obj.get("basic_auth") is not None else None,
            "bearer_token": obj.get("bearer_token"),
            "bearer_token_file": obj.get("bearer_token_file"),
            "enable_http2": obj.get("enable_http2"),
            "follow_redirects": obj.get("follow_redirects"),
            "oauth2": OAuth2.from_dict(obj.get("oauth2")) if obj.get("oauth2") is not None else None,
            "proxy_connect_header": obj.get("proxy_connect_header"),
            "proxy_url": URL.from_dict(obj.get("proxy_url")) if obj.get("proxy_url") is not None else None,
            "tls_config": TLSConfig.from_dict(obj.get("tls_config")) if obj.get("tls_config") is not None else None
        })
        return _obj


