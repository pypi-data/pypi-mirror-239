# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from bgrafana_api.models.matcher import Matcher

class InhibitRule(BaseModel):
    """
    InhibitRule defines an inhibition rule that mutes alerts that match the target labels if an alert matching the source labels exists. Both alerts have to have a set of labels being equal.  # noqa: E501
    """
    equal: Optional[conlist(StrictStr)] = None
    source_match: Optional[Dict[str, StrictStr]] = Field(None, description="SourceMatch defines a set of labels that have to equal the given value for source alerts. Deprecated. Remove before v1.0 release.")
    source_match_re: Optional[Dict[str, Dict[str, Any]]] = None
    source_matchers: Optional[conlist(Matcher)] = Field(None, description="Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.")
    target_match: Optional[Dict[str, StrictStr]] = Field(None, description="TargetMatch defines a set of labels that have to equal the given value for target alerts. Deprecated. Remove before v1.0 release.")
    target_match_re: Optional[Dict[str, Dict[str, Any]]] = None
    target_matchers: Optional[conlist(Matcher)] = Field(None, description="Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.")
    __properties = ["equal", "source_match", "source_match_re", "source_matchers", "target_match", "target_match_re", "target_matchers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InhibitRule:
        """Create an instance of InhibitRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in source_matchers (list)
        _items = []
        if self.source_matchers:
            for _item in self.source_matchers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['source_matchers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in target_matchers (list)
        _items = []
        if self.target_matchers:
            for _item in self.target_matchers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['target_matchers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InhibitRule:
        """Create an instance of InhibitRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InhibitRule.parse_obj(obj)

        _obj = InhibitRule.parse_obj({
            "equal": obj.get("equal"),
            "source_match": obj.get("source_match"),
            "source_match_re": obj.get("source_match_re"),
            "source_matchers": [Matcher.from_dict(_item) for _item in obj.get("source_matchers")] if obj.get("source_matchers") is not None else None,
            "target_match": obj.get("target_match"),
            "target_match_re": obj.get("target_match_re"),
            "target_matchers": [Matcher.from_dict(_item) for _item in obj.get("target_matchers")] if obj.get("target_matchers") is not None else None
        })
        return _obj


