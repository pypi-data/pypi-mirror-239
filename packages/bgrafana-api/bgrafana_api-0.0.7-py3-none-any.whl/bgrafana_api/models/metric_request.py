# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class MetricRequest(BaseModel):
    """
    MetricRequest
    """
    debug: Optional[StrictBool] = None
    var_from: StrictStr = Field(..., alias="from", description="From Start time in epoch timestamps in milliseconds or relative using Grafana time units.")
    public_dashboard_access_token: Optional[StrictStr] = Field(None, alias="publicDashboardAccessToken")
    queries: conlist(Dict[str, Any]) = Field(..., description="queries.refId – Specifies an identifier of the query. Is optional and default to “A”. queries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId. queries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100. queries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.")
    to: StrictStr = Field(..., description="To End time in epoch timestamps in milliseconds or relative using Grafana time units.")
    __properties = ["debug", "from", "publicDashboardAccessToken", "queries", "to"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetricRequest:
        """Create an instance of MetricRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetricRequest:
        """Create an instance of MetricRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetricRequest.parse_obj(obj)

        _obj = MetricRequest.parse_obj({
            "debug": obj.get("debug"),
            "var_from": obj.get("from"),
            "public_dashboard_access_token": obj.get("publicDashboardAccessToken"),
            "queries": obj.get("queries"),
            "to": obj.get("to")
        })
        return _obj


