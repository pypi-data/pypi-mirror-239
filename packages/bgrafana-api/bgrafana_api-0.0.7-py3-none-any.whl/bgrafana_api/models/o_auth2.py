# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from bgrafana_api.models.tls_config import TLSConfig
from bgrafana_api.models.url import URL

class OAuth2(BaseModel):
    """
    OAuth2
    """
    tls_config: Optional[TLSConfig] = Field(None, alias="TLSConfig")
    client_id: Optional[StrictStr] = None
    client_secret: Optional[StrictStr] = None
    client_secret_file: Optional[StrictStr] = None
    endpoint_params: Optional[Dict[str, StrictStr]] = None
    proxy_url: Optional[URL] = None
    scopes: Optional[conlist(StrictStr)] = None
    token_url: Optional[StrictStr] = None
    __properties = ["TLSConfig", "client_id", "client_secret", "client_secret_file", "endpoint_params", "proxy_url", "scopes", "token_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OAuth2:
        """Create an instance of OAuth2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tls_config
        if self.tls_config:
            _dict['TLSConfig'] = self.tls_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_url
        if self.proxy_url:
            _dict['proxy_url'] = self.proxy_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OAuth2:
        """Create an instance of OAuth2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OAuth2.parse_obj(obj)

        _obj = OAuth2.parse_obj({
            "tls_config": TLSConfig.from_dict(obj.get("TLSConfig")) if obj.get("TLSConfig") is not None else None,
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "client_secret_file": obj.get("client_secret_file"),
            "endpoint_params": obj.get("endpoint_params"),
            "proxy_url": URL.from_dict(obj.get("proxy_url")) if obj.get("proxy_url") is not None else None,
            "scopes": obj.get("scopes"),
            "token_url": obj.get("token_url")
        })
        return _obj


