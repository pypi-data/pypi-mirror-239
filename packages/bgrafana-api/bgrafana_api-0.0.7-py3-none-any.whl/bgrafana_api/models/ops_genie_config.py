# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist
from bgrafana_api.models.http_client_config import HTTPClientConfig
from bgrafana_api.models.ops_genie_config_responder import OpsGenieConfigResponder
from bgrafana_api.models.url import URL

class OpsGenieConfig(BaseModel):
    """
    OpsGenieConfig
    """
    actions: Optional[StrictStr] = None
    api_key: Optional[StrictStr] = None
    api_key_file: Optional[StrictStr] = None
    api_url: Optional[URL] = None
    description: Optional[StrictStr] = None
    details: Optional[Dict[str, StrictStr]] = None
    entity: Optional[StrictStr] = None
    http_config: Optional[HTTPClientConfig] = None
    message: Optional[StrictStr] = None
    note: Optional[StrictStr] = None
    priority: Optional[StrictStr] = None
    responders: Optional[conlist(OpsGenieConfigResponder)] = None
    send_resolved: Optional[StrictBool] = None
    source: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    update_alerts: Optional[StrictBool] = None
    __properties = ["actions", "api_key", "api_key_file", "api_url", "description", "details", "entity", "http_config", "message", "note", "priority", "responders", "send_resolved", "source", "tags", "update_alerts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpsGenieConfig:
        """Create an instance of OpsGenieConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of api_url
        if self.api_url:
            _dict['api_url'] = self.api_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_config
        if self.http_config:
            _dict['http_config'] = self.http_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in responders (list)
        _items = []
        if self.responders:
            for _item in self.responders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['responders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpsGenieConfig:
        """Create an instance of OpsGenieConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpsGenieConfig.parse_obj(obj)

        _obj = OpsGenieConfig.parse_obj({
            "actions": obj.get("actions"),
            "api_key": obj.get("api_key"),
            "api_key_file": obj.get("api_key_file"),
            "api_url": URL.from_dict(obj.get("api_url")) if obj.get("api_url") is not None else None,
            "description": obj.get("description"),
            "details": obj.get("details"),
            "entity": obj.get("entity"),
            "http_config": HTTPClientConfig.from_dict(obj.get("http_config")) if obj.get("http_config") is not None else None,
            "message": obj.get("message"),
            "note": obj.get("note"),
            "priority": obj.get("priority"),
            "responders": [OpsGenieConfigResponder.from_dict(_item) for _item in obj.get("responders")] if obj.get("responders") is not None else None,
            "send_resolved": obj.get("send_resolved"),
            "source": obj.get("source"),
            "tags": obj.get("tags"),
            "update_alerts": obj.get("update_alerts")
        })
        return _obj


