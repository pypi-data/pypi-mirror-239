# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from bgrafana_api.models.matcher import Matcher

class Route(BaseModel):
    """
    A Route is a node that contains definitions of how to handle alerts. This is modified from the upstream alertmanager in that it adds the ObjectMatchers property.  # noqa: E501
    """
    var_continue: Optional[StrictBool] = Field(None, alias="continue")
    group_by: Optional[conlist(StrictStr)] = None
    group_interval: Optional[StrictStr] = None
    group_wait: Optional[StrictStr] = None
    match: Optional[Dict[str, StrictStr]] = Field(None, description="Deprecated. Remove before v1.0 release.")
    match_re: Optional[Dict[str, Dict[str, Any]]] = None
    matchers: Optional[conlist(Matcher)] = Field(None, description="Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.")
    mute_time_intervals: Optional[conlist(StrictStr)] = None
    object_matchers: Optional[conlist(Matcher)] = Field(None, description="Matchers is a slice of Matchers that is sortable, implements Stringer, and provides a Matches method to match a LabelSet against all Matchers in the slice. Note that some users of Matchers might require it to be sorted.")
    provenance: Optional[StrictStr] = None
    receiver: Optional[StrictStr] = None
    repeat_interval: Optional[StrictStr] = None
    routes: Optional[conlist(Route)] = None
    __properties = ["continue", "group_by", "group_interval", "group_wait", "match", "match_re", "matchers", "mute_time_intervals", "object_matchers", "provenance", "receiver", "repeat_interval", "routes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Route:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in matchers (list)
        _items = []
        if self.matchers:
            for _item in self.matchers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['matchers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in object_matchers (list)
        _items = []
        if self.object_matchers:
            for _item in self.object_matchers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['object_matchers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Route:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Route.parse_obj(obj)

        _obj = Route.parse_obj({
            "var_continue": obj.get("continue"),
            "group_by": obj.get("group_by"),
            "group_interval": obj.get("group_interval"),
            "group_wait": obj.get("group_wait"),
            "match": obj.get("match"),
            "match_re": obj.get("match_re"),
            "matchers": [Matcher.from_dict(_item) for _item in obj.get("matchers")] if obj.get("matchers") is not None else None,
            "mute_time_intervals": obj.get("mute_time_intervals"),
            "object_matchers": [Matcher.from_dict(_item) for _item in obj.get("object_matchers")] if obj.get("object_matchers") is not None else None,
            "provenance": obj.get("provenance"),
            "receiver": obj.get("receiver"),
            "repeat_interval": obj.get("repeat_interval"),
            "routes": [Route.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None
        })
        return _obj

Route.update_forward_refs()

