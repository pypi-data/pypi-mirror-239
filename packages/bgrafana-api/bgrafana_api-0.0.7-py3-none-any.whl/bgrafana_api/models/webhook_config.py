# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from bgrafana_api.models.http_client_config import HTTPClientConfig
from bgrafana_api.models.url import URL

class WebhookConfig(BaseModel):
    """
    WebhookConfig
    """
    http_config: Optional[HTTPClientConfig] = None
    max_alerts: Optional[StrictInt] = Field(None, description="MaxAlerts is the maximum number of alerts to be sent per webhook message. Alerts exceeding this threshold will be truncated. Setting this to 0 allows an unlimited number of alerts.")
    send_resolved: Optional[StrictBool] = None
    url: Optional[URL] = None
    __properties = ["http_config", "max_alerts", "send_resolved", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookConfig:
        """Create an instance of WebhookConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of http_config
        if self.http_config:
            _dict['http_config'] = self.http_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookConfig:
        """Create an instance of WebhookConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebhookConfig.parse_obj(obj)

        _obj = WebhookConfig.parse_obj({
            "http_config": HTTPClientConfig.from_dict(obj.get("http_config")) if obj.get("http_config") is not None else None,
            "max_alerts": obj.get("max_alerts"),
            "send_resolved": obj.get("send_resolved"),
            "url": URL.from_dict(obj.get("url")) if obj.get("url") is not None else None
        })
        return _obj


