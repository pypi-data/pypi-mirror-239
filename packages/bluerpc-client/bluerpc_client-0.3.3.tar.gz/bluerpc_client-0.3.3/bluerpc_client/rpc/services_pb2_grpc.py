# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bluerpc_client.rpc import common_pb2 as rpc_dot_common__pb2
from bluerpc_client.rpc import gatt_pb2 as rpc_dot_gatt__pb2


class BlueRPCStub(object):
    """main service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hello = channel.unary_unary(
                '/rpc.BlueRPC/Hello',
                request_serializer=rpc_dot_common__pb2.HelloRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.HelloResponse.FromString,
                )
        self.SetKeystore = channel.unary_unary(
                '/rpc.BlueRPC/SetKeystore',
                request_serializer=rpc_dot_common__pb2.SetKeystoreRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEScanStart = channel.unary_unary(
                '/rpc.BlueRPC/BLEScanStart',
                request_serializer=rpc_dot_gatt__pb2.BLEScanRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEScanStop = channel.unary_unary(
                '/rpc.BlueRPC/BLEScanStop',
                request_serializer=rpc_dot_common__pb2.Void.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEConnect = channel.unary_unary(
                '/rpc.BlueRPC/BLEConnect',
                request_serializer=rpc_dot_gatt__pb2.BLEConnectRequest.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEConnectResponse.FromString,
                )
        self.BLEDisconnect = channel.unary_unary(
                '/rpc.BlueRPC/BLEDisconnect',
                request_serializer=rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEPair = channel.unary_unary(
                '/rpc.BlueRPC/BLEPair',
                request_serializer=rpc_dot_gatt__pb2.BLEPairingRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEPairCode = channel.unary_unary(
                '/rpc.BlueRPC/BLEPairCode',
                request_serializer=rpc_dot_gatt__pb2.BLEPairingCodeRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEUnpair = channel.unary_unary(
                '/rpc.BlueRPC/BLEUnpair',
                request_serializer=rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEGetDevices = channel.unary_unary(
                '/rpc.BlueRPC/BLEGetDevices',
                request_serializer=rpc_dot_common__pb2.Void.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEDevicesResponse.FromString,
                )
        self.BLEGetConnectionProperties = channel.unary_unary(
                '/rpc.BlueRPC/BLEGetConnectionProperties',
                request_serializer=rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEConnectionPropertiesResponse.FromString,
                )
        self.BLEListServices = channel.unary_unary(
                '/rpc.BlueRPC/BLEListServices',
                request_serializer=rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEListServicesResponse.FromString,
                )
        self.BLEReadCharacteristic = channel.unary_unary(
                '/rpc.BlueRPC/BLEReadCharacteristic',
                request_serializer=rpc_dot_gatt__pb2.BLEReadCharacteristicRequest.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEReadResponse.FromString,
                )
        self.BLEReadDescriptor = channel.unary_unary(
                '/rpc.BlueRPC/BLEReadDescriptor',
                request_serializer=rpc_dot_gatt__pb2.BLEReadDescriptorRequest.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEReadResponse.FromString,
                )
        self.BLEWriteCharacteristic = channel.unary_unary(
                '/rpc.BlueRPC/BLEWriteCharacteristic',
                request_serializer=rpc_dot_gatt__pb2.BLEWriteCharacteristicRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEWriteDescriptor = channel.unary_unary(
                '/rpc.BlueRPC/BLEWriteDescriptor',
                request_serializer=rpc_dot_gatt__pb2.BLEWriteDescriptorRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLENotification = channel.unary_unary(
                '/rpc.BlueRPC/BLENotification',
                request_serializer=rpc_dot_gatt__pb2.BLENotificationRequest.SerializeToString,
                response_deserializer=rpc_dot_common__pb2.StatusMessage.FromString,
                )
        self.BLEReceiveNotifications = channel.unary_stream(
                '/rpc.BlueRPC/BLEReceiveNotifications',
                request_serializer=rpc_dot_common__pb2.Void.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLENotificationResponse.FromString,
                )
        self.BLEReceiveDisconnect = channel.unary_stream(
                '/rpc.BlueRPC/BLEReceiveDisconnect',
                request_serializer=rpc_dot_common__pb2.Void.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEDevice.FromString,
                )
        self.BLEReceiveScan = channel.unary_stream(
                '/rpc.BlueRPC/BLEReceiveScan',
                request_serializer=rpc_dot_common__pb2.Void.SerializeToString,
                response_deserializer=rpc_dot_gatt__pb2.BLEScanResponse.FromString,
                )


class BlueRPCServicer(object):
    """main service
    """

    def Hello(self, request, context):
        """first request after connection, returns general infos about the worker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKeystore(self, request, context):
        """request to set the keystore of the woker (user will need to provide the password on the worker)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEScanStart(self, request, context):
        """==================== Gatt ====================

        start a scanner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEScanStop(self, request, context):
        """stop the scanner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEConnect(self, request, context):
        """connect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEDisconnect(self, request, context):
        """disconnect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEPair(self, request, context):
        """pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEPairCode(self, request, context):
        """pairing code (should be called after BLEPair when
        ERROR_CODE_PAIRING_CODE_REQUIRED is returned)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEUnpair(self, request, context):
        """unpair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEGetDevices(self, request, context):
        """get a list of connected and paired devices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEGetConnectionProperties(self, request, context):
        """get connection properties
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEListServices(self, request, context):
        """list services, characteristics and descriptors for a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEReadCharacteristic(self, request, context):
        """read characteristic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEReadDescriptor(self, request, context):
        """read descriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEWriteCharacteristic(self, request, context):
        """write characteristic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEWriteDescriptor(self, request, context):
        """write descriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLENotification(self, request, context):
        """subscribe or unsubscribe to a characteristic notification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEReceiveNotifications(self, request, context):
        """global method to receive all the subscribed notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEReceiveDisconnect(self, request, context):
        """global method to receive disconnect notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BLEReceiveScan(self, request, context):
        """global method to receive scan results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlueRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=rpc_dot_common__pb2.HelloRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.HelloResponse.SerializeToString,
            ),
            'SetKeystore': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKeystore,
                    request_deserializer=rpc_dot_common__pb2.SetKeystoreRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEScanStart': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEScanStart,
                    request_deserializer=rpc_dot_gatt__pb2.BLEScanRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEScanStop': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEScanStop,
                    request_deserializer=rpc_dot_common__pb2.Void.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEConnect,
                    request_deserializer=rpc_dot_gatt__pb2.BLEConnectRequest.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEConnectResponse.SerializeToString,
            ),
            'BLEDisconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEDisconnect,
                    request_deserializer=rpc_dot_gatt__pb2.BLEDevice.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEPair': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEPair,
                    request_deserializer=rpc_dot_gatt__pb2.BLEPairingRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEPairCode': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEPairCode,
                    request_deserializer=rpc_dot_gatt__pb2.BLEPairingCodeRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEUnpair': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEUnpair,
                    request_deserializer=rpc_dot_gatt__pb2.BLEDevice.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEGetDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEGetDevices,
                    request_deserializer=rpc_dot_common__pb2.Void.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEDevicesResponse.SerializeToString,
            ),
            'BLEGetConnectionProperties': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEGetConnectionProperties,
                    request_deserializer=rpc_dot_gatt__pb2.BLEDevice.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEConnectionPropertiesResponse.SerializeToString,
            ),
            'BLEListServices': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEListServices,
                    request_deserializer=rpc_dot_gatt__pb2.BLEDevice.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEListServicesResponse.SerializeToString,
            ),
            'BLEReadCharacteristic': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEReadCharacteristic,
                    request_deserializer=rpc_dot_gatt__pb2.BLEReadCharacteristicRequest.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEReadResponse.SerializeToString,
            ),
            'BLEReadDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEReadDescriptor,
                    request_deserializer=rpc_dot_gatt__pb2.BLEReadDescriptorRequest.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEReadResponse.SerializeToString,
            ),
            'BLEWriteCharacteristic': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEWriteCharacteristic,
                    request_deserializer=rpc_dot_gatt__pb2.BLEWriteCharacteristicRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEWriteDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.BLEWriteDescriptor,
                    request_deserializer=rpc_dot_gatt__pb2.BLEWriteDescriptorRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLENotification': grpc.unary_unary_rpc_method_handler(
                    servicer.BLENotification,
                    request_deserializer=rpc_dot_gatt__pb2.BLENotificationRequest.FromString,
                    response_serializer=rpc_dot_common__pb2.StatusMessage.SerializeToString,
            ),
            'BLEReceiveNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.BLEReceiveNotifications,
                    request_deserializer=rpc_dot_common__pb2.Void.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLENotificationResponse.SerializeToString,
            ),
            'BLEReceiveDisconnect': grpc.unary_stream_rpc_method_handler(
                    servicer.BLEReceiveDisconnect,
                    request_deserializer=rpc_dot_common__pb2.Void.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
            ),
            'BLEReceiveScan': grpc.unary_stream_rpc_method_handler(
                    servicer.BLEReceiveScan,
                    request_deserializer=rpc_dot_common__pb2.Void.FromString,
                    response_serializer=rpc_dot_gatt__pb2.BLEScanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.BlueRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlueRPC(object):
    """main service
    """

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/Hello',
            rpc_dot_common__pb2.HelloRequest.SerializeToString,
            rpc_dot_common__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKeystore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/SetKeystore',
            rpc_dot_common__pb2.SetKeystoreRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEScanStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEScanStart',
            rpc_dot_gatt__pb2.BLEScanRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEScanStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEScanStop',
            rpc_dot_common__pb2.Void.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEConnect',
            rpc_dot_gatt__pb2.BLEConnectRequest.SerializeToString,
            rpc_dot_gatt__pb2.BLEConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEDisconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEDisconnect',
            rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEPair',
            rpc_dot_gatt__pb2.BLEPairingRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEPairCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEPairCode',
            rpc_dot_gatt__pb2.BLEPairingCodeRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEUnpair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEUnpair',
            rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEGetDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEGetDevices',
            rpc_dot_common__pb2.Void.SerializeToString,
            rpc_dot_gatt__pb2.BLEDevicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEGetConnectionProperties(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEGetConnectionProperties',
            rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
            rpc_dot_gatt__pb2.BLEConnectionPropertiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEListServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEListServices',
            rpc_dot_gatt__pb2.BLEDevice.SerializeToString,
            rpc_dot_gatt__pb2.BLEListServicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEReadCharacteristic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEReadCharacteristic',
            rpc_dot_gatt__pb2.BLEReadCharacteristicRequest.SerializeToString,
            rpc_dot_gatt__pb2.BLEReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEReadDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEReadDescriptor',
            rpc_dot_gatt__pb2.BLEReadDescriptorRequest.SerializeToString,
            rpc_dot_gatt__pb2.BLEReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEWriteCharacteristic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEWriteCharacteristic',
            rpc_dot_gatt__pb2.BLEWriteCharacteristicRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEWriteDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLEWriteDescriptor',
            rpc_dot_gatt__pb2.BLEWriteDescriptorRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLENotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.BlueRPC/BLENotification',
            rpc_dot_gatt__pb2.BLENotificationRequest.SerializeToString,
            rpc_dot_common__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEReceiveNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rpc.BlueRPC/BLEReceiveNotifications',
            rpc_dot_common__pb2.Void.SerializeToString,
            rpc_dot_gatt__pb2.BLENotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEReceiveDisconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rpc.BlueRPC/BLEReceiveDisconnect',
            rpc_dot_common__pb2.Void.SerializeToString,
            rpc_dot_gatt__pb2.BLEDevice.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BLEReceiveScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rpc.BlueRPC/BLEReceiveScan',
            rpc_dot_common__pb2.Void.SerializeToString,
            rpc_dot_gatt__pb2.BLEScanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
