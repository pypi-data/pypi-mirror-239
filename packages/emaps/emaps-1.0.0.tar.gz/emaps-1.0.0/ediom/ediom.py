# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ediom
else:
    import _ediom

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def readDPDB(arg1):
    return _ediom.readDPDB(arg1)

def prepareSearch(arg1, arg2, arg3, tmfn=None):
    return _ediom.prepareSearch(arg1, arg2, arg3, tmfn)

def getImageCenter(arg1, arg2):
    return _ediom.getImageCenter(arg1, arg2)

def DPGetMask(mask):
    return _ediom.DPGetMask(mask)

def DPListMaskSelect(arg1, arg2):
    return _ediom.DPListMaskSelect(arg1, arg2)

def DPGetCurrentImage(img):
    return _ediom.DPGetCurrentImage(img)

def loadXImage(arg1, arg2, arg3):
    return _ediom.loadXImage(arg1, arg2, arg3)

def loadXTemplateMask(arg1):
    return _ediom.loadXTemplateMask(arg1)

def getXTemplateMask(tplimg):
    return _ediom.getXTemplateMask(tplimg)

def loadXMask(arg1):
    return _ediom.loadXMask(arg1)

def getXMask(ximg):
    return _ediom.getXMask(ximg)

def getFitMap(fmimg):
    return _ediom.getFitMap(fmimg)

def getFitImage(fimg):
    return _ediom.getFitImage(fimg)

def searchXPeaks(arg1, threshold=0.6):
    return _ediom.searchXPeaks(arg1, threshold)

def indexXPeaks(rmin, foption, flength, findex, scol, srow, srowsize, sradius, filter):
    return _ediom.indexXPeaks(rmin, foption, flength, findex, scol, srow, srowsize, sradius, filter)

def selectExSHImage(INPUT):
    return _ediom.selectExSHImage(INPUT)

def freeEdiom():
    return _ediom.freeEdiom()

def getDPListKDif(ds):
    return _ediom.getDPListKDif(ds)

def getXKDif(ds):
    return _ediom.getXKDif(ds)
MAX_IMAGESIZE = _ediom.MAX_IMAGESIZE
DEF_KERNEL_SIZE = _ediom.DEF_KERNEL_SIZE
class edc_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_ediom.edc_t_alpha_get, _ediom.edc_t_alpha_set)
    cc = property(_ediom.edc_t_cc_get, _ediom.edc_t_cc_set)
    sigma = property(_ediom.edc_t_sigma_get, _ediom.edc_t_sigma_set)
    img_center = property(_ediom.edc_t_img_center_get, _ediom.edc_t_img_center_set)

    def __repr__(self):
      return "Rotation angle: " + str(self.alpha) + \
            "\nCamera constant: " + str(self.cc) + \
            "\nPeak width: " + str(self.sigma) + \
            "\nDiffraction center: " + str(self.get_center())


    def get_center(self):
        return _ediom.edc_t_get_center(self)

    def set_center(self, x, y):
        return _ediom.edc_t_set_center(self, x, y)

    def __init__(self):
        _ediom.edc_t_swiginit(self, _ediom.new_edc_t())
    __swig_destroy__ = _ediom.delete_edc_t

# Register edc_t in _ediom:
_ediom.edc_t_swigregister(edc_t)
class kdif_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cx = property(_ediom.kdif_t_cx_get, _ediom.kdif_t_cx_set)
    cy = property(_ediom.kdif_t_cy_get, _ediom.kdif_t_cy_set)
    rad = property(_ediom.kdif_t_rad_get, _ediom.kdif_t_rad_set)
    indx = property(_ediom.kdif_t_indx_get, _ediom.kdif_t_indx_set)
    ktype = property(_ediom.kdif_t_ktype_get, _ediom.kdif_t_ktype_set)

    del __repr__
    def __repr__(self):
      return "Center: (" + str(self.cx) + "," + str(self.cy) + ")" + \
             "\nRadius: " + str(self.rad) + \
             "\nMiller Index: " + str(self.get_mindex())



    def get_mindex(self):
        return _ediom.kdif_t_get_mindex(self)

    def __init__(self):
        _ediom.kdif_t_swiginit(self, _ediom.new_kdif_t())
    __swig_destroy__ = _ediom.delete_kdif_t

# Register kdif_t in _ediom:
_ediom.kdif_t_swigregister(kdif_t)
class HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncol = property(_ediom.HEADER_ncol_get, _ediom.HEADER_ncol_set)
    nrow = property(_ediom.HEADER_nrow_get, _ediom.HEADER_nrow_set)
    nlayer = property(_ediom.HEADER_nlayer_get, _ediom.HEADER_nlayer_set)
    type = property(_ediom.HEADER_type_get, _ediom.HEADER_type_set)

    def __init__(self):
        _ediom.HEADER_swiginit(self, _ediom.new_HEADER())
    __swig_destroy__ = _ediom.delete_HEADER

# Register HEADER in _ediom:
_ediom.HEADER_swigregister(HEADER)
class IMAGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_ediom.IMAGE_h_get, _ediom.IMAGE_h_set)
    ilayer = property(_ediom.IMAGE_ilayer_get, _ediom.IMAGE_ilayer_set)
    rmode = property(_ediom.IMAGE_rmode_get, _ediom.IMAGE_rmode_set)
    data = property(_ediom.IMAGE_data_get, _ediom.IMAGE_data_set)

    def getImageData(self):
        return _ediom.IMAGE_getImageData(self)

    def __init__(self):
        _ediom.IMAGE_swiginit(self, _ediom.new_IMAGE())
    __swig_destroy__ = _ediom.delete_IMAGE

# Register IMAGE in _ediom:
_ediom.IMAGE_swigregister(IMAGE)

def DPListPatternImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _ediom.DPListPatternImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def getCurrentXImage(arg1, arg2):
    return _ediom.getCurrentXImage(arg1, arg2)

def getCurrentXImage_new(arg1, arg2, arg3):
    return _ediom.getCurrentXImage_new(arg1, arg2, arg3)

edc = _ediom.edc

