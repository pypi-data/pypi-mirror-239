{"version":3,"file":"c.WhoKCQEr.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp8266.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP8266_STUB from \"./stub_flasher/stub_flasher_8266.json\";\nexport class ESP8266ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP8266\";\n        this.CHIP_DETECT_MAGIC_VALUE = [0xfff0c101];\n        this.EFUSE_RD_REG_BASE = 0x3ff00050;\n        this.UART_CLKDIV_REG = 0x60000014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.XTAL_CLK_DIVIDER = 2;\n        this.FLASH_WRITE_SIZE = 0x4000;\n        // NOT IMPLEMENTED, SETTING EMPTY VALUE\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.UART_DATE_REG_ADDR = 0;\n        this.FLASH_SIZES = {\n            \"512KB\": 0x00,\n            \"256KB\": 0x10,\n            \"1MB\": 0x20,\n            \"2MB\": 0x30,\n            \"4MB\": 0x40,\n            \"2MB-c1\": 0x50,\n            \"4MB-c1\": 0x60,\n            \"8MB\": 0x80,\n            \"16MB\": 0x90,\n        };\n        this.SPI_REG_BASE = 0x60000200;\n        this.SPI_USR_OFFS = 0x1c;\n        this.SPI_USR1_OFFS = 0x20;\n        this.SPI_USR2_OFFS = 0x24;\n        this.SPI_MOSI_DLEN_OFFS = 0; // not in esp8266\n        this.SPI_MISO_DLEN_OFFS = 0; // not in esp8266\n        this.SPI_W0_OFFS = 0x40;\n        this.TEXT_START = ESP8266_STUB.text_start;\n        this.ENTRY = ESP8266_STUB.entry;\n        this.DATA_START = ESP8266_STUB.data_start;\n        this.ROM_DATA = ESP8266_STUB.data;\n        this.ROM_TEXT = ESP8266_STUB.text;\n        this.get_chip_features = async (loader) => {\n            const features = [\"WiFi\"];\n            if ((await this.get_chip_description(loader)) == \"ESP8285\")\n                features.push(\"Embedded Flash\");\n            return features;\n        };\n    }\n    async read_efuse(loader, offset) {\n        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\n        loader.debug(\"Read efuse \" + addr);\n        return await loader.read_reg(addr);\n    }\n    async get_chip_description(loader) {\n        const efuse3 = await this.read_efuse(loader, 2);\n        const efuse0 = await this.read_efuse(loader, 0);\n        const is_8285 = ((efuse0 & (1 << 4)) | (efuse3 & (1 << 16))) != 0; // One or the other efuse bit is set for ESP8285\n        return is_8285 ? \"ESP8285\" : \"ESP8266EX\";\n    }\n    async get_crystal_freq(loader) {\n        const uart_div = (await loader.read_reg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const ets_xtal = (loader.transport.baudrate * uart_div) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let norm_xtal;\n        if (ets_xtal > 33) {\n            norm_xtal = 40;\n        }\n        else {\n            norm_xtal = 26;\n        }\n        if (Math.abs(norm_xtal - ets_xtal) > 1) {\n            loader.info(\"WARNING: Detected crystal freq \" +\n                ets_xtal +\n                \"MHz is quite different to normalized freq \" +\n                norm_xtal +\n                \"MHz. Unsupported crystal in use?\");\n        }\n        return norm_xtal;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async read_mac(loader) {\n        let mac0 = await this.read_efuse(loader, 0);\n        mac0 = mac0 >>> 0;\n        let mac1 = await this.read_efuse(loader, 1);\n        mac1 = mac1 >>> 0;\n        let mac3 = await this.read_efuse(loader, 3);\n        mac3 = mac3 >>> 0;\n        const mac = new Uint8Array(6);\n        if (mac3 != 0) {\n            mac[0] = (mac3 >> 16) & 0xff;\n            mac[1] = (mac3 >> 8) & 0xff;\n            mac[2] = mac3 & 0xff;\n        }\n        else if (((mac1 >> 16) & 0xff) == 0) {\n            mac[0] = 0x18;\n            mac[1] = 0xfe;\n            mac[2] = 0x34;\n        }\n        else if (((mac1 >> 16) & 0xff) == 1) {\n            mac[0] = 0xac;\n            mac[1] = 0xd0;\n            mac[2] = 0x74;\n        }\n        else {\n            loader.error(\"Unknown OUI\");\n        }\n        mac[3] = (mac1 >> 8) & 0xff;\n        mac[4] = mac1 & 0xff;\n        mac[5] = (mac0 >> 24) & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP8266ROM","ROM","constructor","super","arguments","this","CHIP_NAME","CHIP_DETECT_MAGIC_VALUE","EFUSE_RD_REG_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","XTAL_CLK_DIVIDER","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","UART_DATE_REG_ADDR","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","TEXT_START","ESP8266_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","get_chip_features","async","loader","features","get_chip_description","push","read_efuse","offset","addr","debug","read_reg","efuse3","get_crystal_freq","uart_div","ets_xtal","transport","baudrate","norm_xtal","Math","abs","info","_d2h","d","h","toString","length","read_mac","mac0","mac1","mac3","mac","Uint8Array","error","get_erase_size","size"],"mappings":"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","x_google_ignoreList":[0]}