{"version":3,"file":"c.vx_hSZk2.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32s2.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP32S2_STUB from \"./stub_flasher/stub_flasher_32s2.json\";\nexport class ESP32S2ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-S2\";\n        this.IMAGE_CHIP_ID = 2;\n        this.MAC_EFUSE_REG = 0x3f41a044;\n        this.EFUSE_BASE = 0x3f41a000;\n        this.UART_CLKDIV_REG = 0x3f400014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x60000078;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x3f402000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_W0_OFFS = 0x58;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.TEXT_START = ESP32S2_STUB.text_start;\n        this.ENTRY = ESP32S2_STUB.entry;\n        this.DATA_START = ESP32S2_STUB.data_start;\n        this.ROM_DATA = ESP32S2_STUB.data;\n        this.ROM_TEXT = ESP32S2_STUB.text;\n    }\n    async get_pkg_version(loader) {\n        const num_word = 3;\n        const block1_addr = this.EFUSE_BASE + 0x044;\n        const addr = block1_addr + 4 * num_word;\n        const word3 = await loader.read_reg(addr);\n        const pkg_version = (word3 >> 21) & 0x0f;\n        return pkg_version;\n    }\n    async get_chip_description(loader) {\n        const chip_desc = [\"ESP32-S2\", \"ESP32-S2FH16\", \"ESP32-S2FH32\"];\n        const pkg_ver = await this.get_pkg_version(loader);\n        if (pkg_ver >= 0 && pkg_ver <= 2) {\n            return chip_desc[pkg_ver];\n        }\n        else {\n            return \"unknown ESP32-S2\";\n        }\n    }\n    async get_chip_features(loader) {\n        const features = [\"Wi-Fi\"];\n        const pkg_ver = await this.get_pkg_version(loader);\n        if (pkg_ver == 1) {\n            features.push(\"Embedded 2MB Flash\");\n        }\n        else if (pkg_ver == 2) {\n            features.push(\"Embedded 4MB Flash\");\n        }\n        const num_word = 4;\n        const block2_addr = this.EFUSE_BASE + 0x05c;\n        const addr = block2_addr + 4 * num_word;\n        const word4 = await loader.read_reg(addr);\n        const block2_ver = (word4 >> 4) & 0x07;\n        if (block2_ver == 1) {\n            features.push(\"ADC and temperature sensor calibration in BLK2 of efuse\");\n        }\n        return features;\n    }\n    async get_crystal_freq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async read_mac(loader) {\n        let mac0 = await loader.read_reg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.read_reg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32S2ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","MAC_EFUSE_REG","EFUSE_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_W0_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","TEXT_START","ESP32S2_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","get_pkg_version","loader","addr","read_reg","get_chip_description","chip_desc","pkg_ver","get_chip_features","features","push","get_crystal_freq","_d2h","d","h","toString","length","read_mac","mac0","mac1","mac","Uint8Array","get_erase_size","offset","size"],"mappings":"y8LAEO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,WACjBD,KAAKE,cAAgB,EACrBF,KAAKG,cAAgB,WACrBH,KAAKI,WAAa,WAClBJ,KAAKK,gBAAkB,WACvBL,KAAKM,iBAAmB,QACxBN,KAAKO,mBAAqB,WAC1BP,KAAKQ,iBAAmB,KACxBR,KAAKS,wBAA0B,KAC/BT,KAAKU,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZV,KAAKW,aAAe,WACpBX,KAAKY,aAAe,GACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,YAAc,GACnBf,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,mBAAqB,GAC1BjB,KAAKkB,WAAaC,EAClBnB,KAAKoB,MAAQD,EACbnB,KAAKqB,WAAaF,EAClBnB,KAAKsB,SAAWH,EAChBnB,KAAKuB,SAAWJ,CACnB,CACD,qBAAMK,CAAgBC,GAClB,MAEMC,EADc1B,KAAKI,WAAa,GACX,GAG3B,aAFoBqB,EAAOE,SAASD,IACN,GAAM,EAEvC,CACD,0BAAME,CAAqBH,GACvB,MAAMI,EAAY,CAAC,WAAY,eAAgB,gBACzCC,QAAgB9B,KAAKwB,gBAAgBC,GAC3C,OAAIK,GAAW,GAAKA,GAAW,EACpBD,EAAUC,GAGV,kBAEd,CACD,uBAAMC,CAAkBN,GACpB,MAAMO,EAAW,CAAC,SACZF,QAAgB9B,KAAKwB,gBAAgBC,GAC5B,GAAXK,EACAE,EAASC,KAAK,sBAEE,GAAXH,GACLE,EAASC,KAAK,sBAElB,MAEMP,EADc1B,KAAKI,WAAa,GACX,GAM3B,OAHkB,UAFEqB,EAAOE,SAASD,IACP,EAAK,IAE9BM,EAASC,KAAK,2DAEXD,CACV,CACD,sBAAME,CAAiBT,GACnB,OAAO,EACV,CACD,IAAAU,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CACrC,CACD,cAAMG,CAASf,GACX,IAAIgB,QAAahB,EAAOE,SAAS3B,KAAKG,eACtCsC,KAAgB,EAChB,IAAIC,QAAajB,EAAOE,SAAS3B,KAAKG,cAAgB,GACtDuC,EAAQA,IAAS,EAAK,MACtB,MAAMC,EAAM,IAAIC,WAAW,GAO3B,OANAD,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACDzC,KAAKmC,KAAKQ,EAAI,IAClB,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,IACd,IACA3C,KAAKmC,KAAKQ,EAAI,GACrB,CACD,cAAAE,CAAeC,EAAQC,GACnB,OAAOA,CACV","x_google_ignoreList":[0]}