{"version":3,"file":"c.gjiUKwbk.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32c6.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP32C6_STUB from \"./stub_flasher/stub_flasher_32c6.json\";\nexport class ESP32C6ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C6\";\n        this.IMAGE_CHIP_ID = 13;\n        this.EFUSE_BASE = 0x600b0800;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x6000007c;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x60002000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n        this.TEXT_START = ESP32C6_STUB.text_start;\n        this.ENTRY = ESP32C6_STUB.entry;\n        this.DATA_START = ESP32C6_STUB.data_start;\n        this.ROM_DATA = ESP32C6_STUB.data;\n        this.ROM_TEXT = ESP32C6_STUB.text;\n    }\n    async get_pkg_version(loader) {\n        const num_word = 3;\n        const block1_addr = this.EFUSE_BASE + 0x044;\n        const addr = block1_addr + 4 * num_word;\n        const word3 = await loader.read_reg(addr);\n        const pkg_version = (word3 >> 21) & 0x07;\n        return pkg_version;\n    }\n    async get_chip_revision(loader) {\n        const block1_addr = this.EFUSE_BASE + 0x044;\n        const num_word = 3;\n        const pos = 18;\n        const addr = block1_addr + 4 * num_word;\n        const ret = ((await loader.read_reg(addr)) & (0x7 << pos)) >> pos;\n        return ret;\n    }\n    async get_chip_description(loader) {\n        let desc;\n        const pkg_ver = await this.get_pkg_version(loader);\n        if (pkg_ver === 0) {\n            desc = \"ESP32-C6\";\n        }\n        else {\n            desc = \"unknown ESP32-C6\";\n        }\n        const chip_rev = await this.get_chip_revision(loader);\n        desc += \" (revision \" + chip_rev + \")\";\n        return desc;\n    }\n    async get_chip_features(loader) {\n        return [\"Wi-Fi\"];\n    }\n    async get_crystal_freq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async read_mac(loader) {\n        let mac0 = await loader.read_reg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.read_reg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32C6ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","MAC_EFUSE_REG","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","TEXT_START","ESP32C6_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","get_pkg_version","loader","addr","read_reg","get_chip_revision","get_chip_description","desc","get_chip_features","get_crystal_freq","_d2h","d","h","toString","length","read_mac","mac0","mac1","mac","Uint8Array","get_erase_size","offset","size"],"mappings":"inKAEO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,WACjBD,KAAKE,cAAgB,GACrBF,KAAKG,WAAa,WAClBH,KAAKI,cAAgBJ,KAAKG,WAAa,GACvCH,KAAKK,gBAAkB,WACvBL,KAAKM,iBAAmB,QACxBN,KAAKO,mBAAqB,WAC1BP,KAAKQ,iBAAmB,KACxBR,KAAKS,wBAA0B,EAC/BT,KAAKU,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZV,KAAKW,aAAe,WACpBX,KAAKY,aAAe,GACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,mBAAqB,GAC1Bf,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,YAAc,GACnBjB,KAAKkB,WAAaC,EAClBnB,KAAKoB,MAAQD,EACbnB,KAAKqB,WAAaF,EAClBnB,KAAKsB,SAAWH,EAChBnB,KAAKuB,SAAWJ,CACnB,CACD,qBAAMK,CAAgBC,GAClB,MAEMC,EADc1B,KAAKG,WAAa,GACX,GAG3B,aAFoBsB,EAAOE,SAASD,IACN,GAAM,CAEvC,CACD,uBAAME,CAAkBH,GACpB,MAGMC,EAHc1B,KAAKG,WAAa,GAGX,GAE3B,aADoBsB,EAAOE,SAASD,GAAU,GAFlC,OAIf,CACD,0BAAMG,CAAqBJ,GACvB,IAAIK,EAGAA,EADY,UADM9B,KAAKwB,gBAAgBC,GAEhC,WAGA,mBAIX,OADAK,GAAQ,oBADe9B,KAAK4B,kBAAkBH,GACX,IAC5BK,CACV,CACD,uBAAMC,CAAkBN,GACpB,MAAO,CAAC,QACX,CACD,sBAAMO,CAAiBP,GACnB,OAAO,EACV,CACD,IAAAQ,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CACrC,CACD,cAAMG,CAASb,GACX,IAAIc,QAAad,EAAOE,SAAS3B,KAAKI,eACtCmC,KAAgB,EAChB,IAAIC,QAAaf,EAAOE,SAAS3B,KAAKI,cAAgB,GACtDoC,EAAQA,IAAS,EAAK,MACtB,MAAMC,EAAM,IAAIC,WAAW,GAO3B,OANAD,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACDvC,KAAKiC,KAAKQ,EAAI,IAClB,IACAzC,KAAKiC,KAAKQ,EAAI,IACd,IACAzC,KAAKiC,KAAKQ,EAAI,IACd,IACAzC,KAAKiC,KAAKQ,EAAI,IACd,IACAzC,KAAKiC,KAAKQ,EAAI,IACd,IACAzC,KAAKiC,KAAKQ,EAAI,GACrB,CACD,cAAAE,CAAeC,EAAQC,GACnB,OAAOA,CACV","x_google_ignoreList":[0]}