Metadata-Version: 2.1
Name: gpt-readme
Version: 0.1.1
Summary: Use ChatGPT to generate a well-formatted README based on your code
Home-page: https://github.com/gusye1234/gpt-readme
Author: JianbaiYe
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown


<div align="center">
    <a href="https://github.com/gusye1234/gpt-readme/blob/main/readme-zh.md">
       GPT-written readme in chinese
    </a>
   <br/>
    <br/>
    <a href="https://github.com/gusye1234/gpt-readme">
      <img src="https://img.shields.io/badge/written_by-GPT-green">
    </a>
    <a href="https://github.com/gusye1234/gpt-readme">
      <img src="https://img.shields.io/badge/could_be-Wrong-red">
    </a>
    <a href="https://pypi.org/project/gpt-readme/">
      <img src="https://img.shields.io/pypi/v/gpt-readme.svg">
    </a>
</div>

*This readme is generated by command: `gpt-readme --demand let user know gpt-readme is a shell command. use gpt-readme for the commandline usage, not the python call. You must detail commandline usage of gpt-readme. Detail the installation process. Let user know they can install gpt-readme from pip, or from source github repo gusye1234/gpt-readme --agree `*

# gpt-readme

## Introduction
The `gpt-readme` module is a Python code library designed to automate the process of generating informative README files for code repositories or files. It utilizes the OpenAI GPT model and provides features such as summarizing directories and files, generating prompts for READMEs, and creating well-structured READMEs.

## Get Started
To install the `gpt-readme` module, you can use either of the following methods:

1. Install from PyPI:
   ```
   pip install gpt-readme
   ```

2. Install from the source GitHub repository:
   ```
   git clone https://github.com/gusye1234/gpt-readme.git
   cd gpt-readme
   pip install .
   ```

To use the `gpt-readme` command-line tool, run the following command:
```
gpt-readme --path <code_path> --exts <code_extensions> --language <readme_language> --model <readme_model> --demand <additional_demands> --out <readme_output_path> --cache <cache_option> --agree
```

The available command-line options are:
- `--path`: The local path for the code repository or file.
- `--exts`: Select the code extension names, separated by commas.
- `--language`: Select the language for the README.
- `--model`: Select the model for generating the README.
- `--demand`: Additional requirements for the gpt-readme.
- `--out`: The path to save the generated README file.
- `--cache`: Cache the code summary to speed up future generation (set to 0 to disable).
- `--agree`: Agree to send the code to OpenAI.

## Features
The `gpt-readme` module supports the following main features:

1. Summarizing directories and files: It provides functionality to summarize the contents of directories and individual code files.
2. Generating prompts for READMEs: It generates prompts that can be used as a starting point for writing README files.
3. Creating well-structured READMEs: It utilizes the OpenAI GPT model to generate informative and well-structured README files.

These features can be used in various scenarios, such as documenting code repositories, providing code summaries, and facilitating code sharing.

## Implementation
The `gpt-readme` module consists of the following code files and submodules:

- `setup.py`: Configures the installation and distribution of the `gpt-readme` package.
- `gpt_readme/__init__.py`: Defines metadata for the code repository and imports the `main` function.
- `gpt_readme/__main__.py`: Serves as the entry point for the `gpt-readme` module and executes the `main` function.
- `gpt_readme/constants.py`: Defines constants, variables, and a function for generating a readme header.
- `gpt_readme/dir_summary.py`: Implements functionality to summarize directories and files in a code repository.
- `gpt_readme/file_summary.py`: Provides functionality for generating summaries of code files.
- `gpt_readme/main.py`: The main script for generating README files using ChatGPT.
- `gpt_readme/prompts.py`: Defines constants for generating prompts in READMEs.
- `gpt_readme/utils.py`: Contains utility functions used throughout the `gpt-readme` module.

These code files and submodules work together to provide the overall functionality of the `gpt-readme` module.

## Acknowledgement
The `gpt-readme` module relies on the following external libraries and modules:

- `os`: Provides functions for interacting with the operating system.
- `openai`: Enables interaction with the OpenAI GPT model.
- `sys`: Provides access to some variables used or maintained by the interpreter.
- `asyncio`: Provides infrastructure for writing single-threaded concurrent code.
- `rich.console`: Enables rich text output in the console.
- `rich.markdown`: Provides functionality for rendering Markdown text.
- `argparse`: Facilitates the parsing of command-line arguments.
- `getpass`: Provides a secure way to handle password prompts.
- `json`: Enables JSON encoding and decoding.
- `hashlib`: Provides cryptographic hash functions.

These external dependencies contribute to various aspects of the `gpt-readme` module, such as file system operations, interacting with the OpenAI GPT model, and handling JSON data.

Special thanks to the developers of these libraries and modules for their contributions to the `gpt-readme` module.
