# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class Folder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def type() -> typing.Type['Type']:
                return Type
        
            @staticmethod
            def subtype() -> typing.Type['Subtype']:
                return Subtype
            creationWorkflowDefinitionKey = schemas.StrSchema
            validationWorkflowDefinitionKey = schemas.StrSchema
            legacyId = schemas.StrSchema
            
            
            class stepList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Task']:
                        return Task
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Task'], typing.List['Task']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stepList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Task':
                    return super().__getitem__(i)
        
            @staticmethod
            def originDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
        
            @staticmethod
            def finalDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
            
            
            class documentList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DocumentDto']:
                        return DocumentDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DocumentDto'], typing.List['DocumentDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'documentList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DocumentDto':
                    return super().__getitem__(i)
            
            
            class signatureProofs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SignatureProof']:
                        return SignatureProof
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SignatureProof'], typing.List['SignatureProof']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signatureProofs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SignatureProof':
                    return super().__getitem__(i)
            dueDate = schemas.DateTimeSchema
        
            @staticmethod
            def visibility() -> typing.Type['FolderVisibility']:
                return FolderVisibility
            draftCreationDate = schemas.DateTimeSchema
            sentToArchivesDate = schemas.DateTimeSchema
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            
            
            class readByUserIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'readByUserIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            readByCurrentUser = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "metadata": metadata,
                "type": type,
                "subtype": subtype,
                "creationWorkflowDefinitionKey": creationWorkflowDefinitionKey,
                "validationWorkflowDefinitionKey": validationWorkflowDefinitionKey,
                "legacyId": legacyId,
                "stepList": stepList,
                "originDesk": originDesk,
                "finalDesk": finalDesk,
                "documentList": documentList,
                "signatureProofs": signatureProofs,
                "dueDate": dueDate,
                "visibility": visibility,
                "draftCreationDate": draftCreationDate,
                "sentToArchivesDate": sentToArchivesDate,
                "state": state,
                "readByUserIds": readByUserIds,
                "readByCurrentUser": readByCurrentUser,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'Type': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'Subtype': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationWorkflowDefinitionKey"]) -> MetaOapg.properties.creationWorkflowDefinitionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationWorkflowDefinitionKey"]) -> MetaOapg.properties.validationWorkflowDefinitionKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacyId"]) -> MetaOapg.properties.legacyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepList"]) -> MetaOapg.properties.stepList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentList"]) -> MetaOapg.properties.documentList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureProofs"]) -> MetaOapg.properties.signatureProofs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> 'FolderVisibility': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftCreationDate"]) -> MetaOapg.properties.draftCreationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentToArchivesDate"]) -> MetaOapg.properties.sentToArchivesDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readByUserIds"]) -> MetaOapg.properties.readByUserIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readByCurrentUser"]) -> MetaOapg.properties.readByCurrentUser: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "metadata", "type", "subtype", "creationWorkflowDefinitionKey", "validationWorkflowDefinitionKey", "legacyId", "stepList", "originDesk", "finalDesk", "documentList", "signatureProofs", "dueDate", "visibility", "draftCreationDate", "sentToArchivesDate", "state", "readByUserIds", "readByCurrentUser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['Type', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union['Subtype', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationWorkflowDefinitionKey"]) -> typing.Union[MetaOapg.properties.creationWorkflowDefinitionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationWorkflowDefinitionKey"]) -> typing.Union[MetaOapg.properties.validationWorkflowDefinitionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacyId"]) -> typing.Union[MetaOapg.properties.legacyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepList"]) -> typing.Union[MetaOapg.properties.stepList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentList"]) -> typing.Union[MetaOapg.properties.documentList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureProofs"]) -> typing.Union[MetaOapg.properties.signatureProofs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union['FolderVisibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftCreationDate"]) -> typing.Union[MetaOapg.properties.draftCreationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentToArchivesDate"]) -> typing.Union[MetaOapg.properties.sentToArchivesDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['State', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readByUserIds"]) -> typing.Union[MetaOapg.properties.readByUserIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readByCurrentUser"]) -> typing.Union[MetaOapg.properties.readByCurrentUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "metadata", "type", "subtype", "creationWorkflowDefinitionKey", "validationWorkflowDefinitionKey", "legacyId", "stepList", "originDesk", "finalDesk", "documentList", "signatureProofs", "dueDate", "visibility", "draftCreationDate", "sentToArchivesDate", "state", "readByUserIds", "readByCurrentUser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        type: typing.Union['Type', schemas.Unset] = schemas.unset,
        subtype: typing.Union['Subtype', schemas.Unset] = schemas.unset,
        creationWorkflowDefinitionKey: typing.Union[MetaOapg.properties.creationWorkflowDefinitionKey, str, schemas.Unset] = schemas.unset,
        validationWorkflowDefinitionKey: typing.Union[MetaOapg.properties.validationWorkflowDefinitionKey, str, schemas.Unset] = schemas.unset,
        legacyId: typing.Union[MetaOapg.properties.legacyId, str, schemas.Unset] = schemas.unset,
        stepList: typing.Union[MetaOapg.properties.stepList, list, tuple, schemas.Unset] = schemas.unset,
        originDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        finalDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        documentList: typing.Union[MetaOapg.properties.documentList, list, tuple, schemas.Unset] = schemas.unset,
        signatureProofs: typing.Union[MetaOapg.properties.signatureProofs, list, tuple, schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, datetime, schemas.Unset] = schemas.unset,
        visibility: typing.Union['FolderVisibility', schemas.Unset] = schemas.unset,
        draftCreationDate: typing.Union[MetaOapg.properties.draftCreationDate, str, datetime, schemas.Unset] = schemas.unset,
        sentToArchivesDate: typing.Union[MetaOapg.properties.sentToArchivesDate, str, datetime, schemas.Unset] = schemas.unset,
        state: typing.Union['State', schemas.Unset] = schemas.unset,
        readByUserIds: typing.Union[MetaOapg.properties.readByUserIds, list, tuple, schemas.Unset] = schemas.unset,
        readByCurrentUser: typing.Union[MetaOapg.properties.readByCurrentUser, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Folder':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            metadata=metadata,
            type=type,
            subtype=subtype,
            creationWorkflowDefinitionKey=creationWorkflowDefinitionKey,
            validationWorkflowDefinitionKey=validationWorkflowDefinitionKey,
            legacyId=legacyId,
            stepList=stepList,
            originDesk=originDesk,
            finalDesk=finalDesk,
            documentList=documentList,
            signatureProofs=signatureProofs,
            dueDate=dueDate,
            visibility=visibility,
            draftCreationDate=draftCreationDate,
            sentToArchivesDate=sentToArchivesDate,
            state=state,
            readByUserIds=readByUserIds,
            readByCurrentUser=readByCurrentUser,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.desk_representation import DeskRepresentation
from iparapheur_internal.model.document_dto import DocumentDto
from iparapheur_internal.model.folder_visibility import FolderVisibility
from iparapheur_internal.model.signature_proof import SignatureProof
from iparapheur_internal.model.state import State
from iparapheur_internal.model.subtype import Subtype
from iparapheur_internal.model.task import Task
from iparapheur_internal.model.type import Type
