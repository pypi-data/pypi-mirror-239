# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class Type(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class subtypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Subtype']:
                        return Subtype
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Subtype'], typing.List['Subtype']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subtypes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Subtype':
                    return super().__getitem__(i)
        
            @staticmethod
            def signatureFormat() -> typing.Type['SignatureFormat']:
                return SignatureFormat
        
            @staticmethod
            def protocol() -> typing.Type['SignatureProtocol']:
                return SignatureProtocol
            signatureVisible = schemas.BoolSchema
        
            @staticmethod
            def signaturePosition() -> typing.Type['PdfSignaturePosition']:
                return PdfSignaturePosition
            signatureLocation = schemas.StrSchema
            signatureZipCode = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "description": description,
                "subtypes": subtypes,
                "signatureFormat": signatureFormat,
                "protocol": protocol,
                "signatureVisible": signatureVisible,
                "signaturePosition": signaturePosition,
                "signatureLocation": signatureLocation,
                "signatureZipCode": signatureZipCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtypes"]) -> MetaOapg.properties.subtypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureFormat"]) -> 'SignatureFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> 'SignatureProtocol': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureVisible"]) -> MetaOapg.properties.signatureVisible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signaturePosition"]) -> 'PdfSignaturePosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureLocation"]) -> MetaOapg.properties.signatureLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureZipCode"]) -> MetaOapg.properties.signatureZipCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "subtypes", "signatureFormat", "protocol", "signatureVisible", "signaturePosition", "signatureLocation", "signatureZipCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtypes"]) -> typing.Union[MetaOapg.properties.subtypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureFormat"]) -> typing.Union['SignatureFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union['SignatureProtocol', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureVisible"]) -> typing.Union[MetaOapg.properties.signatureVisible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signaturePosition"]) -> typing.Union['PdfSignaturePosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureLocation"]) -> typing.Union[MetaOapg.properties.signatureLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureZipCode"]) -> typing.Union[MetaOapg.properties.signatureZipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "description", "subtypes", "signatureFormat", "protocol", "signatureVisible", "signaturePosition", "signatureLocation", "signatureZipCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        subtypes: typing.Union[MetaOapg.properties.subtypes, list, tuple, schemas.Unset] = schemas.unset,
        signatureFormat: typing.Union['SignatureFormat', schemas.Unset] = schemas.unset,
        protocol: typing.Union['SignatureProtocol', schemas.Unset] = schemas.unset,
        signatureVisible: typing.Union[MetaOapg.properties.signatureVisible, bool, schemas.Unset] = schemas.unset,
        signaturePosition: typing.Union['PdfSignaturePosition', schemas.Unset] = schemas.unset,
        signatureLocation: typing.Union[MetaOapg.properties.signatureLocation, str, schemas.Unset] = schemas.unset,
        signatureZipCode: typing.Union[MetaOapg.properties.signatureZipCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Type':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            description=description,
            subtypes=subtypes,
            signatureFormat=signatureFormat,
            protocol=protocol,
            signatureVisible=signatureVisible,
            signaturePosition=signaturePosition,
            signatureLocation=signatureLocation,
            signatureZipCode=signatureZipCode,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.pdf_signature_position import PdfSignaturePosition
from iparapheur_internal.model.signature_format import SignatureFormat
from iparapheur_internal.model.signature_protocol import SignatureProtocol
from iparapheur_internal.model.subtype import Subtype
