# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *

class ProjectIdDatasetsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_space_id': 'str',
        'cluster_id': 'str',
        'creator_id': 'str',
        'empty': 'bool',
        'input_dir': 'str',
        'lightning_app_id': 'str',
        'name': 'str',
        'size': 'str',
        'storage_dir': 'str',
        'type': 'V1DatasetType',
        'version': 'str'
    }

    attribute_map = {
        'cloud_space_id': 'cloudSpaceId',
        'cluster_id': 'clusterId',
        'creator_id': 'creatorId',
        'empty': 'empty',
        'input_dir': 'inputDir',
        'lightning_app_id': 'lightningAppId',
        'name': 'name',
        'size': 'size',
        'storage_dir': 'storageDir',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, cloud_space_id: 'str' =None, cluster_id: 'str' =None, creator_id: 'str' =None, empty: 'bool' =None, input_dir: 'str' =None, lightning_app_id: 'str' =None, name: 'str' =None, size: 'str' =None, storage_dir: 'str' =None, type: 'V1DatasetType' =None, version: 'str' =None):  # noqa: E501
        """ProjectIdDatasetsBody - a model defined in Swagger"""  # noqa: E501
        self._cloud_space_id = None
        self._cluster_id = None
        self._creator_id = None
        self._empty = None
        self._input_dir = None
        self._lightning_app_id = None
        self._name = None
        self._size = None
        self._storage_dir = None
        self._type = None
        self._version = None
        self.discriminator = None
        if cloud_space_id is not None:
            self.cloud_space_id = cloud_space_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if creator_id is not None:
            self.creator_id = creator_id
        if empty is not None:
            self.empty = empty
        if input_dir is not None:
            self.input_dir = input_dir
        if lightning_app_id is not None:
            self.lightning_app_id = lightning_app_id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if storage_dir is not None:
            self.storage_dir = storage_dir
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def cloud_space_id(self) -> 'str':
        """Gets the cloud_space_id of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The cloud_space_id of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_id

    @cloud_space_id.setter
    def cloud_space_id(self, cloud_space_id: 'str'):
        """Sets the cloud_space_id of this ProjectIdDatasetsBody.


        :param cloud_space_id: The cloud_space_id of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._cloud_space_id = cloud_space_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdDatasetsBody.


        :param cluster_id: The cluster_id of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def creator_id(self) -> 'str':
        """Gets the creator_id of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The creator_id of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id: 'str'):
        """Sets the creator_id of this ProjectIdDatasetsBody.


        :param creator_id: The creator_id of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def empty(self) -> 'bool':
        """Gets the empty of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The empty of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty: 'bool'):
        """Sets the empty of this ProjectIdDatasetsBody.


        :param empty: The empty of this ProjectIdDatasetsBody.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def input_dir(self) -> 'str':
        """Gets the input_dir of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The input_dir of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._input_dir

    @input_dir.setter
    def input_dir(self, input_dir: 'str'):
        """Sets the input_dir of this ProjectIdDatasetsBody.


        :param input_dir: The input_dir of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._input_dir = input_dir

    @property
    def lightning_app_id(self) -> 'str':
        """Gets the lightning_app_id of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The lightning_app_id of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._lightning_app_id

    @lightning_app_id.setter
    def lightning_app_id(self, lightning_app_id: 'str'):
        """Sets the lightning_app_id of this ProjectIdDatasetsBody.


        :param lightning_app_id: The lightning_app_id of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._lightning_app_id = lightning_app_id

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The name of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdDatasetsBody.


        :param name: The name of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self) -> 'str':
        """Gets the size of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The size of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: 'str'):
        """Sets the size of this ProjectIdDatasetsBody.


        :param size: The size of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def storage_dir(self) -> 'str':
        """Gets the storage_dir of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The storage_dir of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._storage_dir

    @storage_dir.setter
    def storage_dir(self, storage_dir: 'str'):
        """Sets the storage_dir of this ProjectIdDatasetsBody.


        :param storage_dir: The storage_dir of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._storage_dir = storage_dir

    @property
    def type(self) -> 'V1DatasetType':
        """Gets the type of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The type of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: V1DatasetType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1DatasetType'):
        """Sets the type of this ProjectIdDatasetsBody.


        :param type: The type of this ProjectIdDatasetsBody.  # noqa: E501
        :type: V1DatasetType
        """

        self._type = type

    @property
    def version(self) -> 'str':
        """Gets the version of this ProjectIdDatasetsBody.  # noqa: E501


        :return: The version of this ProjectIdDatasetsBody.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this ProjectIdDatasetsBody.


        :param version: The version of this ProjectIdDatasetsBody.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdDatasetsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdDatasetsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdDatasetsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdDatasetsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
