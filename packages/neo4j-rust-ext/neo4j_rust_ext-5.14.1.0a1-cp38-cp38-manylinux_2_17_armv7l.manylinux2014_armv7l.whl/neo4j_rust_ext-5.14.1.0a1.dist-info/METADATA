Metadata-Version: 2.1
Name: neo4j-rust-ext
Version: 5.14.1.0a1
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Topic :: Database
Classifier: Topic :: Software Development
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: neo4j ==5.14.1
Requires-Dist: neo4j[numpy] ; extra == 'numpy'
Requires-Dist: neo4j[pandas] ; extra == 'pandas'
Requires-Dist: neo4j[pyarrow] ; extra == 'pyarrow'
Provides-Extra: numpy
Provides-Extra: pandas
Provides-Extra: pyarrow
License-File: LICENSE.txt
Summary: Rust Extensions for a Faster Neo4j Bolt driver for Python
Keywords: neo4j,graph,database
Author-email: "Neo4j, Inc." <drivers@neo4j.com>
License: Apache License, Version 2.0
Requires-Python: >=3.7
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/neo4j-drivers/neo4j-python-driver-rust-ext

# Rust Extensions for a Faster Neo4j Bolt driver for Python

This project contains Rust extensions to speed up the [official Python driver for Neo4j](https://github.com/neo4j/neo4j-python-driver).

> **IMPORTANT**  
> This project is currently in **alpha** phase.


## Installation
Adjust your `requirements.txt` or similar the line `neo4j` with:
```
# remove:
# neo4j == 5.X.Y
# add:
neo4j-rust-ext ~= 5.X.Y.0
```

That's it!
You don't have to change your code.
This package will install the driver as its dependency and then inject itself in a place where the driver can find it and pick it up.


## Requirements
For many operating systems and architectures, the pre-built wheels will work out of the box.
If they don't, pip (or any other Python packaging front-ent) will try to build the extension from source.
Here's what you'll need for this:
 * Rust 1.65.0 or later:  
   https://www.rust-lang.org/tools/install
 * Header files for your Python installation.  
   For example, on Ubuntu, you need to install the `python3-dev` package.

