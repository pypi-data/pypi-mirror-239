import json
from pathlib import Path
from typing import List

from nmk_base.common import TemplateBuilder


class JsonTemplateBuilder(TemplateBuilder):
    def contribute(self, settings: dict, update: dict):
        for k, v in update.items():
            # Already exists in target model?
            if k in settings:
                # List: extend
                if isinstance(v, list):
                    settings[k].extend(v)
                # Map: update
                elif isinstance(v, dict):
                    settings[k].update(v)
                # Otherwise: replace
                else:
                    settings[k] = v
            else:
                # New key
                settings[k] = v

    def build_json(self, files: List[str], items: dict = None, keywords: dict = None):
        # Iterate on files to merge them
        json_model = {}
        for file_p in map(Path, files):
            self.logger.debug(f"Loading json model fragment: {file_p}")
            self.contribute(json_model, json.loads(self.render_template(file_p, {} if keywords is None else keywords)))

        # Post-process with raw provided items (if any)
        if items is not None:
            self.logger.debug(f"Update json model from config: {items}")
            self.contribute(json_model, items)

        # Generate json_model file (with comment)
        output_lines = json.dumps(json_model, indent=4).splitlines(keepends=True)
        output_lines.insert(1, "    // !!! File generated by nmk-vscode plugin, don't edit !!!\n")
        with self.main_output.open("w") as f:
            f.writelines(output_lines)


class SettingsBuilder(JsonTemplateBuilder):
    def build(self, files: List[str], items: dict):
        self.build_json(files, items)


class LaunchBuilder(JsonTemplateBuilder):
    def build(self, files: List[str]):
        self.build_json(files)


class TasksBuilder(JsonTemplateBuilder):
    def build(self, files: List[str], nmk_task_template: str, nmk_tasks: dict, default_task: str):
        # Handle default values in nmk tasks
        for props in nmk_tasks.values():
            props["group"] = props["group"] if "group" in props else "build"
            props["runOn"] = props["runOn"] if "runOn" in props else "default"

        # Build with keyword
        self.build_json([nmk_task_template] + files, keywords={"nmkTasks": nmk_tasks, "defaultTask": default_task})


class ExtensionsBuilder(JsonTemplateBuilder):
    def build(self, names: List[str]):
        self.build_json([], {"recommendations": names})
