import numpy as np
from numpy.testing import assert_allclose

from nutpy import numeric as nm


def test_perpendicular_vector():
    """
    Test perpendicular_vector function
    """
    u = np.random.random((3, 1))

    v = nm.perpendicular_vector(u)

    s = v.T @ u

    assert_allclose(s, 0.0, rtol=0, atol=1e-12)


def test_Rint():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    delta = 7.5 * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)

    Rint_reference = np.array([1.87622895, 1.69872061, 1.26738672, 0.73211239, 0.30980091,
                               0.64236352, 1.18197619, 1.63988475, 1.87095670, 1.75050324,
                               1.34997557, 0.82307969, 0.34270700, 0.55531842, 1.09428860,
                               1.57482878, 1.85527162, 1.79438638, 1.42916824, 0.91424918,
                               0.40029696, 0.47332532, 1.00486023, 1.50434463, 1.82955318,
                               1.82955318, 1.50434463, 1.00486023, 0.47332532, 0.40029696,
                               0.91424918, 1.42916824, 1.79438638, 1.85527162, 1.57482878,
                               1.09428860, 0.55531842, 0.34270700, 0.82307969, 1.34997557,
                               1.75050324, 1.87095670, 1.63988475, 1.18197619, 0.64236352,
                               0.30980091, 0.73211239, 1.26738672, 1.69872061, 1.87622895])

    Rint = nm.Rint(time, alpha, beta, delta, omega_prec, omega_spin)

    test_result = np.allclose(Rint, Rint_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_Rext():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    delta = 7.5 * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)

    Rext_reference = np.array([1.61442956, 1.46385363, 1.08305532, 0.58696774, 0.06308059,
                               0.49893419, 1.00580334, 1.41299498, 1.61002862, 1.50825410,
                               1.15722536, 0.67396140, 0.14339482, 0.41012890, 0.92589874,
                               1.35630018, 1.59690728, 1.54559083, 1.22784064, 0.75964484,
                               0.23156645, 0.32085513, 0.84372934, 1.29438472, 1.57530314,
                               1.57530314, 1.29438472, 0.84372934, 0.32085513, 0.23156645,
                               0.75964484, 1.22784064, 1.54559083, 1.59690728, 1.35630018,
                               0.92589874, 0.41012890, 0.14339482, 0.67396140, 1.15722536,
                               1.50825410, 1.61002862, 1.41299498, 1.00580334, 0.49893419,
                               0.06308059, 0.58696774, 1.08305532, 1.46385363, 1.61442956])

    Rext = nm.Rext(time, alpha, beta, delta, omega_prec, omega_spin)

    test_result = np.allclose(Rext, Rext_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_Thetaint():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    delta = 7.5 * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)

    Thetaint_reference = np.array([0.00000000, 0.74715042, 1.35533306, 1.95467196, 3.28246775,
                                   4.87740800, 5.50990164, 6.10120518, 0.54424067, 1.30774385,
                                   1.93653164, 2.51702839, 3.59776396, 5.40583898, 6.09168333,
                                   0.38753669, 1.08985750, 1.86378165, 2.51592749, 3.08820464,
                                   3.98325252, 5.90310909, 0.38865396, 0.96097119, 1.63808169,
                                   2.41558625, 3.09269675, 3.66501398, 4.43374415, 0.07041542,
                                   0.96546330, 1.53774045, 2.18988629, 2.96381044, 3.66613125,
                                   4.24516992, 4.93101427, 0.45590398, 1.53663955, 2.11713630,
                                   2.74592409, 3.50942727, 4.23564806, 4.82695161, 5.45944525,
                                   0.77120019, 2.09899598, 2.69833488, 3.30651752, 4.05366794])

    Thetaint = np.array([nm.Thetaint(t, alpha, beta, delta, omega_prec, omega_spin) for t in time])

    test_result = np.allclose(Thetaint, Thetaint_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_Thetaext():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    delta = 7.5 * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)

    Thetaext_reference = np.array([0.00000000, 0.63122041, 1.15338138, 1.59599640, 2.64339611,
                                   5.28782616, 5.72848116, 6.23223106, 0.56596035, 1.20805757,
                                   1.74965739, 2.19879486, 2.80613865, 5.88374716, 0.04597388,
                                   0.53280662, 1.13277135, 1.78167598, 2.34318336, 2.80227771,
                                   3.30360671, 0.18661594, 0.64818983, 1.12000506, 1.70122269,
                                   2.35244525, 2.93366288, 3.40547811, 3.86705200, 0.75006123,
                                   1.25139023, 1.71048458, 2.27199196, 2.92089659, 3.52086132,
                                   4.00769406, 4.45310608, 1.24752929, 1.85487308, 2.30401055,
                                   2.84561037, 3.48770759, 4.10462219, 4.60837209, 5.04902709,
                                   1.41027183, 2.45767154, 2.90028656, 3.42244753, 4.05366794])

    Thetaext = np.array([nm.Thetaext(t, alpha, beta, delta, omega_prec, omega_spin) for t in time])

    test_result = np.allclose(Thetaext, Thetaext_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_x_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    x_reference = np.array([0.00000000,  0.63581819,  0.87740758,  0.59179090, -0.00639671,
                            -0.50047277, -0.55030364, -0.11641847,  0.51966216,  0.94970054,
                            0.91395326,  0.47091535, -0.05092859, -0.28267677, -0.06677289,
                            0.44088100,  0.88568300,  0.96379085,  0.63256623,  0.13691358,
                            -0.16523000, -0.05577831,  0.38879356,  0.84920229,  0.98644811,
                            0.68159740,  0.12475085, -0.31105590, -0.32655012,  0.09272613,
                            0.65822638,  0.96931171,  0.78570336,  0.19596338, -0.43500467,
                            -0.70713669, -0.45391535,  0.14294828,  0.67169089,  0.76356651,
                            0.33805593, -0.34419591, -0.85587261, -0.88724984, -0.44943492,
                            0.13854574,  0.46764077,  0.31287681, -0.22110676, -0.77876208])

    x = nm.x_trace(time, SSP)

    test_result = np.allclose(x, x_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_y_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    y_reference = np.array([-0.17364818, -0.01050824,  0.38701462,  0.79499526,  0.98361767,
                            0.84663058,  0.46119901,  0.04443706, -0.16889272, -0.05862139,
                            0.31313507,  0.73696576,  0.97412630,  0.89102386,  0.53447014,
                            0.10531232, -0.15470445, -0.09911237,  0.24077345,  0.67349490,
                            0.95529942,  0.92744615,  0.60562489,  0.17111796, -0.13131632,
                            -0.13131632,  0.17111796,  0.60562489,  0.92744615,  0.95529942,
                            0.67349490,  0.24077345, -0.09911237, -0.15470445,  0.10531232,
                            0.53447014,  0.89102386,  0.97412630,  0.73696576,  0.31313507,
                            -0.05862139, -0.16889272,  0.04443706,  0.46119901,  0.84663058,
                            0.98361767,  0.79499526,  0.38701462, -0.01050824, -0.17364818])

    y = nm.y_trace(time, SSP)

    test_result = np.allclose(y, y_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_z_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    z_reference = np.array([0.98480775,  0.77176733,  0.28350594, -0.13328940, -0.18015373,
                            0.18095211,  0.69603259,  0.99220567,  0.83751208,  0.30762382,
                            -0.25813924, -0.48489195, -0.22019134,  0.35520464,  0.84254558,
                            0.89136595,  0.43775810, -0.24755592, -0.73613050, -0.72640160,
                            -0.24515724,  0.36977347,  0.69430401,  0.49957394, -0.09836747,
                            -0.71984791, -0.97732076, -0.73243616, -0.18223242,  0.28072209,
                            0.33636683, -0.04962814, -0.61061196, -0.96833098, -0.89424843,
                            -0.46292481,  0.00611105,  0.17505353, -0.07558317, -0.56472349,
                            -0.93929852, -0.92358238, -0.51527413,  0.00912106,  0.28499985,
                            0.11533154, -0.38638664, -0.86736831, -0.97519299, -0.60280672])

    z = nm.z_trace(time, SSP)

    test_result = np.allclose(z, z_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_dx_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    dx_reference = np.array([0.00968705,  0.00666136, -0.00040809, -0.00684348, -0.00842520,
                             -0.00419675,  0.00293478,  0.00818893,  0.00813125,  0.00294350,
                             -0.00377163, -0.00748576, -0.00581972, -0.00010594,  0.00560060,
                             0.00735148,  0.00401469, -0.00199173, -0.00642529, -0.00619165,
                             -0.00149957,  0.00429258,  0.00702908,  0.00467470, -0.00123092,
                             -0.00660486, -0.00764282, -0.00348863,  0.00310437,  0.00760671,
                             0.00681000,  0.00107084, -0.00585508, -0.00931056, -0.00689064,
                             -0.00011074,  0.00656212,  0.00868311,  0.00481229, -0.00250718,
                             -0.00844099, -0.00909058, -0.00408474,  0.00320204,  0.00793766,
                             0.00707160,  0.00134024, -0.00529592, -0.00837175, -0.0059295])

    dx = nm.dx_trace(time, SSP)

    test_result = np.allclose(dx, dx_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_dy_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    dy_reference = np.array([0.00000000e+00,  4.21977456e-03,  6.06254463e-03,  4.49027543e-03,
                             3.88628239e-04, -3.93193374e-03, -6.03763233e-03, -4.74232479e-03,
                             -7.75659521e-04,  3.62793576e-03,  5.98791011e-03,  4.97488691e-03,
                             1.15950345e-03, -3.30902981e-03, -5.91358228e-03, -5.18700617e-03,
                             -1.53858273e-03,  2.97652635e-03,  5.81495427e-03,  5.37781090e-03,
                             1.91133965e-03, -2.63179170e-03, -5.69243137e-03, -5.54651705e-03,
                             -2.27624246e-03,  2.27624246e-03,  5.54651705e-03,  5.69243137e-03,
                             2.63179170e-03, -1.91133965e-03, -5.37781090e-03, -5.81495427e-03,
                             -2.97652635e-03,  1.53858273e-03,  5.18700617e-03,  5.91358228e-03,
                             3.30902981e-03, -1.15950345e-03, -4.97488691e-03, -5.98791011e-03,
                             -3.62793576e-03,  7.75659521e-04,  4.74232479e-03,  6.03763233e-03,
                             3.93193374e-03, -3.88628239e-04, -4.49027543e-03, -6.06254463e-03,
                             -4.21977456e-03, -8.91395090e-18])

    dy = nm.dy_trace(time, SSP)

    test_result = np.allclose(dy, dy_reference, rtol=1e-5, atol=1e-5)

    assert test_result


def test_dz_trace():
    SSP = [45, 55, 10, 93]
    alpha = SSP[0] * np.pi/180
    beta = SSP[1] * np.pi/180
    omega_spin = 2 * np.pi / (SSP[2] * 60)
    omega_prec = 2 * np.pi / (SSP[3] * 60)
    time = np.linspace(0, 3600)
    SSP = [alpha, beta, omega_spin, omega_prec]

    dz_reference = np.array([-0.00000000e+00, -5.43048273e-03, -7.01301190e-03, -3.60241185e-03,
                             2.42101645e-03,  6.78928979e-03,  6.32092669e-03,  1.17322243e-03,
                             -5.20172123e-03, -8.39587873e-03, -6.08999372e-03,  2.91118972e-04,
                             6.47570024e-03,  8.21632884e-03,  4.19514565e-03, -3.02330714e-03,
                             -8.66635260e-03, -8.94593959e-03, -3.61937662e-03,  3.81911007e-03,
                             8.45855311e-03,  7.24843181e-03,  1.02925790e-03, -6.04647066e-03,
                             -9.30517606e-03, -6.66913220e-03, -4.43977615e-06,  6.18843910e-03,
                             7.83127392e-03,  3.99170772e-03, -2.55850404e-03, -7.29640387e-03,
                             -7.05087372e-03, -2.13000880e-03,  3.96278910e-03,  6.99669330e-03,
                             4.94549031e-03, -6.38281314e-04, -5.74136298e-03, -6.71023286e-03,
                             -2.81151642e-03,  3.24598774e-03,  7.19374563e-03,  6.18983104e-03,
                             8.37076944e-04, -5.18052642e-03, -7.61671825e-03, -4.61541563e-03,
                             1.94360810e-03,  7.66028589e-03])

    dz = nm.dz_trace(time, SSP)

    test_result = np.allclose(dz, dz_reference, rtol=1e-5, atol=1e-5)

    assert test_result
