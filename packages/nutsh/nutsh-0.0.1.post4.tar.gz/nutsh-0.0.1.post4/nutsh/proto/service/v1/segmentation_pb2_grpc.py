# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from service.v1 import segmentation_pb2 as service_dot_v1_dot_segmentation__pb2


class OnlineSegmentationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Introspect = channel.unary_unary(
                '/service.v1.OnlineSegmentationService/Introspect',
                request_serializer=service_dot_v1_dot_segmentation__pb2.IntrospectRequest.SerializeToString,
                response_deserializer=service_dot_v1_dot_segmentation__pb2.IntrospectResponse.FromString,
                )
        self.EmbedImage = channel.unary_unary(
                '/service.v1.OnlineSegmentationService/EmbedImage',
                request_serializer=service_dot_v1_dot_segmentation__pb2.EmbedImageRequest.SerializeToString,
                response_deserializer=service_dot_v1_dot_segmentation__pb2.EmbedImageResponse.FromString,
                )
        self.GetDecoder = channel.unary_unary(
                '/service.v1.OnlineSegmentationService/GetDecoder',
                request_serializer=service_dot_v1_dot_segmentation__pb2.GetDecoderRequest.SerializeToString,
                response_deserializer=service_dot_v1_dot_segmentation__pb2.GetDecoderResponse.FromString,
                )


class OnlineSegmentationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Introspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmbedImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecoder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OnlineSegmentationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Introspect': grpc.unary_unary_rpc_method_handler(
                    servicer.Introspect,
                    request_deserializer=service_dot_v1_dot_segmentation__pb2.IntrospectRequest.FromString,
                    response_serializer=service_dot_v1_dot_segmentation__pb2.IntrospectResponse.SerializeToString,
            ),
            'EmbedImage': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedImage,
                    request_deserializer=service_dot_v1_dot_segmentation__pb2.EmbedImageRequest.FromString,
                    response_serializer=service_dot_v1_dot_segmentation__pb2.EmbedImageResponse.SerializeToString,
            ),
            'GetDecoder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecoder,
                    request_deserializer=service_dot_v1_dot_segmentation__pb2.GetDecoderRequest.FromString,
                    response_serializer=service_dot_v1_dot_segmentation__pb2.GetDecoderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.v1.OnlineSegmentationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OnlineSegmentationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Introspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.v1.OnlineSegmentationService/Introspect',
            service_dot_v1_dot_segmentation__pb2.IntrospectRequest.SerializeToString,
            service_dot_v1_dot_segmentation__pb2.IntrospectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmbedImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.v1.OnlineSegmentationService/EmbedImage',
            service_dot_v1_dot_segmentation__pb2.EmbedImageRequest.SerializeToString,
            service_dot_v1_dot_segmentation__pb2.EmbedImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDecoder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service.v1.OnlineSegmentationService/GetDecoder',
            service_dot_v1_dot_segmentation__pb2.GetDecoderRequest.SerializeToString,
            service_dot_v1_dot_segmentation__pb2.GetDecoderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
