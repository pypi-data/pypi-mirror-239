Metadata-Version: 2.1
Name: oktalib
Version: 2.1.0
Summary: A library to interface with okta through it's restful api
Home-page: https://github.com/schubergphilis/oktalib.git
Author: Costas Tyfoxylos
Author-email: ctyfoxylos@schubergphilis.com
License: MIT
Keywords: oktalib okta api python rest
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.9
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: requests>=2.31.0; python_version >= "3.7"
Requires-Dist: dateutils>=0.6.12
Requires-Dist: backoff>=1.11.1; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3, 3.4"
Requires-Dist: cachetools>=5.3.2; python_version >= "3.7"

=======
oktalib
=======

A python library for interfacing with OKTA's api


* Documentation: https://oktalib.readthedocs.org/en/latest



Development Workflow
====================

The workflow supports the following steps

 * lint
 * test
 * build
 * document
 * upload
 * graph

These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.

The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project

Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
So for the initial delivery one would call

    $ _tag --minor

which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.


So the full workflow after git is initialized is:

 * repeat as necessary (of course it could be test - code - lint :) )
   * code
   * lint
   * test
 * commit and push
 * develop more through the code-lint-test cycle
 * tag (with the appropriate argument)
 * build
 * upload (if you want to host your package in pypi)
 * document (of course this could be run at any point)


Important Information
=====================

This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
So when building a package out of this **do not** simple call

    $ python setup.py sdist

**as this will produce an unusable artifact with files missing.**
Instead use the provided build and upload scripts that create all the necessary files in the artifact.



Project Features
================

* Manages groups, users and applications.


Todo
====

Extend with more functionality as required...




History
-------

0.1.0 (25-05-2018)
------------------

* First release


1.0.0 (19-10-2018)
------------------

* Updated template to python3.7 Dropped support for python2.7


1.1.0 (23-10-2018)
------------------

* Added setting of user password capability


1.1.1 (25-10-2018)
------------------

* Updated template and dependencies


1.1.2 (17-12-2018)
------------------

* Updated requests version.


1.1.3 (11-01-2019)
------------------

* Updated requests module and fixed requirements generation.


1.1.4 (20-09-2019)
------------------

* Update get_applicatio_by_id


1.1.5 (20-09-2019)
------------------

* Added limit


1.1.6 (23-09-2019)
------------------

* Fix applications method


1.1.7 (18-10-2019)
------------------

* bumped dependencies


1.1.8 (18-10-2019)
------------------

* Updated template and bumped dependencies


1.1.9 (19-12-2019)
------------------

* Added feature for aws application


1.1.10 (13-01-2020)
-------------------

* Added api exhaustion backoff.


1.1.11 (13-01-2020)
-------------------

* Corrected Pipfile.lock issue.


1.1.12 (09-06-2020)
-------------------

* Bumped requests


1.1.13 (17-06-2020)
-------------------

* fixed applications entity


1.2.0 (09-10-2020)
------------------

* bumped requests


1.3.0 (02-12-2020)
------------------

* Bumped requests


1.4.0 (15-03-2021)
------------------

* Added property setters for user attributes.


1.4.1 (26-04-2021)
------------------

* Bumped dependencies.


1.4.2 (08-06-2021)
------------------

* Bumped dependencies.


1.4.3 (08-06-2021)
------------------

* Updated reference of pypi to simple from legacy.


1.4.4 (08-06-2021)
------------------

* Updated pypi reference.


1.4.5 (08-06-2021)
------------------

* Reverted pypi reference to legacy.


1.5.0 (24-03-2022)
------------------

* Added User and Group assignment roles.


1.6.0 (28-03-2022)
------------------

* Made entities comparable.


1.6.1 (22-04-2022)
------------------

* Fixed bugs with api rate limiting courtesy of Yorick Hoorneman <yhoorneman@schubergphilis.com>


2.0.0 (30-01-2023)
------------------

* Fixed a nasty bug with activate and deactivate of applications being exposed as properties with bad side effects on introspection. Made most entities return as generators.


2.0.1 (28-02-2023)
------------------

* Testing release.


2.0.2 (07-03-2023)
------------------

* Test release.


2.1.0 (06-11-2023)
------------------

* Add admin role support. Bump minimum python version to 3.9. Clean up and update structure.
