!function(){"use strict";var e,t;e=RB.InlineEditorView.extend({initialize:function(e){var a=this;e=_.defaults(e,{hasRawValue:!0,formatResult:function(e){return e&&e.name?e.name.htmlEncode():""},getFieldValue:function(e){var t=a.$field[0].selectize,i=t.getValue();return JSON.stringify(i.map(function(e){return _.pick(t.options[e],["completed","gid","workspace_id","name"])}))},isFieldDirty:function(e,t){return t!==e.getValue()},setFieldValue:function(e,t){}}),RB.InlineEditorView.prototype.initialize.call(this,e)},createField:function(){return $('<select multiple class="asana-field">')},setupEvents:function(){RB.InlineEditorView.prototype.setupEvents.call(this),this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))},showEditor:function(){RB.InlineEditorView.prototype.showEditor.call(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:{}),this.options.focusOnOpen&&this.$field[0].selectize.focus()}}),RB.ReviewRequestFields.AsanaFieldView=RB.ReviewRequestFields.TextFieldView.extend({autocomplete:{},multiline:!0,useEditIconOnly:!0,taskTemplate:_.template('<<%- tagName %> class="asana-task<% if (completed) { %> completed<% } %>">\n <a href="https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/">\n  <div class="asana-task-checkbox">\n   <svg viewBox="0 0 32 32">\'\n    <polygon points="27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615"></polygon>\n   </svg>\n  </div>\n  <span><%- taskSummary %></span>\n </a>\n</<%- tagName %>>'),_formatField:function(){var e=this.jsonFieldName||this.fieldID,t={useExtraData:this.useExtraData},e=JSON.parse(this.model.getDraftField(e,t));this._renderValue(e)},_renderValue:function(e){var t=this,e=e.map(function(e){return t.taskTemplate({completed:e.completed,workspaceId:e.workspace_id,taskId:e.gid,taskSummary:e.name,tagName:"li"})});this.$el.html("<ul>".concat(e.join(""),"</ul>"))},_getInlineEditorClass:function(){return e},_buildAutoComplete:function(){var i=this,e=this.model.get("reviewRequest"),t=e.get("localSitePrefix"),e=e.get("id"),a="".concat(SITE_ROOT,"rbintegrations/asana/").concat(t,"task-search/").concat(e,"/"),t=this.inlineEditorView.$field,e=this.$el.data("raw-value");e.forEach(function(e){void 0===e.gid&&(e.gid=String(e.id))}),this._renderValue(e||[]),t.selectize({copyClassesToDropdown:!0,dropdownParent:"body",labelField:"name",valueField:"gid",multiple:!0,options:e,items:e.map(function(e){return e.gid}),optgroupLabelField:"workspace",searchField:"name",sortField:[{field:"completed"},{field:"name"}],render:{option:function(e,t){return i.taskTemplate({completed:e.completed,workspaceId:e.workspace_id,taskId:e.gid,taskSummary:e.name,tagName:"div"})}},load:function(e,o){var r=this,e=$.param({q:e});$.ajax({url:"".concat(a,"?").concat(e),type:"GET",error:o.bind(this),success:function(e){var t=[];r.clearOptionGroups();for(var i=0;i<e.length;i++){var a=e[i];r.addOptionGroup(a.workspace,a);for(var n=0;n<a.tasks.length;n++){var l=a.tasks[n],s=(l.optgroup=a.workspace,l.workspace_id=a.workspace_id,l.notes.split("\n"));l.notes=s.splice(8).join("\n"),t.push(l)}}r.refreshOptions(),o(t)}})}})}}),t=RB.InlineEditorView.extend({initialize:function(e){var a=this;e=_.defaults(e,{hasRawValue:!0,formatResult:function(e){return e&&e.name?e.name.htmlEncode():""},getFieldValue:function(e){var t=a.$field[0].selectize,i=t.getValue();return JSON.stringify(i.map(function(e){return t.options[e]}))},isFieldDirty:function(e,t){return t!==e.getValue()},setFieldValue:function(e,t){}}),RB.InlineEditorView.prototype.initialize.call(this,e)},createField:function(){return $('<select multiple class="trello-field">')},setupEvents:function(){RB.InlineEditorView.prototype.setupEvents.call(this),this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))},showEditor:function(){RB.InlineEditorView.prototype.showEditor.call(this,0<arguments.length&&void 0!==arguments[0]?arguments[0]:{}),this.options.focusOnOpen&&this.$field[0].selectize.focus()}}),RB.ReviewRequestFields.TrelloFieldView=RB.ReviewRequestFields.TextFieldView.extend({autocomplete:{},multiline:!0,useEditIconOnly:!0,cardTemplate:_.template('<<%- tagName %> class="trello-card">\n <div class="trello-card-card">\n  <a href="<%- url %>"><%- name %></a>\n </div>\n <div class="trello-card-details">\n  on <span class="trello-card-list"><%- list %></span>\n  in <span class="trello-card-board"><%- board %></span>\n </div>\n</<%- tagName %>>'),_formatField:function(){var e=JSON.parse(this.model.getDraftField(this.jsonFieldName||this.fieldID,{useExtraData:this.useExtraData}));this._renderValue(e)},_renderValue:function(e){var t=this,e=e.map(function(e){return t.cardTemplate(_.defaults({tagName:"li"},e))});this.$el.html("<ul>".concat(e.join(""),"</ul>"))},_getInlineEditorClass:function(){return t},_buildAutoComplete:function(){var i=this,e=this.model.get("reviewRequest"),t=e.get("localSitePrefix"),e=e.get("id"),a="".concat(SITE_ROOT,"rbintegrations/trello/").concat(t,"card-search/").concat(e,"/"),t=this.inlineEditorView.$field,e=this.$el.data("raw-value");this._renderValue(e||[]),t.selectize({copyClassesToDropdown:!0,dropdownParent:"body",multiple:!0,labelField:"name",valueField:"id",searchField:"name",options:e,items:_.pluck(e,"id"),render:{option:function(e,t){return i.cardTemplate(_.defaults({tagName:"div"},e))}},load:function(e,t){e=$.param({q:e});$.ajax({url:"".concat(a,"?").concat(e),type:"GET",error:t.bind(this),success:function(e){return t(e)}})}})}})}.call(this);
