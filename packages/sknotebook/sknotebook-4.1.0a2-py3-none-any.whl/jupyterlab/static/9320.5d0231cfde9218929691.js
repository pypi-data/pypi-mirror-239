"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[9320],{69320:(t,e,r)=>{r.r(e);r.d(e,{diagram:()=>ut});var i=r(60777);var n=r(54333);var s=r(27484);var c=r.n(s);var a=r(17967);var o=r(27856);var l=r.n(o);var h=function(){var t=function(t,e,r,i){for(r=r||{},i=t.length;i--;r[t[i]]=e);return r},e=[1,4],r=[1,7],i=[1,5],n=[1,9],s=[1,6],c=[2,6],a=[1,16],o=[6,8,14,20,22,24,25,27,29,32,37,40,50,55],l=[8,14,20,22,24,25,27,29,32,37,40],h=[8,13,14,20,22,24,25,27,29,32,37,40],m=[1,26],u=[6,8,14,50,55],y=[8,14,55],p=[1,53],f=[1,52],g=[8,14,30,33,35,38,55],b=[1,67],d=[1,68],k=[1,69],$=[8,14,33,35,42,55];var _={trace:function t(){},yy:{},symbols_:{error:2,start:3,eol:4,directive:5,GG:6,document:7,EOF:8,":":9,DIR:10,options:11,body:12,OPT:13,NL:14,line:15,statement:16,commitStatement:17,mergeStatement:18,cherryPickStatement:19,acc_title:20,acc_title_value:21,acc_descr:22,acc_descr_value:23,acc_descr_multiline_value:24,section:25,branchStatement:26,CHECKOUT:27,ref:28,BRANCH:29,ORDER:30,NUM:31,CHERRY_PICK:32,COMMIT_ID:33,STR:34,COMMIT_TAG:35,EMPTYSTR:36,MERGE:37,COMMIT_TYPE:38,commitType:39,COMMIT:40,commit_arg:41,COMMIT_MSG:42,NORMAL:43,REVERSE:44,HIGHLIGHT:45,openDirective:46,typeDirective:47,closeDirective:48,argDirective:49,open_directive:50,type_directive:51,arg_directive:52,close_directive:53,ID:54,";":55,$accept:0,$end:1},terminals_:{2:"error",6:"GG",8:"EOF",9:":",10:"DIR",13:"OPT",14:"NL",20:"acc_title",21:"acc_title_value",22:"acc_descr",23:"acc_descr_value",24:"acc_descr_multiline_value",25:"section",27:"CHECKOUT",29:"BRANCH",30:"ORDER",31:"NUM",32:"CHERRY_PICK",33:"COMMIT_ID",34:"STR",35:"COMMIT_TAG",36:"EMPTYSTR",37:"MERGE",38:"COMMIT_TYPE",40:"COMMIT",42:"COMMIT_MSG",43:"NORMAL",44:"REVERSE",45:"HIGHLIGHT",50:"open_directive",51:"type_directive",52:"arg_directive",53:"close_directive",54:"ID",55:";"},productions_:[0,[3,2],[3,2],[3,3],[3,4],[3,5],[7,0],[7,2],[11,2],[11,1],[12,0],[12,2],[15,2],[15,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[16,1],[16,1],[16,2],[26,2],[26,4],[19,3],[19,5],[19,5],[19,5],[19,5],[18,2],[18,4],[18,4],[18,4],[18,6],[18,6],[18,6],[18,6],[18,6],[18,6],[18,8],[18,8],[18,8],[18,8],[18,8],[18,8],[17,2],[17,3],[17,3],[17,5],[17,5],[17,3],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,3],[17,5],[17,5],[17,5],[17,5],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[17,9],[41,0],[41,1],[39,1],[39,1],[39,1],[5,3],[5,5],[46,1],[47,1],[49,1],[48,1],[28,1],[28,1],[4,1],[4,1],[4,1]],performAction:function t(e,r,i,n,s,c,a){var o=c.length-1;switch(s){case 3:return c[o];case 4:return c[o-1];case 5:n.setDirection(c[o-3]);return c[o-1];case 7:n.setOptions(c[o-1]);this.$=c[o];break;case 8:c[o-1]+=c[o];this.$=c[o-1];break;case 10:this.$=[];break;case 11:c[o-1].push(c[o]);this.$=c[o-1];break;case 12:this.$=c[o-1];break;case 17:this.$=c[o].trim();n.setAccTitle(this.$);break;case 18:case 19:this.$=c[o].trim();n.setAccDescription(this.$);break;case 20:n.addSection(c[o].substr(8));this.$=c[o].substr(8);break;case 22:n.checkout(c[o]);break;case 23:n.branch(c[o]);break;case 24:n.branch(c[o-2],c[o]);break;case 25:n.cherryPick(c[o],"",void 0);break;case 26:n.cherryPick(c[o-2],"",c[o]);break;case 27:case 29:n.cherryPick(c[o-2],"","");break;case 28:n.cherryPick(c[o],"",c[o-2]);break;case 30:n.merge(c[o],"","","");break;case 31:n.merge(c[o-2],c[o],"","");break;case 32:n.merge(c[o-2],"",c[o],"");break;case 33:n.merge(c[o-2],"","",c[o]);break;case 34:n.merge(c[o-4],c[o],"",c[o-2]);break;case 35:n.merge(c[o-4],"",c[o],c[o-2]);break;case 36:n.merge(c[o-4],"",c[o-2],c[o]);break;case 37:n.merge(c[o-4],c[o-2],c[o],"");break;case 38:n.merge(c[o-4],c[o-2],"",c[o]);break;case 39:n.merge(c[o-4],c[o],c[o-2],"");break;case 40:n.merge(c[o-6],c[o-4],c[o-2],c[o]);break;case 41:n.merge(c[o-6],c[o],c[o-4],c[o-2]);break;case 42:n.merge(c[o-6],c[o-4],c[o],c[o-2]);break;case 43:n.merge(c[o-6],c[o-2],c[o-4],c[o]);break;case 44:n.merge(c[o-6],c[o],c[o-2],c[o-4]);break;case 45:n.merge(c[o-6],c[o-2],c[o],c[o-4]);break;case 46:n.commit(c[o]);break;case 47:n.commit("","",n.commitType.NORMAL,c[o]);break;case 48:n.commit("","",c[o],"");break;case 49:n.commit("","",c[o],c[o-2]);break;case 50:n.commit("","",c[o-2],c[o]);break;case 51:n.commit("",c[o],n.commitType.NORMAL,"");break;case 52:n.commit("",c[o-2],n.commitType.NORMAL,c[o]);break;case 53:n.commit("",c[o],n.commitType.NORMAL,c[o-2]);break;case 54:n.commit("",c[o-2],c[o],"");break;case 55:n.commit("",c[o],c[o-2],"");break;case 56:n.commit("",c[o-4],c[o-2],c[o]);break;case 57:n.commit("",c[o-4],c[o],c[o-2]);break;case 58:n.commit("",c[o-2],c[o-4],c[o]);break;case 59:n.commit("",c[o],c[o-4],c[o-2]);break;case 60:n.commit("",c[o],c[o-2],c[o-4]);break;case 61:n.commit("",c[o-2],c[o],c[o-4]);break;case 62:n.commit(c[o],"",n.commitType.NORMAL,"");break;case 63:n.commit(c[o],"",n.commitType.NORMAL,c[o-2]);break;case 64:n.commit(c[o-2],"",n.commitType.NORMAL,c[o]);break;case 65:n.commit(c[o-2],"",c[o],"");break;case 66:n.commit(c[o],"",c[o-2],"");break;case 67:n.commit(c[o],c[o-2],n.commitType.NORMAL,"");break;case 68:n.commit(c[o-2],c[o],n.commitType.NORMAL,"");break;case 69:n.commit(c[o-4],"",c[o-2],c[o]);break;case 70:n.commit(c[o-4],"",c[o],c[o-2]);break;case 71:n.commit(c[o-2],"",c[o-4],c[o]);break;case 72:n.commit(c[o],"",c[o-4],c[o-2]);break;case 73:n.commit(c[o],"",c[o-2],c[o-4]);break;case 74:n.commit(c[o-2],"",c[o],c[o-4]);break;case 75:n.commit(c[o-4],c[o],c[o-2],"");break;case 76:n.commit(c[o-4],c[o-2],c[o],"");break;case 77:n.commit(c[o-2],c[o],c[o-4],"");break;case 78:n.commit(c[o],c[o-2],c[o-4],"");break;case 79:n.commit(c[o],c[o-4],c[o-2],"");break;case 80:n.commit(c[o-2],c[o-4],c[o],"");break;case 81:n.commit(c[o-4],c[o],n.commitType.NORMAL,c[o-2]);break;case 82:n.commit(c[o-4],c[o-2],n.commitType.NORMAL,c[o]);break;case 83:n.commit(c[o-2],c[o],n.commitType.NORMAL,c[o-4]);break;case 84:n.commit(c[o],c[o-2],n.commitType.NORMAL,c[o-4]);break;case 85:n.commit(c[o],c[o-4],n.commitType.NORMAL,c[o-2]);break;case 86:n.commit(c[o-2],c[o-4],n.commitType.NORMAL,c[o]);break;case 87:n.commit(c[o-6],c[o-4],c[o-2],c[o]);break;case 88:n.commit(c[o-6],c[o-4],c[o],c[o-2]);break;case 89:n.commit(c[o-6],c[o-2],c[o-4],c[o]);break;case 90:n.commit(c[o-6],c[o],c[o-4],c[o-2]);break;case 91:n.commit(c[o-6],c[o-2],c[o],c[o-4]);break;case 92:n.commit(c[o-6],c[o],c[o-2],c[o-4]);break;case 93:n.commit(c[o-4],c[o-6],c[o-2],c[o]);break;case 94:n.commit(c[o-4],c[o-6],c[o],c[o-2]);break;case 95:n.commit(c[o-2],c[o-6],c[o-4],c[o]);break;case 96:n.commit(c[o],c[o-6],c[o-4],c[o-2]);break;case 97:n.commit(c[o-2],c[o-6],c[o],c[o-4]);break;case 98:n.commit(c[o],c[o-6],c[o-2],c[o-4]);break;case 99:n.commit(c[o],c[o-4],c[o-2],c[o-6]);break;case 100:n.commit(c[o-2],c[o-4],c[o],c[o-6]);break;case 101:n.commit(c[o],c[o-2],c[o-4],c[o-6]);break;case 102:n.commit(c[o-2],c[o],c[o-4],c[o-6]);break;case 103:n.commit(c[o-4],c[o-2],c[o],c[o-6]);break;case 104:n.commit(c[o-4],c[o],c[o-2],c[o-6]);break;case 105:n.commit(c[o-2],c[o-4],c[o-6],c[o]);break;case 106:n.commit(c[o],c[o-4],c[o-6],c[o-2]);break;case 107:n.commit(c[o-2],c[o],c[o-6],c[o-4]);break;case 108:n.commit(c[o],c[o-2],c[o-6],c[o-4]);break;case 109:n.commit(c[o-4],c[o-2],c[o-6],c[o]);break;case 110:n.commit(c[o-4],c[o],c[o-6],c[o-2]);break;case 111:this.$="";break;case 112:this.$=c[o];break;case 113:this.$=n.commitType.NORMAL;break;case 114:this.$=n.commitType.REVERSE;break;case 115:this.$=n.commitType.HIGHLIGHT;break;case 118:n.parseDirective("%%{","open_directive");break;case 119:n.parseDirective(c[o],"type_directive");break;case 120:c[o]=c[o].trim().replace(/'/g,'"');n.parseDirective(c[o],"arg_directive");break;case 121:n.parseDirective("}%%","close_directive","gitGraph");break}},table:[{3:1,4:2,5:3,6:e,8:r,14:i,46:8,50:n,55:s},{1:[3]},{3:10,4:2,5:3,6:e,8:r,14:i,46:8,50:n,55:s},{3:11,4:2,5:3,6:e,8:r,14:i,46:8,50:n,55:s},{7:12,8:c,9:[1,13],10:[1,14],11:15,14:a},t(o,[2,124]),t(o,[2,125]),t(o,[2,126]),{47:17,51:[1,18]},{51:[2,118]},{1:[2,1]},{1:[2,2]},{8:[1,19]},{7:20,8:c,11:15,14:a},{9:[1,21]},t(l,[2,10],{12:22,13:[1,23]}),t(h,[2,9]),{9:[1,25],48:24,53:m},t([9,53],[2,119]),{1:[2,3]},{8:[1,27]},{7:28,8:c,11:15,14:a},{8:[2,7],14:[1,31],15:29,16:30,17:32,18:33,19:34,20:[1,35],22:[1,36],24:[1,37],25:[1,38],26:39,27:[1,40],29:[1,44],32:[1,43],37:[1,42],40:[1,41]},t(h,[2,8]),t(u,[2,116]),{49:45,52:[1,46]},t(u,[2,121]),{1:[2,4]},{8:[1,47]},t(l,[2,11]),{4:48,8:r,14:i,55:s},t(l,[2,13]),t(y,[2,14]),t(y,[2,15]),t(y,[2,16]),{21:[1,49]},{23:[1,50]},t(y,[2,19]),t(y,[2,20]),t(y,[2,21]),{28:51,34:p,54:f},t(y,[2,111],{41:54,33:[1,57],34:[1,59],35:[1,55],38:[1,56],42:[1,58]}),{28:60,34:p,54:f},{33:[1,61],35:[1,62]},{28:63,34:p,54:f},{48:64,53:m},{53:[2,120]},{1:[2,5]},t(l,[2,12]),t(y,[2,17]),t(y,[2,18]),t(y,[2,22]),t(g,[2,122]),t(g,[2,123]),t(y,[2,46]),{34:[1,65]},{39:66,43:b,44:d,45:k},{34:[1,70]},{34:[1,71]},t(y,[2,112]),t(y,[2,30],{33:[1,72],35:[1,74],38:[1,73]}),{34:[1,75]},{34:[1,76],36:[1,77]},t(y,[2,23],{30:[1,78]}),t(u,[2,117]),t(y,[2,47],{33:[1,80],38:[1,79],42:[1,81]}),t(y,[2,48],{33:[1,83],35:[1,82],42:[1,84]}),t($,[2,113]),t($,[2,114]),t($,[2,115]),t(y,[2,51],{35:[1,85],38:[1,86],42:[1,87]}),t(y,[2,62],{33:[1,90],35:[1,88],38:[1,89]}),{34:[1,91]},{39:92,43:b,44:d,45:k},{34:[1,93]},t(y,[2,25],{35:[1,94]}),{33:[1,95]},{33:[1,96]},{31:[1,97]},{39:98,43:b,44:d,45:k},{34:[1,99]},{34:[1,100]},{34:[1,101]},{34:[1,102]},{34:[1,103]},{34:[1,104]},{39:105,43:b,44:d,45:k},{34:[1,106]},{34:[1,107]},{39:108,43:b,44:d,45:k},{34:[1,109]},t(y,[2,31],{35:[1,111],38:[1,110]}),t(y,[2,32],{33:[1,113],35:[1,112]}),t(y,[2,33],{33:[1,114],38:[1,115]}),{34:[1,116],36:[1,117]},{34:[1,118]},{34:[1,119]},t(y,[2,24]),t(y,[2,49],{33:[1,120],42:[1,121]}),t(y,[2,53],{38:[1,122],42:[1,123]}),t(y,[2,63],{33:[1,125],38:[1,124]}),t(y,[2,50],{33:[1,126],42:[1,127]}),t(y,[2,55],{35:[1,128],42:[1,129]}),t(y,[2,66],{33:[1,131],35:[1,130]}),t(y,[2,52],{38:[1,132],42:[1,133]}),t(y,[2,54],{35:[1,134],42:[1,135]}),t(y,[2,67],{35:[1,137],38:[1,136]}),t(y,[2,64],{33:[1,139],38:[1,138]}),t(y,[2,65],{33:[1,141],35:[1,140]}),t(y,[2,68],{35:[1,143],38:[1,142]}),{39:144,43:b,44:d,45:k},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{39:149,43:b,44:d,45:k},t(y,[2,26]),t(y,[2,27]),t(y,[2,28]),t(y,[2,29]),{34:[1,150]},{34:[1,151]},{39:152,43:b,44:d,45:k},{34:[1,153]},{39:154,43:b,44:d,45:k},{34:[1,155]},{34:[1,156]},{34:[1,157]},{34:[1,158]},{34:[1,159]},{34:[1,160]},{34:[1,161]},{39:162,43:b,44:d,45:k},{34:[1,163]},{34:[1,164]},{34:[1,165]},{39:166,43:b,44:d,45:k},{34:[1,167]},{39:168,43:b,44:d,45:k},{34:[1,169]},{34:[1,170]},{34:[1,171]},{39:172,43:b,44:d,45:k},{34:[1,173]},t(y,[2,37],{35:[1,174]}),t(y,[2,38],{38:[1,175]}),t(y,[2,36],{33:[1,176]}),t(y,[2,39],{35:[1,177]}),t(y,[2,34],{38:[1,178]}),t(y,[2,35],{33:[1,179]}),t(y,[2,60],{42:[1,180]}),t(y,[2,73],{33:[1,181]}),t(y,[2,61],{42:[1,182]}),t(y,[2,84],{38:[1,183]}),t(y,[2,74],{33:[1,184]}),t(y,[2,83],{38:[1,185]}),t(y,[2,59],{42:[1,186]}),t(y,[2,72],{33:[1,187]}),t(y,[2,58],{42:[1,188]}),t(y,[2,78],{35:[1,189]}),t(y,[2,71],{33:[1,190]}),t(y,[2,77],{35:[1,191]}),t(y,[2,57],{42:[1,192]}),t(y,[2,85],{38:[1,193]}),t(y,[2,56],{42:[1,194]}),t(y,[2,79],{35:[1,195]}),t(y,[2,80],{35:[1,196]}),t(y,[2,86],{38:[1,197]}),t(y,[2,70],{33:[1,198]}),t(y,[2,81],{38:[1,199]}),t(y,[2,69],{33:[1,200]}),t(y,[2,75],{35:[1,201]}),t(y,[2,76],{35:[1,202]}),t(y,[2,82],{38:[1,203]}),{34:[1,204]},{39:205,43:b,44:d,45:k},{34:[1,206]},{34:[1,207]},{39:208,43:b,44:d,45:k},{34:[1,209]},{34:[1,210]},{34:[1,211]},{34:[1,212]},{39:213,43:b,44:d,45:k},{34:[1,214]},{39:215,43:b,44:d,45:k},{34:[1,216]},{34:[1,217]},{34:[1,218]},{34:[1,219]},{34:[1,220]},{34:[1,221]},{34:[1,222]},{39:223,43:b,44:d,45:k},{34:[1,224]},{34:[1,225]},{34:[1,226]},{39:227,43:b,44:d,45:k},{34:[1,228]},{39:229,43:b,44:d,45:k},{34:[1,230]},{34:[1,231]},{34:[1,232]},{39:233,43:b,44:d,45:k},t(y,[2,40]),t(y,[2,42]),t(y,[2,41]),t(y,[2,43]),t(y,[2,45]),t(y,[2,44]),t(y,[2,101]),t(y,[2,102]),t(y,[2,99]),t(y,[2,100]),t(y,[2,104]),t(y,[2,103]),t(y,[2,108]),t(y,[2,107]),t(y,[2,106]),t(y,[2,105]),t(y,[2,110]),t(y,[2,109]),t(y,[2,98]),t(y,[2,97]),t(y,[2,96]),t(y,[2,95]),t(y,[2,93]),t(y,[2,94]),t(y,[2,92]),t(y,[2,91]),t(y,[2,90]),t(y,[2,89]),t(y,[2,87]),t(y,[2,88])],defaultActions:{9:[2,118],10:[2,1],11:[2,2],19:[2,3],27:[2,4],46:[2,120],47:[2,5]},parseError:function t(e,r){if(r.recoverable){this.trace(e)}else{var i=new Error(e);i.hash=r;throw i}},parse:function t(e){var r=this,i=[0],n=[],s=[null],c=[],a=this.table,o="",l=0,h=0,m=2,u=1;var y=c.slice.call(arguments,1);var p=Object.create(this.lexer);var f={yy:{}};for(var g in this.yy){if(Object.prototype.hasOwnProperty.call(this.yy,g)){f.yy[g]=this.yy[g]}}p.setInput(e,f.yy);f.yy.lexer=p;f.yy.parser=this;if(typeof p.yylloc=="undefined"){p.yylloc={}}var b=p.yylloc;c.push(b);var d=p.options&&p.options.ranges;if(typeof f.yy.parseError==="function"){this.parseError=f.yy.parseError}else{this.parseError=Object.getPrototypeOf(this).parseError}function k(){var t;t=n.pop()||p.lex()||u;if(typeof t!=="number"){if(t instanceof Array){n=t;t=n.pop()}t=r.symbols_[t]||t}return t}var $,_,x,v,E={},w,T,L,R;while(true){_=i[i.length-1];if(this.defaultActions[_]){x=this.defaultActions[_]}else{if($===null||typeof $=="undefined"){$=k()}x=a[_]&&a[_][$]}if(typeof x==="undefined"||!x.length||!x[0]){var M="";R=[];for(w in a[_]){if(this.terminals_[w]&&w>m){R.push("'"+this.terminals_[w]+"'")}}if(p.showPosition){M="Parse error on line "+(l+1)+":\n"+p.showPosition()+"\nExpecting "+R.join(", ")+", got '"+(this.terminals_[$]||$)+"'"}else{M="Parse error on line "+(l+1)+": Unexpected "+($==u?"end of input":"'"+(this.terminals_[$]||$)+"'")}this.parseError(M,{text:p.match,token:this.terminals_[$]||$,line:p.yylineno,loc:b,expected:R})}if(x[0]instanceof Array&&x.length>1){throw new Error("Parse Error: multiple actions possible at state: "+_+", token: "+$)}switch(x[0]){case 1:i.push($);s.push(p.yytext);c.push(p.yylloc);i.push(x[1]);$=null;{h=p.yyleng;o=p.yytext;l=p.yylineno;b=p.yylloc}break;case 2:T=this.productions_[x[1]][1];E.$=s[s.length-T];E._$={first_line:c[c.length-(T||1)].first_line,last_line:c[c.length-1].last_line,first_column:c[c.length-(T||1)].first_column,last_column:c[c.length-1].last_column};if(d){E._$.range=[c[c.length-(T||1)].range[0],c[c.length-1].range[1]]}v=this.performAction.apply(E,[o,h,l,f.yy,x[1],s,c].concat(y));if(typeof v!=="undefined"){return v}if(T){i=i.slice(0,-1*T*2);s=s.slice(0,-1*T);c=c.slice(0,-1*T)}i.push(this.productions_[x[1]][0]);s.push(E.$);c.push(E._$);L=a[i[i.length-2]][i[i.length-1]];i.push(L);break;case 3:return true}}return true}};var x=function(){var t={EOF:1,parseError:function t(e,r){if(this.yy.parser){this.yy.parser.parseError(e,r)}else{throw new Error(e)}},setInput:function(t,e){this.yy=e||this.yy||{};this._input=t;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},input:function(){var t=this._input[0];this.yytext+=t;this.yyleng++;this.offset++;this.match+=t;this.matched+=t;var e=t.match(/(?:\r\n?|\n).*/g);if(e){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return t},unput:function(t){var e=t.length;var r=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-e);this.offset-=e;var i=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(r.length-1){this.yylineno-=r.length-1}var n=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===i.length?this.yylloc.first_column:0)+i[i.length-r.length].length-r[0].length:this.yylloc.first_column-e};if(this.options.ranges){this.yylloc.range=[n[0],n[0]+this.yyleng-e]}this.yyleng=this.yytext.length;return this},more:function(){this._more=true;return this},reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;if(t.length<20){t+=this._input.substr(0,20-t.length)}return(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput();var e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},test_match:function(t,e){var r,i,n;if(this.options.backtrack_lexer){n={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){n.yylloc.range=this.yylloc.range.slice(0)}}i=t[0].match(/(?:\r\n?|\n).*/g);if(i){this.yylineno+=i.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length};this.yytext+=t[0];this.match+=t[0];this.matches=t;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(t[0].length);this.matched+=t[0];r=this.performAction.call(this,this.yy,this,e,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(r){return r}else if(this._backtrack){for(var s in n){this[s]=n[s]}return false}return false},next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var t,e,r,i;if(!this._more){this.yytext="";this.match=""}var n=this._currentRules();for(var s=0;s<n.length;s++){r=this._input.match(this.rules[n[s]]);if(r&&(!e||r[0].length>e[0].length)){e=r;i=s;if(this.options.backtrack_lexer){t=this.test_match(r,n[s]);if(t!==false){return t}else if(this._backtrack){e=false;continue}else{return false}}else if(!this.options.flex){break}}}if(e){t=this.test_match(e,n[i]);if(t!==false){return t}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},lex:function t(){var e=this.next();if(e){return e}else{return this.lex()}},begin:function t(e){this.conditionStack.push(e)},popState:function t(){var e=this.conditionStack.length-1;if(e>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},_currentRules:function t(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},topState:function t(e){e=this.conditionStack.length-1-Math.abs(e||0);if(e>=0){return this.conditionStack[e]}else{return"INITIAL"}},pushState:function t(e){this.begin(e)},stateStackSize:function t(){return this.conditionStack.length},options:{"case-insensitive":true},performAction:function t(e,r,i,n){switch(i){case 0:this.begin("open_directive");return 50;case 1:this.begin("type_directive");return 51;case 2:this.popState();this.begin("arg_directive");return 9;case 3:this.popState();this.popState();return 53;case 4:return 52;case 5:this.begin("acc_title");return 20;case 6:this.popState();return"acc_title_value";case 7:this.begin("acc_descr");return 22;case 8:this.popState();return"acc_descr_value";case 9:this.begin("acc_descr_multiline");break;case 10:this.popState();break;case 11:return"acc_descr_multiline_value";case 12:return 14;case 13:break;case 14:break;case 15:return 6;case 16:return 40;case 17:return 33;case 18:return 38;case 19:return 42;case 20:return 43;case 21:return 44;case 22:return 45;case 23:return 35;case 24:return 29;case 25:return 30;case 26:return 37;case 27:return 32;case 28:return 27;case 29:return 10;case 30:return 10;case 31:return 9;case 32:return"CARET";case 33:this.begin("options");break;case 34:this.popState();break;case 35:return 13;case 36:return 36;case 37:this.begin("string");break;case 38:this.popState();break;case 39:return 34;case 40:return 31;case 41:return 54;case 42:return 8}},rules:[/^(?:%%\{)/i,/^(?:((?:(?!\}%%)[^:.])*))/i,/^(?::)/i,/^(?:\}%%)/i,/^(?:((?:(?!\}%%).|\n)*))/i,/^(?:accTitle\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*\{\s*)/i,/^(?:[\}])/i,/^(?:[^\}]*)/i,/^(?:(\r?\n)+)/i,/^(?:#[^\n]*)/i,/^(?:%[^\n]*)/i,/^(?:gitGraph\b)/i,/^(?:commit(?=\s|$))/i,/^(?:id:)/i,/^(?:type:)/i,/^(?:msg:)/i,/^(?:NORMAL\b)/i,/^(?:REVERSE\b)/i,/^(?:HIGHLIGHT\b)/i,/^(?:tag:)/i,/^(?:branch(?=\s|$))/i,/^(?:order:)/i,/^(?:merge(?=\s|$))/i,/^(?:cherry-pick(?=\s|$))/i,/^(?:checkout(?=\s|$))/i,/^(?:LR\b)/i,/^(?:TB\b)/i,/^(?::)/i,/^(?:\^)/i,/^(?:options\r?\n)/i,/^(?:[ \r\n\t]+end\b)/i,/^(?:[\s\S]+(?=[ \r\n\t]+end))/i,/^(?:["]["])/i,/^(?:["])/i,/^(?:["])/i,/^(?:[^"]*)/i,/^(?:[0-9]+(?=\s|$))/i,/^(?:\w([-\./\w]*[-\w])?)/i,/^(?:$)/i,/^(?:\s+)/i],conditions:{acc_descr_multiline:{rules:[10,11],inclusive:false},acc_descr:{rules:[8],inclusive:false},acc_title:{rules:[6],inclusive:false},close_directive:{rules:[],inclusive:false},arg_directive:{rules:[3,4],inclusive:false},type_directive:{rules:[2,3],inclusive:false},open_directive:{rules:[1],inclusive:false},options:{rules:[34,35],inclusive:false},string:{rules:[38,39],inclusive:false},INITIAL:{rules:[0,5,7,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,37,40,41,42,43],inclusive:true}}};return t}();_.lexer=x;function v(){this.yy={}}v.prototype=_;_.Parser=v;return new v}();h.parser=h;const m=h;let u=(0,i.c)().gitGraph.mainBranchName;let y=(0,i.c)().gitGraph.mainBranchOrder;let p={};let f=null;let g={};g[u]={name:u,order:y};let b={};b[u]=f;let d=u;let k="LR";let $=0;function _(){return(0,i.y)({length:7})}const x=function(t,e,r){i.m.parseDirective(this,t,e,r)};function v(t,e){const r=Object.create(null);return t.reduce(((t,i)=>{const n=e(i);if(!r[n]){r[n]=true;t.push(i)}return t}),[])}const E=function(t){k=t};let w={};const T=function(t){i.l.debug("options str",t);t=t&&t.trim();t=t||"{}";try{w=JSON.parse(t)}catch(e){i.l.error("error while parsing gitGraph options",e.message)}};const L=function(){return w};const R=function(t,e,r,n){i.l.debug("Entering commit:",t,e,r,n);e=i.e.sanitizeText(e,(0,i.c)());t=i.e.sanitizeText(t,(0,i.c)());n=i.e.sanitizeText(n,(0,i.c)());const s={id:e?e:$+"-"+_(),message:t,seq:$++,type:r?r:Y.NORMAL,tag:n?n:"",parents:f==null?[]:[f.id],branch:d};f=s;p[s.id]=s;b[d]=s.id;i.l.debug("in pushCommit "+s.id)};const M=function(t,e){t=i.e.sanitizeText(t,(0,i.c)());if(b[t]===void 0){b[t]=f!=null?f.id:null;g[t]={name:t,order:e?parseInt(e,10):null};C(t);i.l.debug("in createBranch")}else{let e=new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '+t+'")');e.hash={text:"branch "+t,token:"branch "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"checkout '+t+'"']};throw e}};const I=function(t,e,r,n){t=i.e.sanitizeText(t,(0,i.c)());e=i.e.sanitizeText(e,(0,i.c)());const s=p[b[d]];const c=p[b[t]];if(d===t){let e=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]};throw e}else if(s===void 0||!s){let e=new Error('Incorrect usage of "merge". Current branch ('+d+")has no commits");e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["commit"]};throw e}else if(b[t]===void 0){let e=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch "+t]};throw e}else if(c===void 0||!c){let e=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"commit"']};throw e}else if(s===c){let e=new Error('Incorrect usage of "merge". Both branches have same head');e.hash={text:"merge "+t,token:"merge "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]};throw e}else if(e&&p[e]!==void 0){let i=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");i.hash={text:"merge "+t+e+r+n,token:"merge "+t+e+r+n,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["merge "+t+" "+e+"_UNIQUE "+r+" "+n]};throw i}const a={id:e?e:$+"-"+_(),message:"merged branch "+t+" into "+d,seq:$++,parents:[f==null?null:f.id,b[t]],branch:d,type:Y.MERGE,customType:r,customId:e?true:false,tag:n?n:""};f=a;p[a.id]=a;b[d]=a.id;i.l.debug(b);i.l.debug("in mergeBranch")};const A=function(t,e,r){i.l.debug("Entering cherryPick:",t,e,r);t=i.e.sanitizeText(t,(0,i.c)());e=i.e.sanitizeText(e,(0,i.c)());r=i.e.sanitizeText(r,(0,i.c)());if(!t||p[t]===void 0){let r=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]};throw r}let n=p[t];let s=n.branch;if(n.type===Y.MERGE){let r=new Error('Incorrect usage of "cherryPick". Source commit should not be a merge commit');r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]};throw r}if(!e||p[e]===void 0){if(s===d){let r=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]};throw r}const c=p[b[d]];if(c===void 0||!c){let r=new Error('Incorrect usage of "cherry-pick". Current branch ('+d+")has no commits");r.hash={text:"cherryPick "+t+" "+e,token:"cherryPick "+t+" "+e,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]};throw r}const a={id:$+"-"+_(),message:"cherry-picked "+n+" into "+d,seq:$++,parents:[f==null?null:f.id,n.id],branch:d,type:Y.CHERRY_PICK,tag:r??"cherry-pick:"+n.id};f=a;p[a.id]=a;b[d]=a.id;i.l.debug(b);i.l.debug("in cherryPick")}};const C=function(t){t=i.e.sanitizeText(t,(0,i.c)());if(b[t]===void 0){let e=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '+t+'")');e.hash={text:"checkout "+t,token:"checkout "+t,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"branch '+t+'"']};throw e}else{d=t;const e=b[d];f=p[e]}};function O(t,e,r){const i=t.indexOf(e);if(i===-1){t.push(r)}else{t.splice(i,1,r)}}function S(t){const e=t.reduce(((t,e)=>{if(t.seq>e.seq){return t}return e}),t[0]);let r="";t.forEach((function(t){if(t===e){r+="\t*"}else{r+="\t|"}}));const n=[r,e.id,e.seq];for(let i in b){if(b[i]===e.id){n.push(i)}}i.l.debug(n.join(" "));if(e.parents&&e.parents.length==2){const r=p[e.parents[0]];O(t,e,r);t.push(p[e.parents[1]])}else if(e.parents.length==0){return}else{const r=p[e.parents];O(t,e,r)}t=v(t,(t=>t.id));S(t)}const G=function(){i.l.debug(p);const t=D()[0];S([t])};const P=function(){p={};f=null;let t=(0,i.c)().gitGraph.mainBranchName;let e=(0,i.c)().gitGraph.mainBranchOrder;b={};b[t]=null;g={};g[t]={name:t,order:e};d=t;$=0;(0,i.v)()};const B=function(){const t=Object.values(g).map(((t,e)=>{if(t.order!==null){return t}return{...t,order:parseFloat(`0.${e}`,10)}})).sort(((t,e)=>t.order-e.order)).map((({name:t})=>({name:t})));return t};const N=function(){return b};const H=function(){return p};const D=function(){const t=Object.keys(p).map((function(t){return p[t]}));t.forEach((function(t){i.l.debug(t.id)}));t.sort(((t,e)=>t.seq-e.seq));return t};const z=function(){return d};const j=function(){return k};const q=function(){return f};const Y={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4};const K={parseDirective:x,getConfig:()=>(0,i.c)().gitGraph,setDirection:E,setOptions:T,getOptions:L,commit:R,branch:M,merge:I,cherryPick:A,checkout:C,prettyPrint:G,clear:P,getBranchesAsObjArray:B,getBranches:N,getCommits:H,getCommitsArray:D,getCurrentBranch:z,getDirection:j,getHead:q,setAccTitle:i.s,getAccTitle:i.g,getAccDescription:i.a,setAccDescription:i.b,setDiagramTitle:i.r,getDiagramTitle:i.t,commitType:Y};let F={};const U={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4};const V=8;let W={};let J={};let Q=[];let X=0;let Z="LR";const tt=()=>{W={};J={};F={};X=0;Q=[];Z="LR"};const et=t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");let r=[];if(typeof t==="string"){r=t.split(/\\n|\n|<br\s*\/?>/gi)}else if(Array.isArray(t)){r=t}else{r=[]}for(const i of r){const t=document.createElementNS("http://www.w3.org/2000/svg","tspan");t.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve");t.setAttribute("dy","1em");t.setAttribute("x","0");t.setAttribute("class","row");t.textContent=i.trim();e.appendChild(t)}return e};const rt=(t,e,r)=>{const n=(0,i.z)().gitGraph;const s=t.append("g").attr("class","commit-bullets");const c=t.append("g").attr("class","commit-labels");let a=0;if(Z==="TB"){a=30}const o=Object.keys(e);const l=o.sort(((t,r)=>e[t].seq-e[r].seq));l.forEach((t=>{const i=e[t];const o=Z==="TB"?a+10:W[i.branch].pos;const l=Z==="TB"?W[i.branch].pos:a+10;if(r){let t;let e=i.customType!==void 0&&i.customType!==""?i.customType:i.type;switch(e){case U.NORMAL:t="commit-normal";break;case U.REVERSE:t="commit-reverse";break;case U.HIGHLIGHT:t="commit-highlight";break;case U.MERGE:t="commit-merge";break;case U.CHERRY_PICK:t="commit-cherry-pick";break;default:t="commit-normal"}if(e===U.HIGHLIGHT){const e=s.append("rect");e.attr("x",l-10);e.attr("y",o-10);e.attr("height",20);e.attr("width",20);e.attr("class",`commit ${i.id} commit-highlight${W[i.branch].index%V} ${t}-outer`);s.append("rect").attr("x",l-6).attr("y",o-6).attr("height",12).attr("width",12).attr("class",`commit ${i.id} commit${W[i.branch].index%V} ${t}-inner`)}else if(e===U.CHERRY_PICK){s.append("circle").attr("cx",l).attr("cy",o).attr("r",10).attr("class",`commit ${i.id} ${t}`);s.append("circle").attr("cx",l-3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${i.id} ${t}`);s.append("circle").attr("cx",l+3).attr("cy",o+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${i.id} ${t}`);s.append("line").attr("x1",l+3).attr("y1",o+1).attr("x2",l).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${i.id} ${t}`);s.append("line").attr("x1",l-3).attr("y1",o+1).attr("x2",l).attr("y2",o-5).attr("stroke","#fff").attr("class",`commit ${i.id} ${t}`)}else{const r=s.append("circle");r.attr("cx",l);r.attr("cy",o);r.attr("r",i.type===U.MERGE?9:10);r.attr("class",`commit ${i.id} commit${W[i.branch].index%V}`);if(e===U.MERGE){const e=s.append("circle");e.attr("cx",l);e.attr("cy",o);e.attr("r",6);e.attr("class",`commit ${t} ${i.id} commit${W[i.branch].index%V}`)}if(e===U.REVERSE){const e=s.append("path");e.attr("d",`M ${l-5},${o-5}L${l+5},${o+5}M${l-5},${o+5}L${l+5},${o-5}`).attr("class",`commit ${t} ${i.id} commit${W[i.branch].index%V}`)}}}if(Z==="TB"){J[i.id]={x:l,y:a+10}}else{J[i.id]={x:a+10,y:o}}if(r){const t=4;const e=2;if(i.type!==U.CHERRY_PICK&&(i.customId&&i.type===U.MERGE||i.type!==U.MERGE)&&n.showCommitLabel){const r=c.append("g");const s=r.insert("rect").attr("class","commit-label-bkg");const h=r.append("text").attr("x",a).attr("y",o+25).attr("class","commit-label").text(i.id);let m=h.node().getBBox();s.attr("x",a+10-m.width/2-e).attr("y",o+13.5).attr("width",m.width+2*e).attr("height",m.height+2*e);if(Z==="TB"){s.attr("x",l-(m.width+4*t+5)).attr("y",o-12);h.attr("x",l-(m.width+4*t)).attr("y",o+m.height-12)}if(Z!=="TB"){h.attr("x",a+10-m.width/2)}if(n.rotateCommitLabel){if(Z==="TB"){h.attr("transform","rotate(-45, "+l+", "+o+")");s.attr("transform","rotate(-45, "+l+", "+o+")")}else{let t=-7.5-(m.width+10)/25*9.5;let e=10+m.width/25*8.5;r.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+o+")")}}}if(i.tag){const r=c.insert("polygon");const n=c.append("circle");const s=c.append("text").attr("y",o-16).attr("class","tag-label").text(i.tag);let h=s.node().getBBox();s.attr("x",a+10-h.width/2);const m=h.height/2;const u=o-19.2;r.attr("class","tag-label-bkg").attr("points",`\n          ${a-h.width/2-t/2},${u+e}\n          ${a-h.width/2-t/2},${u-e}\n          ${a+10-h.width/2-t},${u-m-e}\n          ${a+10+h.width/2+t},${u-m-e}\n          ${a+10+h.width/2+t},${u+m+e}\n          ${a+10-h.width/2-t},${u+m+e}`);n.attr("cx",a-h.width/2+t/2).attr("cy",u).attr("r",1.5).attr("class","tag-hole");if(Z==="TB"){r.attr("class","tag-label-bkg").attr("points",`\n            ${l},${a+e}\n            ${l},${a-e}\n            ${l+10},${a-m-e}\n            ${l+10+h.width+t},${a-m-e}\n            ${l+10+h.width+t},${a+m+e}\n            ${l+10},${a+m+e}`).attr("transform","translate(12,12) rotate(45, "+l+","+a+")");n.attr("cx",l+t/2).attr("cy",a).attr("transform","translate(12,12) rotate(45, "+l+","+a+")");s.attr("x",l+5).attr("y",a+3).attr("transform","translate(14,14) rotate(45, "+l+","+a+")")}}}a+=50;if(a>X){X=a}}))};const it=(t,e,r)=>{const i=Object.keys(r);const n=i.filter((i=>r[i].branch===e.branch&&r[i].seq>t.seq&&r[i].seq<e.seq));return n.length>0};const nt=(t,e,r=0)=>{const i=t+Math.abs(t-e)/2;if(r>5){return i}let n=Q.every((t=>Math.abs(t-i)>=10));if(n){Q.push(i);return i}const s=Math.abs(t-e);return nt(t,e-s/5,r+1)};const st=(t,e,r,i)=>{const n=J[e.id];const s=J[r.id];const c=it(e,r,i);let a="";let o="";let l=0;let h=0;let m=W[r.branch].index;let u;if(c){a="A 10 10, 0, 0, 0,";o="A 10 10, 0, 0, 1,";l=10;h=10;m=W[r.branch].index;const t=n.y<s.y?nt(n.y,s.y):nt(s.y,n.y);const e=n.x<s.x?nt(n.x,s.x):nt(s.x,n.x);if(Z==="TB"){if(n.x<s.x){u=`M ${n.x} ${n.y} L ${e-l} ${n.y} ${o} ${e} ${n.y+h} L ${e} ${s.y-l} ${a} ${e+h} ${s.y} L ${s.x} ${s.y}`}else{u=`M ${n.x} ${n.y} L ${e+l} ${n.y} ${a} ${e} ${n.y+h} L ${e} ${s.y-l} ${o} ${e-h} ${s.y} L ${s.x} ${s.y}`}}else{if(n.y<s.y){u=`M ${n.x} ${n.y} L ${n.x} ${t-l} ${a} ${n.x+h} ${t} L ${s.x-l} ${t} ${o} ${s.x} ${t+h} L ${s.x} ${s.y}`}else{u=`M ${n.x} ${n.y} L ${n.x} ${t+l} ${o} ${n.x+h} ${t} L ${s.x-l} ${t} ${a} ${s.x} ${t-h} L ${s.x} ${s.y}`}}}else{if(Z==="TB"){if(n.x<s.x){a="A 20 20, 0, 0, 0,";o="A 20 20, 0, 0, 1,";l=20;h=20;m=W[r.branch].index;u=`M ${n.x} ${n.y} L ${s.x-l} ${n.y} ${o} ${s.x} ${n.y+h} L ${s.x} ${s.y}`}if(n.x>s.x){a="A 20 20, 0, 0, 0,";o="A 20 20, 0, 0, 1,";l=20;h=20;m=W[e.branch].index;u=`M ${n.x} ${n.y} L ${n.x} ${s.y-l} ${o} ${n.x-h} ${s.y} L ${s.x} ${s.y}`}if(n.x===s.x){m=W[e.branch].index;u=`M ${n.x} ${n.y} L ${n.x+l} ${n.y} ${a} ${n.x+h} ${s.y+l} L ${s.x} ${s.y}`}}else{if(n.y<s.y){a="A 20 20, 0, 0, 0,";l=20;h=20;m=W[r.branch].index;u=`M ${n.x} ${n.y} L ${n.x} ${s.y-l} ${a} ${n.x+h} ${s.y} L ${s.x} ${s.y}`}if(n.y>s.y){a="A 20 20, 0, 0, 0,";l=20;h=20;m=W[e.branch].index;u=`M ${n.x} ${n.y} L ${s.x-l} ${n.y} ${a} ${s.x} ${n.y-h} L ${s.x} ${s.y}`}if(n.y===s.y){m=W[e.branch].index;u=`M ${n.x} ${n.y} L ${n.x} ${s.y-l} ${a} ${n.x+h} ${s.y} L ${s.x} ${s.y}`}}}t.append("path").attr("d",u).attr("class","arrow arrow"+m%V)};const ct=(t,e)=>{const r=t.append("g").attr("class","commit-arrows");Object.keys(e).forEach((t=>{const i=e[t];if(i.parents&&i.parents.length>0){i.parents.forEach((t=>{st(r,e[t],i,e)}))}}))};const at=(t,e)=>{const r=(0,i.z)().gitGraph;const n=t.append("g");e.forEach(((t,e)=>{const i=e%V;const s=W[t.name].pos;const c=n.append("line");c.attr("x1",0);c.attr("y1",s);c.attr("x2",X);c.attr("y2",s);c.attr("class","branch branch"+i);if(Z==="TB"){c.attr("y1",30);c.attr("x1",s);c.attr("y2",X);c.attr("x2",s)}Q.push(s);let a=t.name;const o=et(a);const l=n.insert("rect");const h=n.insert("g").attr("class","branchLabel");const m=h.insert("g").attr("class","label branch-label"+i);m.node().appendChild(o);let u=o.getBBox();l.attr("class","branchLabelBkg label"+i).attr("rx",4).attr("ry",4).attr("x",-u.width-4-(r.rotateCommitLabel===true?30:0)).attr("y",-u.height/2+8).attr("width",u.width+18).attr("height",u.height+4);m.attr("transform","translate("+(-u.width-14-(r.rotateCommitLabel===true?30:0))+", "+(s-u.height/2-1)+")");if(Z==="TB"){l.attr("x",s-u.width/2-10).attr("y",0);m.attr("transform","translate("+(s-u.width/2-5)+", 0)")}if(Z!=="TB"){l.attr("transform","translate(-19, "+(s-u.height/2)+")")}}))};const ot=function(t,e,r,s){tt();const c=(0,i.z)();const a=c.gitGraph;i.l.debug("in gitgraph renderer",t+"\n","id:",e,r);F=s.db.getCommits();const o=s.db.getBranchesAsObjArray();Z=s.db.getDirection();const l=(0,n.Ys)(`[id="${e}"]`);let h=0;o.forEach(((t,e)=>{const r=et(t.name);const i=l.append("g");const n=i.insert("g").attr("class","branchLabel");const s=n.insert("g").attr("class","label branch-label");s.node().appendChild(r);let c=r.getBBox();W[t.name]={pos:h,index:e};h+=50+(a.rotateCommitLabel?40:0)+(Z==="TB"?c.width/2:0);s.remove();n.remove();i.remove()}));rt(l,F,false);if(a.showBranches){at(l,o)}ct(l,F);rt(l,F,true);i.u.insertTitle(l,"gitTitleText",a.titleTopMargin,s.db.getDiagramTitle());(0,i.A)(void 0,l,a.diagramPadding,a.useMaxWidth??c.useMaxWidth)};const lt={draw:ot};const ht=t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`;const mt=ht;const ut={parser:m,db:K,renderer:lt,styles:mt}}}]);
//# sourceMappingURL=9320.5d0231cfde9218929691.js.map?v=5d0231cfde9218929691