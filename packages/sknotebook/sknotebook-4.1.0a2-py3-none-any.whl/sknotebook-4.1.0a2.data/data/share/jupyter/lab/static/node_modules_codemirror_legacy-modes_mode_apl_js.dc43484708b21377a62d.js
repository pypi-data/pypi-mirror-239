"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_apl_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/apl.js":
/*!************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/apl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "apl": () => (/* binding */ apl)
/* harmony export */ });
var builtInFuncs = {
  "+": ["conjugate", "add"],
  "−": ["negate", "subtract"],
  "×": ["signOf", "multiply"],
  "÷": ["reciprocal", "divide"],
  "⌈": ["ceiling", "greaterOf"],
  "⌊": ["floor", "lesserOf"],
  "∣": ["absolute", "residue"],
  "⍳": ["indexGenerate", "indexOf"],
  "?": ["roll", "deal"],
  "⋆": ["exponentiate", "toThePowerOf"],
  "⍟": ["naturalLog", "logToTheBase"],
  "○": ["piTimes", "circularFuncs"],
  "!": ["factorial", "binomial"],
  "⌹": ["matrixInverse", "matrixDivide"],
  "<": [null, "lessThan"],
  "≤": [null, "lessThanOrEqual"],
  "=": [null, "equals"],
  ">": [null, "greaterThan"],
  "≥": [null, "greaterThanOrEqual"],
  "≠": [null, "notEqual"],
  "≡": ["depth", "match"],
  "≢": [null, "notMatch"],
  "∈": ["enlist", "membership"],
  "⍷": [null, "find"],
  "∪": ["unique", "union"],
  "∩": [null, "intersection"],
  "∼": ["not", "without"],
  "∨": [null, "or"],
  "∧": [null, "and"],
  "⍱": [null, "nor"],
  "⍲": [null, "nand"],
  "⍴": ["shapeOf", "reshape"],
  ",": ["ravel", "catenate"],
  "⍪": [null, "firstAxisCatenate"],
  "⌽": ["reverse", "rotate"],
  "⊖": ["axis1Reverse", "axis1Rotate"],
  "⍉": ["transpose", null],
  "↑": ["first", "take"],
  "↓": [null, "drop"],
  "⊂": ["enclose", "partitionWithAxis"],
  "⊃": ["diclose", "pick"],
  "⌷": [null, "index"],
  "⍋": ["gradeUp", null],
  "⍒": ["gradeDown", null],
  "⊤": ["encode", null],
  "⊥": ["decode", null],
  "⍕": ["format", "formatByExample"],
  "⍎": ["execute", null],
  "⊣": ["stop", "left"],
  "⊢": ["pass", "right"]
};

var isOperator = /[\.\/⌿⍀¨⍣]/;
var isNiladic = /⍬/;
var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
var isArrow = /←/;
var isComment = /[⍝#].*$/;

var stringEater = function(type) {
  var prev;
  prev = false;
  return function(c) {
    prev = c;
    if (c === type) {
      return prev === "\\";
    }
    return true;
  };
};

const apl = {
  name: "apl",
  startState: function() {
    return {
      prev: false,
      func: false,
      op: false,
      string: false,
      escape: false
    };
  },
  token: function(stream, state) {
    var ch;
    if (stream.eatSpace()) {
      return null;
    }
    ch = stream.next();
    if (ch === '"' || ch === "'") {
      stream.eatWhile(stringEater(ch));
      stream.next();
      state.prev = true;
      return "string";
    }
    if (/[\[{\(]/.test(ch)) {
      state.prev = false;
      return null;
    }
    if (/[\]}\)]/.test(ch)) {
      state.prev = true;
      return null;
    }
    if (isNiladic.test(ch)) {
      state.prev = false;
      return "atom";
    }
    if (/[¯\d]/.test(ch)) {
      if (state.func) {
        state.func = false;
        state.prev = false;
      } else {
        state.prev = true;
      }
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (isOperator.test(ch)) {
      return "operator"
    }
    if (isArrow.test(ch)) {
      return "operator";
    }
    if (isFunction.test(ch)) {
      state.func = true;
      state.prev = false;
      return builtInFuncs[ch] ? "variableName.function.standard" : "variableName.function"
    }
    if (isComment.test(ch)) {
      stream.skipToEnd();
      return "comment";
    }
    if (ch === "∘" && stream.peek() === ".") {
      stream.next();
      return "variableName.function";
    }
    stream.eatWhile(/[\w\$_]/);
    state.prev = true;
    return "keyword";
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfYXBsX2pzLmRjNDM0ODQ3MDhiMjEzNzdhNjJkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2FwbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYnVpbHRJbkZ1bmNzID0ge1xuICBcIitcIjogW1wiY29uanVnYXRlXCIsIFwiYWRkXCJdLFxuICBcIuKIklwiOiBbXCJuZWdhdGVcIiwgXCJzdWJ0cmFjdFwiXSxcbiAgXCLDl1wiOiBbXCJzaWduT2ZcIiwgXCJtdWx0aXBseVwiXSxcbiAgXCLDt1wiOiBbXCJyZWNpcHJvY2FsXCIsIFwiZGl2aWRlXCJdLFxuICBcIuKMiFwiOiBbXCJjZWlsaW5nXCIsIFwiZ3JlYXRlck9mXCJdLFxuICBcIuKMilwiOiBbXCJmbG9vclwiLCBcImxlc3Nlck9mXCJdLFxuICBcIuKIo1wiOiBbXCJhYnNvbHV0ZVwiLCBcInJlc2lkdWVcIl0sXG4gIFwi4o2zXCI6IFtcImluZGV4R2VuZXJhdGVcIiwgXCJpbmRleE9mXCJdLFxuICBcIj9cIjogW1wicm9sbFwiLCBcImRlYWxcIl0sXG4gIFwi4ouGXCI6IFtcImV4cG9uZW50aWF0ZVwiLCBcInRvVGhlUG93ZXJPZlwiXSxcbiAgXCLijZ9cIjogW1wibmF0dXJhbExvZ1wiLCBcImxvZ1RvVGhlQmFzZVwiXSxcbiAgXCLil4tcIjogW1wicGlUaW1lc1wiLCBcImNpcmN1bGFyRnVuY3NcIl0sXG4gIFwiIVwiOiBbXCJmYWN0b3JpYWxcIiwgXCJiaW5vbWlhbFwiXSxcbiAgXCLijLlcIjogW1wibWF0cml4SW52ZXJzZVwiLCBcIm1hdHJpeERpdmlkZVwiXSxcbiAgXCI8XCI6IFtudWxsLCBcImxlc3NUaGFuXCJdLFxuICBcIuKJpFwiOiBbbnVsbCwgXCJsZXNzVGhhbk9yRXF1YWxcIl0sXG4gIFwiPVwiOiBbbnVsbCwgXCJlcXVhbHNcIl0sXG4gIFwiPlwiOiBbbnVsbCwgXCJncmVhdGVyVGhhblwiXSxcbiAgXCLiiaVcIjogW251bGwsIFwiZ3JlYXRlclRoYW5PckVxdWFsXCJdLFxuICBcIuKJoFwiOiBbbnVsbCwgXCJub3RFcXVhbFwiXSxcbiAgXCLiiaFcIjogW1wiZGVwdGhcIiwgXCJtYXRjaFwiXSxcbiAgXCLiiaJcIjogW251bGwsIFwibm90TWF0Y2hcIl0sXG4gIFwi4oiIXCI6IFtcImVubGlzdFwiLCBcIm1lbWJlcnNoaXBcIl0sXG4gIFwi4o23XCI6IFtudWxsLCBcImZpbmRcIl0sXG4gIFwi4oiqXCI6IFtcInVuaXF1ZVwiLCBcInVuaW9uXCJdLFxuICBcIuKIqVwiOiBbbnVsbCwgXCJpbnRlcnNlY3Rpb25cIl0sXG4gIFwi4oi8XCI6IFtcIm5vdFwiLCBcIndpdGhvdXRcIl0sXG4gIFwi4oioXCI6IFtudWxsLCBcIm9yXCJdLFxuICBcIuKIp1wiOiBbbnVsbCwgXCJhbmRcIl0sXG4gIFwi4o2xXCI6IFtudWxsLCBcIm5vclwiXSxcbiAgXCLijbJcIjogW251bGwsIFwibmFuZFwiXSxcbiAgXCLijbRcIjogW1wic2hhcGVPZlwiLCBcInJlc2hhcGVcIl0sXG4gIFwiLFwiOiBbXCJyYXZlbFwiLCBcImNhdGVuYXRlXCJdLFxuICBcIuKNqlwiOiBbbnVsbCwgXCJmaXJzdEF4aXNDYXRlbmF0ZVwiXSxcbiAgXCLijL1cIjogW1wicmV2ZXJzZVwiLCBcInJvdGF0ZVwiXSxcbiAgXCLiipZcIjogW1wiYXhpczFSZXZlcnNlXCIsIFwiYXhpczFSb3RhdGVcIl0sXG4gIFwi4o2JXCI6IFtcInRyYW5zcG9zZVwiLCBudWxsXSxcbiAgXCLihpFcIjogW1wiZmlyc3RcIiwgXCJ0YWtlXCJdLFxuICBcIuKGk1wiOiBbbnVsbCwgXCJkcm9wXCJdLFxuICBcIuKKglwiOiBbXCJlbmNsb3NlXCIsIFwicGFydGl0aW9uV2l0aEF4aXNcIl0sXG4gIFwi4oqDXCI6IFtcImRpY2xvc2VcIiwgXCJwaWNrXCJdLFxuICBcIuKMt1wiOiBbbnVsbCwgXCJpbmRleFwiXSxcbiAgXCLijYtcIjogW1wiZ3JhZGVVcFwiLCBudWxsXSxcbiAgXCLijZJcIjogW1wiZ3JhZGVEb3duXCIsIG51bGxdLFxuICBcIuKKpFwiOiBbXCJlbmNvZGVcIiwgbnVsbF0sXG4gIFwi4oqlXCI6IFtcImRlY29kZVwiLCBudWxsXSxcbiAgXCLijZVcIjogW1wiZm9ybWF0XCIsIFwiZm9ybWF0QnlFeGFtcGxlXCJdLFxuICBcIuKNjlwiOiBbXCJleGVjdXRlXCIsIG51bGxdLFxuICBcIuKKo1wiOiBbXCJzdG9wXCIsIFwibGVmdFwiXSxcbiAgXCLiiqJcIjogW1wicGFzc1wiLCBcInJpZ2h0XCJdXG59O1xuXG52YXIgaXNPcGVyYXRvciA9IC9bXFwuXFwv4oy/4o2AwqjijaNdLztcbnZhciBpc05pbGFkaWMgPSAv4o2sLztcbnZhciBpc0Z1bmN0aW9uID0gL1tcXCviiJLDl8O34oyI4oyK4oij4o2zXFw/4ouG4o2f4peLIeKMuTziiaQ9PuKJpeKJoOKJoeKJouKIiOKNt+KIquKIqeKIvOKIqOKIp+KNseKNsuKNtCzijarijL3iipbijYnihpHihpPiioLiioPijLfijYvijZLiiqTiiqXijZXijY7iiqPiiqJdLztcbnZhciBpc0Fycm93ID0gL+KGkC87XG52YXIgaXNDb21tZW50ID0gL1vijZ0jXS4qJC87XG5cbnZhciBzdHJpbmdFYXRlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHByZXY7XG4gIHByZXYgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICBwcmV2ID0gYztcbiAgICBpZiAoYyA9PT0gdHlwZSkge1xuICAgICAgcmV0dXJuIHByZXYgPT09IFwiXFxcXFwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBhcGwgPSB7XG4gIG5hbWU6IFwiYXBsXCIsXG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmV2OiBmYWxzZSxcbiAgICAgIGZ1bmM6IGZhbHNlLFxuICAgICAgb3A6IGZhbHNlLFxuICAgICAgc3RyaW5nOiBmYWxzZSxcbiAgICAgIGVzY2FwZTogZmFsc2VcbiAgICB9O1xuICB9LFxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBjaDtcbiAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gICAgaWYgKGNoID09PSAnXCInIHx8IGNoID09PSBcIidcIikge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKHN0cmluZ0VhdGVyKGNoKSk7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgc3RhdGUucHJldiA9IHRydWU7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgaWYgKC9bXFxbe1xcKF0vLnRlc3QoY2gpKSB7XG4gICAgICBzdGF0ZS5wcmV2ID0gZmFsc2U7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKC9bXFxdfVxcKV0vLnRlc3QoY2gpKSB7XG4gICAgICBzdGF0ZS5wcmV2ID0gdHJ1ZTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNOaWxhZGljLnRlc3QoY2gpKSB7XG4gICAgICBzdGF0ZS5wcmV2ID0gZmFsc2U7XG4gICAgICByZXR1cm4gXCJhdG9tXCI7XG4gICAgfVxuICAgIGlmICgvW8KvXFxkXS8udGVzdChjaCkpIHtcbiAgICAgIGlmIChzdGF0ZS5mdW5jKSB7XG4gICAgICAgIHN0YXRlLmZ1bmMgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucHJldiA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucHJldiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5dLyk7XG4gICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICB9XG4gICAgaWYgKGlzT3BlcmF0b3IudGVzdChjaCkpIHtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCJcbiAgICB9XG4gICAgaWYgKGlzQXJyb3cudGVzdChjaCkpIHtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uLnRlc3QoY2gpKSB7XG4gICAgICBzdGF0ZS5mdW5jID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnByZXYgPSBmYWxzZTtcbiAgICAgIHJldHVybiBidWlsdEluRnVuY3NbY2hdID8gXCJ2YXJpYWJsZU5hbWUuZnVuY3Rpb24uc3RhbmRhcmRcIiA6IFwidmFyaWFibGVOYW1lLmZ1bmN0aW9uXCJcbiAgICB9XG4gICAgaWYgKGlzQ29tbWVudC50ZXN0KGNoKSkge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgIH1cbiAgICBpZiAoY2ggPT09IFwi4oiYXCIgJiYgc3RyZWFtLnBlZWsoKSA9PT0gXCIuXCIpIHtcbiAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICByZXR1cm4gXCJ2YXJpYWJsZU5hbWUuZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICBzdGF0ZS5wcmV2ID0gdHJ1ZTtcbiAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==