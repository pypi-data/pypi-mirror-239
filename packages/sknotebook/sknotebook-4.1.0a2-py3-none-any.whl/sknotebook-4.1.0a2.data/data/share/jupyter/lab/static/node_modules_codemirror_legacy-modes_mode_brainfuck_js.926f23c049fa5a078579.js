"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_brainfuck_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/brainfuck.js":
/*!******************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/brainfuck.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "brainfuck": () => (/* binding */ brainfuck)
/* harmony export */ });
var reserve = "><+-.,[]".split("");
/*
  comments can be either:
  placed behind lines

  +++    this is a comment

  where reserved characters cannot be used
  or in a loop
  [
  this is ok to use [ ] and stuff
  ]
  or preceded by #
*/
const brainfuck = {
  name: "brainfuck",
  startState: function() {
    return {
      commentLine: false,
      left: 0,
      right: 0,
      commentLoop: false
    }
  },
  token: function(stream, state) {
    if (stream.eatSpace()) return null
    if(stream.sol()){
      state.commentLine = false;
    }
    var ch = stream.next().toString();
    if(reserve.indexOf(ch) !== -1){
      if(state.commentLine === true){
        if(stream.eol()){
          state.commentLine = false;
        }
        return "comment";
      }
      if(ch === "]" || ch === "["){
        if(ch === "["){
          state.left++;
        }
        else{
          state.right++;
        }
        return "bracket";
      }
      else if(ch === "+" || ch === "-"){
        return "keyword";
      }
      else if(ch === "<" || ch === ">"){
        return "atom";
      }
      else if(ch === "." || ch === ","){
        return "def";
      }
    }
    else{
      state.commentLine = true;
      if(stream.eol()){
        state.commentLine = false;
      }
      return "comment";
    }
    if(stream.eol()){
      state.commentLine = false;
    }
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfYnJhaW5mdWNrX2pzLjkyNmYyM2MwNDlmYTVhMDc4NTc5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9icmFpbmZ1Y2suanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlc2VydmUgPSBcIj48Ky0uLFtdXCIuc3BsaXQoXCJcIik7XG4vKlxuICBjb21tZW50cyBjYW4gYmUgZWl0aGVyOlxuICBwbGFjZWQgYmVoaW5kIGxpbmVzXG5cbiAgKysrICAgIHRoaXMgaXMgYSBjb21tZW50XG5cbiAgd2hlcmUgcmVzZXJ2ZWQgY2hhcmFjdGVycyBjYW5ub3QgYmUgdXNlZFxuICBvciBpbiBhIGxvb3BcbiAgW1xuICB0aGlzIGlzIG9rIHRvIHVzZSBbIF0gYW5kIHN0dWZmXG4gIF1cbiAgb3IgcHJlY2VkZWQgYnkgI1xuKi9cbmV4cG9ydCBjb25zdCBicmFpbmZ1Y2sgPSB7XG4gIG5hbWU6IFwiYnJhaW5mdWNrXCIsXG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21tZW50TGluZTogZmFsc2UsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBjb21tZW50TG9vcDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbFxuICAgIGlmKHN0cmVhbS5zb2woKSl7XG4gICAgICBzdGF0ZS5jb21tZW50TGluZSA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpLnRvU3RyaW5nKCk7XG4gICAgaWYocmVzZXJ2ZS5pbmRleE9mKGNoKSAhPT0gLTEpe1xuICAgICAgaWYoc3RhdGUuY29tbWVudExpbmUgPT09IHRydWUpe1xuICAgICAgICBpZihzdHJlYW0uZW9sKCkpe1xuICAgICAgICAgIHN0YXRlLmNvbW1lbnRMaW5lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgfVxuICAgICAgaWYoY2ggPT09IFwiXVwiIHx8IGNoID09PSBcIltcIil7XG4gICAgICAgIGlmKGNoID09PSBcIltcIil7XG4gICAgICAgICAgc3RhdGUubGVmdCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgc3RhdGUucmlnaHQrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJicmFja2V0XCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoID09PSBcIitcIiB8fCBjaCA9PT0gXCItXCIpe1xuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoID09PSBcIjxcIiB8fCBjaCA9PT0gXCI+XCIpe1xuICAgICAgICByZXR1cm4gXCJhdG9tXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoID09PSBcIi5cIiB8fCBjaCA9PT0gXCIsXCIpe1xuICAgICAgICByZXR1cm4gXCJkZWZcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHN0YXRlLmNvbW1lbnRMaW5lID0gdHJ1ZTtcbiAgICAgIGlmKHN0cmVhbS5lb2woKSl7XG4gICAgICAgIHN0YXRlLmNvbW1lbnRMaW5lID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfVxuICAgIGlmKHN0cmVhbS5lb2woKSl7XG4gICAgICBzdGF0ZS5jb21tZW50TGluZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==