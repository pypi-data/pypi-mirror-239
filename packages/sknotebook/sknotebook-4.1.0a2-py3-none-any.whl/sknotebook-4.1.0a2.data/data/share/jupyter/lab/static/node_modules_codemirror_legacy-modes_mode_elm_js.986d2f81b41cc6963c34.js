"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_elm_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/elm.js":
/*!************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/elm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "elm": () => (/* binding */ elm)
/* harmony export */ });
function switchState(source, setState, f)
{
  setState(f);
  return f(source, setState);
}

var lowerRE = /[a-z]/;
var upperRE = /[A-Z]/;
var innerRE = /[a-zA-Z0-9_]/;

var digitRE = /[0-9]/;
var hexRE = /[0-9A-Fa-f]/;
var symbolRE = /[-&*+.\\/<>=?^|:]/;
var specialRE = /[(),[\]{}]/;
var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer

function normal()
{
  return function(source, setState)
  {
    if (source.eatWhile(spacesRE))
    {
      return null;
    }

    var char = source.next();

    if (specialRE.test(char))
    {
      return (char === '{' && source.eat('-'))
        ? switchState(source, setState, chompMultiComment(1))
        : (char === '[' && source.match('glsl|'))
        ? switchState(source, setState, chompGlsl)
        : 'builtin';
    }

    if (char === '\'')
    {
      return switchState(source, setState, chompChar);
    }

    if (char === '"')
    {
      return source.eat('"')
        ? source.eat('"')
        ? switchState(source, setState, chompMultiString)
        : 'string'
      : switchState(source, setState, chompSingleString);
    }

    if (upperRE.test(char))
    {
      source.eatWhile(innerRE);
      return 'type';
    }

    if (lowerRE.test(char))
    {
      var isDef = source.pos === 1;
      source.eatWhile(innerRE);
      return isDef ? "def" : "variable";
    }

    if (digitRE.test(char))
    {
      if (char === '0')
      {
        if (source.eat(/[xX]/))
        {
          source.eatWhile(hexRE); // should require at least 1
          return "number";
        }
      }
      else
      {
        source.eatWhile(digitRE);
      }
      if (source.eat('.'))
      {
        source.eatWhile(digitRE); // should require at least 1
      }
      if (source.eat(/[eE]/))
      {
        source.eat(/[-+]/);
        source.eatWhile(digitRE); // should require at least 1
      }
      return "number";
    }

    if (symbolRE.test(char))
    {
      if (char === '-' && source.eat('-'))
      {
        source.skipToEnd();
        return "comment";
      }
      source.eatWhile(symbolRE);
      return "keyword";
    }

    if (char === '_')
    {
      return "keyword";
    }

    return "error";
  }
}

function chompMultiComment(nest)
{
  if (nest == 0)
  {
    return normal();
  }
  return function(source, setState)
  {
    while (!source.eol())
    {
      var char = source.next();
      if (char == '{' && source.eat('-'))
      {
        ++nest;
      }
      else if (char == '-' && source.eat('}'))
      {
        --nest;
        if (nest === 0)
        {
          setState(normal());
          return 'comment';
        }
      }
    }
    setState(chompMultiComment(nest));
    return 'comment';
  }
}

function chompMultiString(source, setState)
{
  while (!source.eol())
  {
    var char = source.next();
    if (char === '"' && source.eat('"') && source.eat('"'))
    {
      setState(normal());
      return 'string';
    }
  }
  return 'string';
}

function chompSingleString(source, setState)
{
  while (source.skipTo('\\"')) { source.next(); source.next(); }
  if (source.skipTo('"'))
  {
    source.next();
    setState(normal());
    return 'string';
  }
  source.skipToEnd();
  setState(normal());
  return 'error';
}

function chompChar(source, setState)
{
  while (source.skipTo("\\'")) { source.next(); source.next(); }
  if (source.skipTo("'"))
  {
    source.next();
    setState(normal());
    return 'string';
  }
  source.skipToEnd();
  setState(normal());
  return 'error';
}

function chompGlsl(source, setState)
{
  while (!source.eol())
  {
    var char = source.next();
    if (char === '|' && source.eat(']'))
    {
      setState(normal());
      return 'string';
    }
  }
  return 'string';
}

var wellKnownWords = {
  case: 1,
  of: 1,
  as: 1,
  if: 1,
  then: 1,
  else: 1,
  let: 1,
    in: 1,
  type: 1,
  alias: 1,
  module: 1,
  where: 1,
  import: 1,
  exposing: 1,
  port: 1
};

const elm = {
  name: "elm",
  startState: function ()  { return { f: normal() }; },
  copyState:  function (s) { return { f: s.f }; },

  token: function(stream, state) {
    var type = state.f(stream, function(s) { state.f = s; });
    var word = stream.current();
    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;
  },

  languageData: {
    commentTokens: {line: "--"}
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfZWxtX2pzLjk4NmQyZjgxYjQxY2M2OTYzYzM0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsMEJBQTBCOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBLDZCQUE2QixTQUFTLGdCQUFnQjtBQUN0RCw2QkFBNkIsU0FBUyxXQUFXOztBQUVqRDtBQUNBLDZDQUE2QyxjQUFjO0FBQzNEO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2VsbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBmKVxue1xuICBzZXRTdGF0ZShmKTtcbiAgcmV0dXJuIGYoc291cmNlLCBzZXRTdGF0ZSk7XG59XG5cbnZhciBsb3dlclJFID0gL1thLXpdLztcbnZhciB1cHBlclJFID0gL1tBLVpdLztcbnZhciBpbm5lclJFID0gL1thLXpBLVowLTlfXS87XG5cbnZhciBkaWdpdFJFID0gL1swLTldLztcbnZhciBoZXhSRSA9IC9bMC05QS1GYS1mXS87XG52YXIgc3ltYm9sUkUgPSAvWy0mKisuXFxcXC88Pj0/Xnw6XS87XG52YXIgc3BlY2lhbFJFID0gL1soKSxbXFxde31dLztcbnZhciBzcGFjZXNSRSA9IC9bIFxcdlxcZl0vOyAvLyBuZXdsaW5lcyBhcmUgaGFuZGxlZCBpbiB0b2tlbml6ZXJcblxuZnVuY3Rpb24gbm9ybWFsKClcbntcbiAgcmV0dXJuIGZ1bmN0aW9uKHNvdXJjZSwgc2V0U3RhdGUpXG4gIHtcbiAgICBpZiAoc291cmNlLmVhdFdoaWxlKHNwYWNlc1JFKSlcbiAgICB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY2hhciA9IHNvdXJjZS5uZXh0KCk7XG5cbiAgICBpZiAoc3BlY2lhbFJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgcmV0dXJuIChjaGFyID09PSAneycgJiYgc291cmNlLmVhdCgnLScpKVxuICAgICAgICA/IHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wTXVsdGlDb21tZW50KDEpKVxuICAgICAgICA6IChjaGFyID09PSAnWycgJiYgc291cmNlLm1hdGNoKCdnbHNsfCcpKVxuICAgICAgICA/IHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wR2xzbClcbiAgICAgICAgOiAnYnVpbHRpbic7XG4gICAgfVxuXG4gICAgaWYgKGNoYXIgPT09ICdcXCcnKVxuICAgIHtcbiAgICAgIHJldHVybiBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcENoYXIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyID09PSAnXCInKVxuICAgIHtcbiAgICAgIHJldHVybiBzb3VyY2UuZWF0KCdcIicpXG4gICAgICAgID8gc291cmNlLmVhdCgnXCInKVxuICAgICAgICA/IHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wTXVsdGlTdHJpbmcpXG4gICAgICAgIDogJ3N0cmluZydcbiAgICAgIDogc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBTaW5nbGVTdHJpbmcpO1xuICAgIH1cblxuICAgIGlmICh1cHBlclJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgc291cmNlLmVhdFdoaWxlKGlubmVyUkUpO1xuICAgICAgcmV0dXJuICd0eXBlJztcbiAgICB9XG5cbiAgICBpZiAobG93ZXJSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIHZhciBpc0RlZiA9IHNvdXJjZS5wb3MgPT09IDE7XG4gICAgICBzb3VyY2UuZWF0V2hpbGUoaW5uZXJSRSk7XG4gICAgICByZXR1cm4gaXNEZWYgPyBcImRlZlwiIDogXCJ2YXJpYWJsZVwiO1xuICAgIH1cblxuICAgIGlmIChkaWdpdFJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgaWYgKGNoYXIgPT09ICcwJylcbiAgICAgIHtcbiAgICAgICAgaWYgKHNvdXJjZS5lYXQoL1t4WF0vKSlcbiAgICAgICAge1xuICAgICAgICAgIHNvdXJjZS5lYXRXaGlsZShoZXhSRSk7IC8vIHNob3VsZCByZXF1aXJlIGF0IGxlYXN0IDFcbiAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICBzb3VyY2UuZWF0V2hpbGUoZGlnaXRSRSk7XG4gICAgICB9XG4gICAgICBpZiAoc291cmNlLmVhdCgnLicpKVxuICAgICAge1xuICAgICAgICBzb3VyY2UuZWF0V2hpbGUoZGlnaXRSRSk7IC8vIHNob3VsZCByZXF1aXJlIGF0IGxlYXN0IDFcbiAgICAgIH1cbiAgICAgIGlmIChzb3VyY2UuZWF0KC9bZUVdLykpXG4gICAgICB7XG4gICAgICAgIHNvdXJjZS5lYXQoL1stK10vKTtcbiAgICAgICAgc291cmNlLmVhdFdoaWxlKGRpZ2l0UkUpOyAvLyBzaG91bGQgcmVxdWlyZSBhdCBsZWFzdCAxXG4gICAgICB9XG4gICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICB9XG5cbiAgICBpZiAoc3ltYm9sUkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICBpZiAoY2hhciA9PT0gJy0nICYmIHNvdXJjZS5lYXQoJy0nKSlcbiAgICAgIHtcbiAgICAgICAgc291cmNlLnNraXBUb0VuZCgpO1xuICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICB9XG4gICAgICBzb3VyY2UuZWF0V2hpbGUoc3ltYm9sUkUpO1xuICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgIH1cblxuICAgIGlmIChjaGFyID09PSAnXycpXG4gICAge1xuICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgIH1cblxuICAgIHJldHVybiBcImVycm9yXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hvbXBNdWx0aUNvbW1lbnQobmVzdClcbntcbiAgaWYgKG5lc3QgPT0gMClcbiAge1xuICAgIHJldHVybiBub3JtYWwoKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc291cmNlLCBzZXRTdGF0ZSlcbiAge1xuICAgIHdoaWxlICghc291cmNlLmVvbCgpKVxuICAgIHtcbiAgICAgIHZhciBjaGFyID0gc291cmNlLm5leHQoKTtcbiAgICAgIGlmIChjaGFyID09ICd7JyAmJiBzb3VyY2UuZWF0KCctJykpXG4gICAgICB7XG4gICAgICAgICsrbmVzdDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJy0nICYmIHNvdXJjZS5lYXQoJ30nKSlcbiAgICAgIHtcbiAgICAgICAgLS1uZXN0O1xuICAgICAgICBpZiAobmVzdCA9PT0gMClcbiAgICAgICAge1xuICAgICAgICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICAgICAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNldFN0YXRlKGNob21wTXVsdGlDb21tZW50KG5lc3QpKTtcbiAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob21wTXVsdGlTdHJpbmcoc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKCFzb3VyY2UuZW9sKCkpXG4gIHtcbiAgICB2YXIgY2hhciA9IHNvdXJjZS5uZXh0KCk7XG4gICAgaWYgKGNoYXIgPT09ICdcIicgJiYgc291cmNlLmVhdCgnXCInKSAmJiBzb3VyY2UuZWF0KCdcIicpKVxuICAgIHtcbiAgICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBjaG9tcFNpbmdsZVN0cmluZyhzb3VyY2UsIHNldFN0YXRlKVxue1xuICB3aGlsZSAoc291cmNlLnNraXBUbygnXFxcXFwiJykpIHsgc291cmNlLm5leHQoKTsgc291cmNlLm5leHQoKTsgfVxuICBpZiAoc291cmNlLnNraXBUbygnXCInKSlcbiAge1xuICAgIHNvdXJjZS5uZXh0KCk7XG4gICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgIHJldHVybiAnc3RyaW5nJztcbiAgfVxuICBzb3VyY2Uuc2tpcFRvRW5kKCk7XG4gIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgcmV0dXJuICdlcnJvcic7XG59XG5cbmZ1bmN0aW9uIGNob21wQ2hhcihzb3VyY2UsIHNldFN0YXRlKVxue1xuICB3aGlsZSAoc291cmNlLnNraXBUbyhcIlxcXFwnXCIpKSB7IHNvdXJjZS5uZXh0KCk7IHNvdXJjZS5uZXh0KCk7IH1cbiAgaWYgKHNvdXJjZS5za2lwVG8oXCInXCIpKVxuICB7XG4gICAgc291cmNlLm5leHQoKTtcbiAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgcmV0dXJuICdzdHJpbmcnO1xuICB9XG4gIHNvdXJjZS5za2lwVG9FbmQoKTtcbiAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICByZXR1cm4gJ2Vycm9yJztcbn1cblxuZnVuY3Rpb24gY2hvbXBHbHNsKHNvdXJjZSwgc2V0U3RhdGUpXG57XG4gIHdoaWxlICghc291cmNlLmVvbCgpKVxuICB7XG4gICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuICAgIGlmIChjaGFyID09PSAnfCcgJiYgc291cmNlLmVhdCgnXScpKVxuICAgIHtcbiAgICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdzdHJpbmcnO1xufVxuXG52YXIgd2VsbEtub3duV29yZHMgPSB7XG4gIGNhc2U6IDEsXG4gIG9mOiAxLFxuICBhczogMSxcbiAgaWY6IDEsXG4gIHRoZW46IDEsXG4gIGVsc2U6IDEsXG4gIGxldDogMSxcbiAgICBpbjogMSxcbiAgdHlwZTogMSxcbiAgYWxpYXM6IDEsXG4gIG1vZHVsZTogMSxcbiAgd2hlcmU6IDEsXG4gIGltcG9ydDogMSxcbiAgZXhwb3Npbmc6IDEsXG4gIHBvcnQ6IDFcbn07XG5cbmV4cG9ydCBjb25zdCBlbG0gPSB7XG4gIG5hbWU6IFwiZWxtXCIsXG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uICgpICB7IHJldHVybiB7IGY6IG5vcm1hbCgpIH07IH0sXG4gIGNvcHlTdGF0ZTogIGZ1bmN0aW9uIChzKSB7IHJldHVybiB7IGY6IHMuZiB9OyB9LFxuXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIHR5cGUgPSBzdGF0ZS5mKHN0cmVhbSwgZnVuY3Rpb24ocykgeyBzdGF0ZS5mID0gczsgfSk7XG4gICAgdmFyIHdvcmQgPSBzdHJlYW0uY3VycmVudCgpO1xuICAgIHJldHVybiAod2VsbEtub3duV29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpID8gJ2tleXdvcmQnIDogdHlwZTtcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBjb21tZW50VG9rZW5zOiB7bGluZTogXCItLVwifVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9