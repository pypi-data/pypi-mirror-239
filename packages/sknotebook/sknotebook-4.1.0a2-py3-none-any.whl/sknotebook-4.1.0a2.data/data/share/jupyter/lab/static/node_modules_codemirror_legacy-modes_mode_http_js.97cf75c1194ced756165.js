"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_http_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/http.js":
/*!*************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/http.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "http": () => (/* binding */ http)
/* harmony export */ });
function failFirstLine(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return "error";
}

function start(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d/)) {
    state.cur = responseStatusCode;
    return "keyword";
  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
    state.cur = requestPath;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function responseStatusCode(stream, state) {
  var code = stream.match(/^\d+/);
  if (!code) return failFirstLine(stream, state);

  state.cur = responseStatusText;
  var status = Number(code[0]);
  if (status >= 100 && status < 400) {
    return "atom";
  } else {
    return "error";
  }
}

function responseStatusText(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return null;
}

function requestPath(stream, state) {
  stream.eatWhile(/\S/);
  state.cur = requestProtocol;
  return "string.special";
}

function requestProtocol(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d$/)) {
    state.cur = header;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function header(stream) {
  if (stream.sol() && !stream.eat(/[ \t]/)) {
    if (stream.match(/^.*?:/)) {
      return "atom";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else {
    stream.skipToEnd();
    return "string";
  }
}

function body(stream) {
  stream.skipToEnd();
  return null;
}

const http = {
  name: "http",
  token: function(stream, state) {
    var cur = state.cur;
    if (cur != header && cur != body && stream.eatSpace()) return null;
    return cur(stream, state);
  },

  blankLine: function(state) {
    state.cur = body;
  },

  startState: function() {
    return {cur: start};
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfaHR0cF9qcy45N2NmNzVjMTE5NGNlZDc1NjE2NS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxZQUFZO0FBQ1o7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBmYWlsRmlyc3RMaW5lKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICBzdGF0ZS5jdXIgPSBoZWFkZXI7XG4gIHJldHVybiBcImVycm9yXCI7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0KHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0cmVhbS5tYXRjaCgvXkhUVFBcXC9cXGRcXC5cXGQvKSkge1xuICAgIHN0YXRlLmN1ciA9IHJlc3BvbnNlU3RhdHVzQ29kZTtcbiAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eW0EtWl0rLykgJiYgL1sgXFx0XS8udGVzdChzdHJlYW0ucGVlaygpKSkge1xuICAgIHN0YXRlLmN1ciA9IHJlcXVlc3RQYXRoO1xuICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFpbEZpcnN0TGluZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNwb25zZVN0YXR1c0NvZGUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgY29kZSA9IHN0cmVhbS5tYXRjaCgvXlxcZCsvKTtcbiAgaWYgKCFjb2RlKSByZXR1cm4gZmFpbEZpcnN0TGluZShzdHJlYW0sIHN0YXRlKTtcblxuICBzdGF0ZS5jdXIgPSByZXNwb25zZVN0YXR1c1RleHQ7XG4gIHZhciBzdGF0dXMgPSBOdW1iZXIoY29kZVswXSk7XG4gIGlmIChzdGF0dXMgPj0gMTAwICYmIHN0YXR1cyA8IDQwMCkge1xuICAgIHJldHVybiBcImF0b21cIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNlU3RhdHVzVGV4dChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgc3RhdGUuY3VyID0gaGVhZGVyO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdFBhdGgoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uZWF0V2hpbGUoL1xcUy8pO1xuICBzdGF0ZS5jdXIgPSByZXF1ZXN0UHJvdG9jb2w7XG4gIHJldHVybiBcInN0cmluZy5zcGVjaWFsXCI7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RQcm90b2NvbChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0ubWF0Y2goL15IVFRQXFwvXFxkXFwuXFxkJC8pKSB7XG4gICAgc3RhdGUuY3VyID0gaGVhZGVyO1xuICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFpbEZpcnN0TGluZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoZWFkZXIoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW0uc29sKCkgJiYgIXN0cmVhbS5lYXQoL1sgXFx0XS8pKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXi4qPzovKSkge1xuICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYm9keShzdHJlYW0pIHtcbiAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IGh0dHAgPSB7XG4gIG5hbWU6IFwiaHR0cFwiLFxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBjdXIgPSBzdGF0ZS5jdXI7XG4gICAgaWYgKGN1ciAhPSBoZWFkZXIgJiYgY3VyICE9IGJvZHkgJiYgc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBjdXIoc3RyZWFtLCBzdGF0ZSk7XG4gIH0sXG5cbiAgYmxhbmtMaW5lOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHN0YXRlLmN1ciA9IGJvZHk7XG4gIH0sXG5cbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtjdXI6IHN0YXJ0fTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==