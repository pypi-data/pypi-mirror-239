"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_octave_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/octave.js":
/*!***************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/octave.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "octave": () => (/* binding */ octave)
/* harmony export */ });
function wordRegexp(words) {
  return new RegExp("^((" + words.join(")|(") + "))\\b");
}

var singleOperators = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
var singleDelimiters = new RegExp('^[\\(\\[\\{\\},:=;\\.]');
var doubleOperators = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
var doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
var tripleDelimiters = new RegExp("^((>>=)|(<<=))");
var expressionEnd = new RegExp("^[\\]\\)]");
var identifiers = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

var builtins = wordRegexp([
  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',
  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',
  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',
  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',
  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',
  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',
  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'
]);

var keywords = wordRegexp([
  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',
  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',
  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',
  'continue', 'pkg'
]);


// tokenizers
function tokenTranspose(stream, state) {
  if (!stream.sol() && stream.peek() === '\'') {
    stream.next();
    state.tokenize = tokenBase;
    return 'operator';
  }
  state.tokenize = tokenBase;
  return tokenBase(stream, state);
}


function tokenComment(stream, state) {
  if (stream.match(/^.*%}/)) {
    state.tokenize = tokenBase;
    return 'comment';
  };
  stream.skipToEnd();
  return 'comment';
}

function tokenBase(stream, state) {
  // whitespaces
  if (stream.eatSpace()) return null;

  // Handle one line Comments
  if (stream.match('%{')){
    state.tokenize = tokenComment;
    stream.skipToEnd();
    return 'comment';
  }

  if (stream.match(/^[%#]/)){
    stream.skipToEnd();
    return 'comment';
  }

  // Handle Number Literals
  if (stream.match(/^[0-9\.+-]/, false)) {
    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
      stream.tokenize = tokenBase;
      return 'number'; };
    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; };
    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; };
  }
  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };

  // Handle Strings
  var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)
  if (m) { return m[1] ? 'string' : "error"; }

  // Handle words
  if (stream.match(keywords)) { return 'keyword'; } ;
  if (stream.match(builtins)) { return 'builtin'; } ;
  if (stream.match(identifiers)) { return 'variable'; } ;

  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };
  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };

  if (stream.match(expressionEnd)) {
    state.tokenize = tokenTranspose;
    return null;
  };


  // Handle non-detected items
  stream.next();
  return 'error';
};


const octave = {
  name: "octave",

  startState: function() {
    return {
      tokenize: tokenBase
    };
  },

  token: function(stream, state) {
    var style = state.tokenize(stream, state);
    if (style === 'number' || style === 'variable'){
      state.tokenize = tokenTranspose;
    }
    return style;
  },

  languageData: {
    commentTokens: {line: "%"}
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfb2N0YXZlX2pzLjdjYTk2MzVmZDBmYzRiMTRlODgyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEMsR0FBRyxJQUFJO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSwyREFBMkQ7QUFDM0Q7QUFDQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0EsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxtQ0FBbUM7O0FBRW5DLHdFQUF3RTtBQUN4RSw0R0FBNEc7O0FBRTVHO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9vY3RhdmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd29yZFJlZ2V4cCh3b3Jkcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oKFwiICsgd29yZHMuam9pbihcIil8KFwiKSArIFwiKSlcXFxcYlwiKTtcbn1cblxudmFyIHNpbmdsZU9wZXJhdG9ycyA9IG5ldyBSZWdFeHAoXCJeW1xcXFwrXFxcXC1cXFxcKi8mfFxcXFxefjw+IUAnXFxcXFxcXFxdXCIpO1xudmFyIHNpbmdsZURlbGltaXRlcnMgPSBuZXcgUmVnRXhwKCdeW1xcXFwoXFxcXFtcXFxce1xcXFx9LDo9O1xcXFwuXScpO1xudmFyIGRvdWJsZU9wZXJhdG9ycyA9IG5ldyBSZWdFeHAoXCJeKCg9PSl8KH49KXwoPD0pfCg+PSl8KDw8KXwoPj4pfChcXFxcLltcXFxcK1xcXFwtXFxcXCovXFxcXF5cXFxcXFxcXF0pKVwiKTtcbnZhciBkb3VibGVEZWxpbWl0ZXJzID0gbmV3IFJlZ0V4cChcIl4oKCE9KXwoXFxcXCs9KXwoXFxcXC09KXwoXFxcXCo9KXwoLz0pfCgmPSl8KFxcXFx8PSl8KFxcXFxePSkpXCIpO1xudmFyIHRyaXBsZURlbGltaXRlcnMgPSBuZXcgUmVnRXhwKFwiXigoPj49KXwoPDw9KSlcIik7XG52YXIgZXhwcmVzc2lvbkVuZCA9IG5ldyBSZWdFeHAoXCJeW1xcXFxdXFxcXCldXCIpO1xudmFyIGlkZW50aWZpZXJzID0gbmV3IFJlZ0V4cChcIl5bX0EtWmEtelxceGExLVxcdWZmZmZdW19BLVphLXowLTlcXHhhMS1cXHVmZmZmXSpcIik7XG5cbnZhciBidWlsdGlucyA9IHdvcmRSZWdleHAoW1xuICAnZXJyb3InLCAnZXZhbCcsICdmdW5jdGlvbicsICdhYnMnLCAnYWNvcycsICdhdGFuJywgJ2FzaW4nLCAnY29zJyxcbiAgJ2Nvc2gnLCAnZXhwJywgJ2xvZycsICdwcm9kJywgJ3N1bScsICdsb2cxMCcsICdtYXgnLCAnbWluJywgJ3NpZ24nLCAnc2luJywgJ3NpbmgnLFxuICAnc3FydCcsICd0YW4nLCAncmVzaGFwZScsICdicmVhaycsICd6ZXJvcycsICdkZWZhdWx0JywgJ21hcmdpbicsICdyb3VuZCcsICdvbmVzJyxcbiAgJ3JhbmQnLCAnc3luJywgJ2NlaWwnLCAnZmxvb3InLCAnc2l6ZScsICdjbGVhcicsICd6ZXJvcycsICdleWUnLCAnbWVhbicsICdzdGQnLCAnY292JyxcbiAgJ2RldCcsICdlaWcnLCAnaW52JywgJ25vcm0nLCAncmFuaycsICd0cmFjZScsICdleHBtJywgJ2xvZ20nLCAnc3FydG0nLCAnbGluc3BhY2UnLCAncGxvdCcsXG4gICd0aXRsZScsICd4bGFiZWwnLCAneWxhYmVsJywgJ2xlZ2VuZCcsICd0ZXh0JywgJ2dyaWQnLCAnbWVzaGdyaWQnLCAnbWVzaCcsICdudW0yc3RyJyxcbiAgJ2ZmdCcsICdpZmZ0JywgJ2FycmF5ZnVuJywgJ2NlbGxmdW4nLCAnaW5wdXQnLCAnZmxpcGxyJywgJ2ZsaXB1ZCcsICdpc21lbWJlcidcbl0pO1xuXG52YXIga2V5d29yZHMgPSB3b3JkUmVnZXhwKFtcbiAgJ3JldHVybicsICdjYXNlJywgJ3N3aXRjaCcsICdlbHNlJywgJ2Vsc2VpZicsICdlbmQnLCAnZW5kaWYnLCAnZW5kZnVuY3Rpb24nLFxuICAnaWYnLCAnb3RoZXJ3aXNlJywgJ2RvJywgJ2ZvcicsICd3aGlsZScsICd0cnknLCAnY2F0Y2gnLCAnY2xhc3NkZWYnLCAncHJvcGVydGllcycsICdldmVudHMnLFxuICAnbWV0aG9kcycsICdnbG9iYWwnLCAncGVyc2lzdGVudCcsICdlbmRmb3InLCAnZW5kd2hpbGUnLCAncHJpbnRmJywgJ3NwcmludGYnLCAnZGlzcCcsICd1bnRpbCcsXG4gICdjb250aW51ZScsICdwa2cnXG5dKTtcblxuXG4vLyB0b2tlbml6ZXJzXG5mdW5jdGlvbiB0b2tlblRyYW5zcG9zZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RyZWFtLnNvbCgpICYmIHN0cmVhbS5wZWVrKCkgPT09ICdcXCcnKSB7XG4gICAgc3RyZWFtLm5leHQoKTtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICByZXR1cm4gJ29wZXJhdG9yJztcbiAgfVxuICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgcmV0dXJuIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuXG5mdW5jdGlvbiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLm1hdGNoKC9eLiolfS8pKSB7XG4gICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfTtcbiAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICByZXR1cm4gJ2NvbW1lbnQnO1xufVxuXG5mdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkge1xuICAvLyB3aGl0ZXNwYWNlc1xuICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuXG4gIC8vIEhhbmRsZSBvbmUgbGluZSBDb21tZW50c1xuICBpZiAoc3RyZWFtLm1hdGNoKCcleycpKXtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ29tbWVudDtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfVxuXG4gIGlmIChzdHJlYW0ubWF0Y2goL15bJSNdLykpe1xuICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICB9XG5cbiAgLy8gSGFuZGxlIE51bWJlciBMaXRlcmFsc1xuICBpZiAoc3RyZWFtLm1hdGNoKC9eWzAtOVxcListXS8sIGZhbHNlKSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL15bKy1dPzB4WzAtOWEtZkEtRl0rW2lqXT8vKSkge1xuICAgICAgc3RyZWFtLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgcmV0dXJuICdudW1iZXInOyB9O1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL15bKy1dP1xcZCpcXC5cXGQrKFtFZURkXVsrLV0/XFxkKyk/W2lqXT8vKSkgeyByZXR1cm4gJ251bWJlcic7IH07XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXlsrLV0/XFxkKyhbRWVEZF1bKy1dP1xcZCspP1tpal0/LykpIHsgcmV0dXJuICdudW1iZXInOyB9O1xuICB9XG4gIGlmIChzdHJlYW0ubWF0Y2god29yZFJlZ2V4cChbJ25hbicsJ05hTicsJ2luZicsJ0luZiddKSkpIHsgcmV0dXJuICdudW1iZXInOyB9O1xuXG4gIC8vIEhhbmRsZSBTdHJpbmdzXG4gIHZhciBtID0gc3RyZWFtLm1hdGNoKC9eXCIoPzpbXlwiXXxcIlwiKSooXCJ8JCkvKSB8fCBzdHJlYW0ubWF0Y2goL14nKD86W14nXXwnJykqKCd8JCkvKVxuICBpZiAobSkgeyByZXR1cm4gbVsxXSA/ICdzdHJpbmcnIDogXCJlcnJvclwiOyB9XG5cbiAgLy8gSGFuZGxlIHdvcmRzXG4gIGlmIChzdHJlYW0ubWF0Y2goa2V5d29yZHMpKSB7IHJldHVybiAna2V5d29yZCc7IH0gO1xuICBpZiAoc3RyZWFtLm1hdGNoKGJ1aWx0aW5zKSkgeyByZXR1cm4gJ2J1aWx0aW4nOyB9IDtcbiAgaWYgKHN0cmVhbS5tYXRjaChpZGVudGlmaWVycykpIHsgcmV0dXJuICd2YXJpYWJsZSc7IH0gO1xuXG4gIGlmIChzdHJlYW0ubWF0Y2goc2luZ2xlT3BlcmF0b3JzKSB8fCBzdHJlYW0ubWF0Y2goZG91YmxlT3BlcmF0b3JzKSkgeyByZXR1cm4gJ29wZXJhdG9yJzsgfTtcbiAgaWYgKHN0cmVhbS5tYXRjaChzaW5nbGVEZWxpbWl0ZXJzKSB8fCBzdHJlYW0ubWF0Y2goZG91YmxlRGVsaW1pdGVycykgfHwgc3RyZWFtLm1hdGNoKHRyaXBsZURlbGltaXRlcnMpKSB7IHJldHVybiBudWxsOyB9O1xuXG4gIGlmIChzdHJlYW0ubWF0Y2goZXhwcmVzc2lvbkVuZCkpIHtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuVHJhbnNwb3NlO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG5cbiAgLy8gSGFuZGxlIG5vbi1kZXRlY3RlZCBpdGVtc1xuICBzdHJlYW0ubmV4dCgpO1xuICByZXR1cm4gJ2Vycm9yJztcbn07XG5cblxuZXhwb3J0IGNvbnN0IG9jdGF2ZSA9IHtcbiAgbmFtZTogXCJvY3RhdmVcIixcblxuICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5pemU6IHRva2VuQmFzZVxuICAgIH07XG4gIH0sXG5cbiAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3R5bGUgPT09ICdudW1iZXInIHx8IHN0eWxlID09PSAndmFyaWFibGUnKXtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5UcmFuc3Bvc2U7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBjb21tZW50VG9rZW5zOiB7bGluZTogXCIlXCJ9XG4gIH1cbn07XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==