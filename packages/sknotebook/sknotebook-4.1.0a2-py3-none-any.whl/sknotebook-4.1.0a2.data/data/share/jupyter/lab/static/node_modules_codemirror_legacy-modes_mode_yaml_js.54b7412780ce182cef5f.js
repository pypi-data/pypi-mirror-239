"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_yaml_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/yaml.js":
/*!*************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/yaml.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "yaml": () => (/* binding */ yaml)
/* harmony export */ });
var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];
var keywordRegex = new RegExp("\\b(("+cons.join(")|(")+"))$", 'i');

const yaml = {
  name: "yaml",
  token: function(stream, state) {
    var ch = stream.peek();
    var esc = state.escaped;
    state.escaped = false;
    /* comments */
    if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
      stream.skipToEnd();
      return "comment";
    }

    if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
      return "string";

    if (state.literal && stream.indentation() > state.keyCol) {
      stream.skipToEnd(); return "string";
    } else if (state.literal) { state.literal = false; }
    if (stream.sol()) {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      /* document start */
      if(stream.match('---')) { return "def"; }
      /* document end */
      if (stream.match('...')) { return "def"; }
      /* array list item */
      if (stream.match(/^\s*-\s+/)) { return 'meta'; }
    }
    /* inline pairs/lists */
    if (stream.match(/^(\{|\}|\[|\])/)) {
      if (ch == '{')
        state.inlinePairs++;
      else if (ch == '}')
        state.inlinePairs--;
      else if (ch == '[')
        state.inlineList++;
      else
        state.inlineList--;
      return 'meta';
    }

    /* list separator */
    if (state.inlineList > 0 && !esc && ch == ',') {
      stream.next();
      return 'meta';
    }
    /* pairs separator */
    if (state.inlinePairs > 0 && !esc && ch == ',') {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      stream.next();
      return 'meta';
    }

    /* start of value of a pair */
    if (state.pairStart) {
      /* block literals */
      if (stream.match(/^\s*(\||\>)\s*/)) { state.literal = true; return 'meta'; };
      /* references */
      if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) { return 'variable'; }
      /* numbers */
      if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) { return 'number'; }
      if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) { return 'number'; }
      /* keywords */
      if (stream.match(keywordRegex)) { return 'keyword'; }
    }

    /* pairs (associative arrays) -> key */
    if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
      state.pair = true;
      state.keyCol = stream.indentation();
      return "atom";
    }
    if (state.pair && stream.match(/^:\s*/)) { state.pairStart = true; return 'meta'; }

    /* nothing found, continue */
    state.pairStart = false;
    state.escaped = (ch == '\\');
    stream.next();
    return null;
  },
  startState: function() {
    return {
      pair: false,
      pairStart: false,
      keyCol: 0,
      inlinePairs: 0,
      inlineList: 0,
      literal: false,
      escaped: false
    };
  },
  languageData: {
    commentTokens: {line: "#"}
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfeWFtbF9qcy41NGI3NDEyNzgwY2UxODJjZWY1Zi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUIsTUFBTSwwQkFBMEI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLGlDQUFpQztBQUNqQztBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsMEJBQTBCLEdBQUc7QUFDN0Isa0JBQWtCO0FBQ2xCO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxzQkFBc0I7QUFDbEU7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQSw0RUFBNEU7QUFDNUUsMkVBQTJFLFFBQVE7QUFDbkY7QUFDQSx3Q0FBd0M7QUFDeEM7O0FBRUE7QUFDQSxvREFBb0QsNkJBQTZCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHdCQUF3Qjs7QUFFdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS95YW1sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb25zID0gWyd0cnVlJywgJ2ZhbHNlJywgJ29uJywgJ29mZicsICd5ZXMnLCAnbm8nXTtcbnZhciBrZXl3b3JkUmVnZXggPSBuZXcgUmVnRXhwKFwiXFxcXGIoKFwiK2NvbnMuam9pbihcIil8KFwiKStcIikpJFwiLCAnaScpO1xuXG5leHBvcnQgY29uc3QgeWFtbCA9IHtcbiAgbmFtZTogXCJ5YW1sXCIsXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RyZWFtLnBlZWsoKTtcbiAgICB2YXIgZXNjID0gc3RhdGUuZXNjYXBlZDtcbiAgICBzdGF0ZS5lc2NhcGVkID0gZmFsc2U7XG4gICAgLyogY29tbWVudHMgKi9cbiAgICBpZiAoY2ggPT0gXCIjXCIgJiYgKHN0cmVhbS5wb3MgPT0gMCB8fCAvXFxzLy50ZXN0KHN0cmVhbS5zdHJpbmcuY2hhckF0KHN0cmVhbS5wb3MgLSAxKSkpKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXignKFteJ118XFxcXC4pKic/fFwiKFteXCJdfFxcXFwuKSpcIj8pLykpXG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcblxuICAgIGlmIChzdGF0ZS5saXRlcmFsICYmIHN0cmVhbS5pbmRlbnRhdGlvbigpID4gc3RhdGUua2V5Q29sKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7IHJldHVybiBcInN0cmluZ1wiO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUubGl0ZXJhbCkgeyBzdGF0ZS5saXRlcmFsID0gZmFsc2U7IH1cbiAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICBzdGF0ZS5rZXlDb2wgPSAwO1xuICAgICAgc3RhdGUucGFpciA9IGZhbHNlO1xuICAgICAgc3RhdGUucGFpclN0YXJ0ID0gZmFsc2U7XG4gICAgICAvKiBkb2N1bWVudCBzdGFydCAqL1xuICAgICAgaWYoc3RyZWFtLm1hdGNoKCctLS0nKSkgeyByZXR1cm4gXCJkZWZcIjsgfVxuICAgICAgLyogZG9jdW1lbnQgZW5kICovXG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKCcuLi4nKSkgeyByZXR1cm4gXCJkZWZcIjsgfVxuICAgICAgLyogYXJyYXkgbGlzdCBpdGVtICovXG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFxzKi1cXHMrLykpIHsgcmV0dXJuICdtZXRhJzsgfVxuICAgIH1cbiAgICAvKiBpbmxpbmUgcGFpcnMvbGlzdHMgKi9cbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eKFxce3xcXH18XFxbfFxcXSkvKSkge1xuICAgICAgaWYgKGNoID09ICd7JylcbiAgICAgICAgc3RhdGUuaW5saW5lUGFpcnMrKztcbiAgICAgIGVsc2UgaWYgKGNoID09ICd9JylcbiAgICAgICAgc3RhdGUuaW5saW5lUGFpcnMtLTtcbiAgICAgIGVsc2UgaWYgKGNoID09ICdbJylcbiAgICAgICAgc3RhdGUuaW5saW5lTGlzdCsrO1xuICAgICAgZWxzZVxuICAgICAgICBzdGF0ZS5pbmxpbmVMaXN0LS07XG4gICAgICByZXR1cm4gJ21ldGEnO1xuICAgIH1cblxuICAgIC8qIGxpc3Qgc2VwYXJhdG9yICovXG4gICAgaWYgKHN0YXRlLmlubGluZUxpc3QgPiAwICYmICFlc2MgJiYgY2ggPT0gJywnKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuICdtZXRhJztcbiAgICB9XG4gICAgLyogcGFpcnMgc2VwYXJhdG9yICovXG4gICAgaWYgKHN0YXRlLmlubGluZVBhaXJzID4gMCAmJiAhZXNjICYmIGNoID09ICcsJykge1xuICAgICAgc3RhdGUua2V5Q29sID0gMDtcbiAgICAgIHN0YXRlLnBhaXIgPSBmYWxzZTtcbiAgICAgIHN0YXRlLnBhaXJTdGFydCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHJldHVybiAnbWV0YSc7XG4gICAgfVxuXG4gICAgLyogc3RhcnQgb2YgdmFsdWUgb2YgYSBwYWlyICovXG4gICAgaWYgKHN0YXRlLnBhaXJTdGFydCkge1xuICAgICAgLyogYmxvY2sgbGl0ZXJhbHMgKi9cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXHMqKFxcfHxcXD4pXFxzKi8pKSB7IHN0YXRlLmxpdGVyYWwgPSB0cnVlOyByZXR1cm4gJ21ldGEnOyB9O1xuICAgICAgLyogcmVmZXJlbmNlcyAqL1xuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXlxccyooXFwmfFxcKilbYS16MC05XFwuXy1dK1xcYi9pKSkgeyByZXR1cm4gJ3ZhcmlhYmxlJzsgfVxuICAgICAgLyogbnVtYmVycyAqL1xuICAgICAgaWYgKHN0YXRlLmlubGluZVBhaXJzID09IDAgJiYgc3RyZWFtLm1hdGNoKC9eXFxzKi0/WzAtOVxcLlxcLF0rXFxzPyQvKSkgeyByZXR1cm4gJ251bWJlcic7IH1cbiAgICAgIGlmIChzdGF0ZS5pbmxpbmVQYWlycyA+IDAgJiYgc3RyZWFtLm1hdGNoKC9eXFxzKi0/WzAtOVxcLlxcLF0rXFxzPyg/PSgsfH0pKS8pKSB7IHJldHVybiAnbnVtYmVyJzsgfVxuICAgICAgLyoga2V5d29yZHMgKi9cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goa2V5d29yZFJlZ2V4KSkgeyByZXR1cm4gJ2tleXdvcmQnOyB9XG4gICAgfVxuXG4gICAgLyogcGFpcnMgKGFzc29jaWF0aXZlIGFycmF5cykgLT4ga2V5ICovXG4gICAgaWYgKCFzdGF0ZS5wYWlyICYmIHN0cmVhbS5tYXRjaCgvXlxccyooPzpbLFxcW1xcXXt9JiohfD4nXCIlQGBdW15cXHMnXCI6XXxbXixcXFtcXF17fSMmKiF8PidcIiVAYF0pW14jXSo/KD89XFxzKjooJHxcXHMpKS8pKSB7XG4gICAgICBzdGF0ZS5wYWlyID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmtleUNvbCA9IHN0cmVhbS5pbmRlbnRhdGlvbigpO1xuICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgIH1cbiAgICBpZiAoc3RhdGUucGFpciAmJiBzdHJlYW0ubWF0Y2goL146XFxzKi8pKSB7IHN0YXRlLnBhaXJTdGFydCA9IHRydWU7IHJldHVybiAnbWV0YSc7IH1cblxuICAgIC8qIG5vdGhpbmcgZm91bmQsIGNvbnRpbnVlICovXG4gICAgc3RhdGUucGFpclN0YXJ0ID0gZmFsc2U7XG4gICAgc3RhdGUuZXNjYXBlZCA9IChjaCA9PSAnXFxcXCcpO1xuICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYWlyOiBmYWxzZSxcbiAgICAgIHBhaXJTdGFydDogZmFsc2UsXG4gICAgICBrZXlDb2w6IDAsXG4gICAgICBpbmxpbmVQYWlyczogMCxcbiAgICAgIGlubGluZUxpc3Q6IDAsXG4gICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgIGVzY2FwZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgbGFuZ3VhZ2VEYXRhOiB7XG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiI1wifVxuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9