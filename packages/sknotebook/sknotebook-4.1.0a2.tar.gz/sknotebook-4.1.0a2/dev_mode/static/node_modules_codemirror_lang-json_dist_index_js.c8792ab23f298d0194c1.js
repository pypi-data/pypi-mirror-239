"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_lang-json_dist_index_js"],{

/***/ "../node_modules/@codemirror/lang-json/dist/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@codemirror/lang-json/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json),
/* harmony export */   "jsonLanguage": () => (/* binding */ jsonLanguage),
/* harmony export */   "jsonParseLinter": () => (/* binding */ jsonParseLinter)
/* harmony export */ });
/* harmony import */ var _lezer_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/json */ "../node_modules/@lezer/json/dist/index.es.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/language */ "webpack/sharing/consume/default/@codemirror/language/@codemirror/language");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__);



/**
Calls
[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
on the document and, if that throws an error, reports it as a
single diagnostic.
*/
const jsonParseLinter = () => (view) => {
    try {
        JSON.parse(view.state.doc.toString());
    }
    catch (e) {
        if (!(e instanceof SyntaxError))
            throw e;
        const pos = getErrorPosition(e, view.state.doc);
        return [{
                from: pos,
                message: e.message,
                severity: 'error',
                to: pos
            }];
    }
    return [];
};
function getErrorPosition(error, doc) {
    let m;
    if (m = error.message.match(/at position (\d+)/))
        return Math.min(+m[1], doc.length);
    if (m = error.message.match(/at line (\d+) column (\d+)/))
        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
    return 0;
}

/**
A language provider that provides JSON parsing.
*/
const jsonLanguage = /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.LRLanguage.define({
    name: "json",
    parser: /*@__PURE__*/_lezer_json__WEBPACK_IMPORTED_MODULE_0__.parser.configure({
        props: [
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.indentNodeProp.add({
                Object: /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.continuedIndent)({ except: /^\s*\}/ }),
                Array: /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.continuedIndent)({ except: /^\s*\]/ })
            }),
            /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__.foldNodeProp.add({
                "Object Array": _codemirror_language__WEBPACK_IMPORTED_MODULE_1__.foldInside
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["[", "{", '"'] },
        indentOnInput: /^\s*[\}\]]$/
    }
});
/**
JSON language support.
*/
function json() {
    return new _codemirror_language__WEBPACK_IMPORTED_MODULE_1__.LanguageSupport(jsonLanguage);
}




/***/ }),

/***/ "../node_modules/@lezer/json/dist/index.es.js":
/*!****************************************************!*\
  !*** ../node_modules/@lezer/json/dist/index.es.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parser": () => (/* binding */ parser)
/* harmony export */ });
/* harmony import */ var _lezer_lr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lezer/lr */ "../node_modules/@lezer/lr/dist/index.js");
/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lezer/highlight */ "webpack/sharing/consume/default/@lezer/highlight/@lezer/highlight");
/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__);



const jsonHighlighting = (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.styleTags)({
  String: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.string,
  Number: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.number,
  "True False": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.bool,
  PropertyName: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName,
  Null: _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags["null"],
  ",": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.separator,
  "[ ]": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.squareBracket,
  "{ }": _lezer_highlight__WEBPACK_IMPORTED_MODULE_1__.tags.brace
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = _lezer_lr__WEBPACK_IMPORTED_MODULE_0__.LRParser.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "âš  JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7,"{",12,"["],
    ["closedBy", 8,"}",13,"]"]
  ],
  propSources: [jsonHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
  tokenizers: [0],
  topRules: {"JsonText":[0,1]},
  tokenPrec: 0
});




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGFuZy1qc29uX2Rpc3RfaW5kZXhfanMuYzg3OTJhYjIzZjI5OGQwMTk0YzEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ3lGOztBQUU5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxtRUFBaUI7QUFDbkQ7QUFDQSx5QkFBeUIseURBQWdCO0FBQ3pDO0FBQ0EseUJBQXlCLG9FQUFrQjtBQUMzQyxxQ0FBcUMscUVBQWUsR0FBRyxlQUFlLEdBQUc7QUFDekUsb0NBQW9DLHFFQUFlLEdBQUcsa0JBQWtCO0FBQ3hFLGFBQWE7QUFDYix5QkFBeUIsa0VBQWdCO0FBQ3pDLGdDQUFnQyw0REFBVTtBQUMxQyxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5QkFBeUIsa0JBQWtCLFNBQVM7QUFDcEQsK0JBQStCO0FBQy9CO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRUFBZTtBQUM5Qjs7QUFFK0M7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9EVjtBQUNjOztBQUVuRCx5QkFBeUIsMkRBQVM7QUFDbEMsVUFBVSx5REFBVztBQUNyQixVQUFVLHlEQUFXO0FBQ3JCLGdCQUFnQix1REFBUztBQUN6QixnQkFBZ0IsK0RBQWlCO0FBQ2pDLFFBQVEsMERBQVM7QUFDakIsT0FBTyw0REFBYztBQUNyQixTQUFTLGdFQUFrQjtBQUMzQixNQUFNLEdBQUcsd0RBQVU7QUFDbkIsQ0FBQzs7QUFFRDtBQUNBLGVBQWUsMkRBQW9CO0FBQ25DO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0EsNEJBQTRCO0FBQzVCLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxHQUFHLHdCQUF3Qiw0QkFBNEIsNlJBQTZSLElBQUksVUFBVSxVQUFVLFlBQVksMERBQTBELHFFQUFxRTtBQUNoaUI7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBLENBQUM7O0FBRWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sYW5nLWpzb24vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL0BsZXplci9qc29uL2Rpc3QvaW5kZXguZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VyIH0gZnJvbSAnQGxlemVyL2pzb24nO1xuaW1wb3J0IHsgTFJMYW5ndWFnZSwgaW5kZW50Tm9kZVByb3AsIGNvbnRpbnVlZEluZGVudCwgZm9sZE5vZGVQcm9wLCBmb2xkSW5zaWRlLCBMYW5ndWFnZVN1cHBvcnQgfSBmcm9tICdAY29kZW1pcnJvci9sYW5ndWFnZSc7XG5cbi8qKlxuQ2FsbHNcbltgSlNPTi5wYXJzZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vcGFyc2UpXG5vbiB0aGUgZG9jdW1lbnQgYW5kLCBpZiB0aGF0IHRocm93cyBhbiBlcnJvciwgcmVwb3J0cyBpdCBhcyBhXG5zaW5nbGUgZGlhZ25vc3RpYy5cbiovXG5jb25zdCBqc29uUGFyc2VMaW50ZXIgPSAoKSA9PiAodmlldykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2Uodmlldy5zdGF0ZS5kb2MudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikpXG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICBjb25zdCBwb3MgPSBnZXRFcnJvclBvc2l0aW9uKGUsIHZpZXcuc3RhdGUuZG9jKTtcbiAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgZnJvbTogcG9zLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzZXZlcml0eTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICB0bzogcG9zXG4gICAgICAgICAgICB9XTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufTtcbmZ1bmN0aW9uIGdldEVycm9yUG9zaXRpb24oZXJyb3IsIGRvYykge1xuICAgIGxldCBtO1xuICAgIGlmIChtID0gZXJyb3IubWVzc2FnZS5tYXRjaCgvYXQgcG9zaXRpb24gKFxcZCspLykpXG4gICAgICAgIHJldHVybiBNYXRoLm1pbigrbVsxXSwgZG9jLmxlbmd0aCk7XG4gICAgaWYgKG0gPSBlcnJvci5tZXNzYWdlLm1hdGNoKC9hdCBsaW5lIChcXGQrKSBjb2x1bW4gKFxcZCspLykpXG4gICAgICAgIHJldHVybiBNYXRoLm1pbihkb2MubGluZSgrbVsxXSkuZnJvbSArICgrbVsyXSkgLSAxLCBkb2MubGVuZ3RoKTtcbiAgICByZXR1cm4gMDtcbn1cblxuLyoqXG5BIGxhbmd1YWdlIHByb3ZpZGVyIHRoYXQgcHJvdmlkZXMgSlNPTiBwYXJzaW5nLlxuKi9cbmNvbnN0IGpzb25MYW5ndWFnZSA9IC8qQF9fUFVSRV9fKi9MUkxhbmd1YWdlLmRlZmluZSh7XG4gICAgbmFtZTogXCJqc29uXCIsXG4gICAgcGFyc2VyOiAvKkBfX1BVUkVfXyovcGFyc2VyLmNvbmZpZ3VyZSh7XG4gICAgICAgIHByb3BzOiBbXG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovaW5kZW50Tm9kZVByb3AuYWRkKHtcbiAgICAgICAgICAgICAgICBPYmplY3Q6IC8qQF9fUFVSRV9fKi9jb250aW51ZWRJbmRlbnQoeyBleGNlcHQ6IC9eXFxzKlxcfS8gfSksXG4gICAgICAgICAgICAgICAgQXJyYXk6IC8qQF9fUFVSRV9fKi9jb250aW51ZWRJbmRlbnQoeyBleGNlcHQ6IC9eXFxzKlxcXS8gfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLypAX19QVVJFX18qL2ZvbGROb2RlUHJvcC5hZGQoe1xuICAgICAgICAgICAgICAgIFwiT2JqZWN0IEFycmF5XCI6IGZvbGRJbnNpZGVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICB9KSxcbiAgICBsYW5ndWFnZURhdGE6IHtcbiAgICAgICAgY2xvc2VCcmFja2V0czogeyBicmFja2V0czogW1wiW1wiLCBcIntcIiwgJ1wiJ10gfSxcbiAgICAgICAgaW5kZW50T25JbnB1dDogL15cXHMqW1xcfVxcXV0kL1xuICAgIH1cbn0pO1xuLyoqXG5KU09OIGxhbmd1YWdlIHN1cHBvcnQuXG4qL1xuZnVuY3Rpb24ganNvbigpIHtcbiAgICByZXR1cm4gbmV3IExhbmd1YWdlU3VwcG9ydChqc29uTGFuZ3VhZ2UpO1xufVxuXG5leHBvcnQgeyBqc29uLCBqc29uTGFuZ3VhZ2UsIGpzb25QYXJzZUxpbnRlciB9O1xuIiwiaW1wb3J0IHsgTFJQYXJzZXIgfSBmcm9tICdAbGV6ZXIvbHInO1xuaW1wb3J0IHsgc3R5bGVUYWdzLCB0YWdzIH0gZnJvbSAnQGxlemVyL2hpZ2hsaWdodCc7XG5cbmNvbnN0IGpzb25IaWdobGlnaHRpbmcgPSBzdHlsZVRhZ3Moe1xuICBTdHJpbmc6IHRhZ3Muc3RyaW5nLFxuICBOdW1iZXI6IHRhZ3MubnVtYmVyLFxuICBcIlRydWUgRmFsc2VcIjogdGFncy5ib29sLFxuICBQcm9wZXJ0eU5hbWU6IHRhZ3MucHJvcGVydHlOYW1lLFxuICBOdWxsOiB0YWdzLm51bGwsXG4gIFwiLFwiOiB0YWdzLnNlcGFyYXRvcixcbiAgXCJbIF1cIjogdGFncy5zcXVhcmVCcmFja2V0LFxuICBcInsgfVwiOiB0YWdzLmJyYWNlXG59KTtcblxuLy8gVGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgbGV6ZXItZ2VuZXJhdG9yLiBZb3UgcHJvYmFibHkgc2hvdWxkbid0IGVkaXQgaXQuXG5jb25zdCBwYXJzZXIgPSBMUlBhcnNlci5kZXNlcmlhbGl6ZSh7XG4gIHZlcnNpb246IDE0LFxuICBzdGF0ZXM6IFwiJGJPVlFQT09PT1FPJyNDYicjQ2JPblFQTycjQ2VPdlFQTycjQ2pPT1FPJyNDcCcjQ3BRT1FQT09PT1FPJyNDZycjQ2dPfVFQTycjQ2ZPIVNRUE8nI0NyT09RTyw1OVAsNTlQTyFbUVBPLDU5UE8hYVFQTycjQ3VPT1FPLDU5VSw1OVVPIWlRUE8sNTlVT1ZRUE8sNTlRT3FRUE8nI0NrTyFuUVBPLDU5Xk9PUU8xRy5rMUcua09WUVBPJyNDbE8hdlFQTyw1OWFPT1FPMUcucDFHLnBPT1FPMUcubDFHLmxPT1FPLDU5Viw1OVZPT1FPLUU2aS1FNmlPT1FPLDU5Vyw1OVdPT1FPLUU2ai1FNmpcIixcbiAgc3RhdGVEYXRhOiBcIiNPfk9jT1N+T1FTT1JTT1NTT1RTT1dRT11ST2VQT35PVlhPZVVPfk9bW09+UFZPZ15Pfk9oX09WZlh+T1ZhT35PaGJPW2lYfk9bZE9+T2hfT1ZmYX5PaGJPW2lhfk9cIixcbiAgZ290bzogXCIha2pQUFBQUFBrUFBrcXdQUGt7IVJQUFAhWFAhZVBQIWhYU09SXmJRV1FSZl9UVlFfUWBXUmdgUWNaUmljUVRPUVpSUWVeUmhiUllRUl1SXCIsXG4gIG5vZGVOYW1lczogXCLimqAgSnNvblRleHQgVHJ1ZSBGYWxzZSBOdWxsIE51bWJlciBTdHJpbmcgfSB7IE9iamVjdCBQcm9wZXJ0eSBQcm9wZXJ0eU5hbWUgXSBbIEFycmF5XCIsXG4gIG1heFRlcm06IDI1LFxuICBub2RlUHJvcHM6IFtcbiAgICBbXCJvcGVuZWRCeVwiLCA3LFwie1wiLDEyLFwiW1wiXSxcbiAgICBbXCJjbG9zZWRCeVwiLCA4LFwifVwiLDEzLFwiXVwiXVxuICBdLFxuICBwcm9wU291cmNlczogW2pzb25IaWdobGlnaHRpbmddLFxuICBza2lwcGVkTm9kZXM6IFswXSxcbiAgcmVwZWF0Tm9kZUNvdW50OiAyLFxuICB0b2tlbkRhdGE6IFwiKHB+UmFYWSFXWVohV11eIVdwcSFXcnMhXXx9JGl9IU8kbiFRIVIkdyFSIVsmViFbIV0maCF9I08mbSNQI1EmciNZI1omdyNiI2MnZiNoI2knfSNvI3AoZiNxI3Ioa34hXU9jfn4hYFVwcSFdcXIhXXJzIXJzI08hXSNPI1AhdyNQfiFdfiF3T2V+fiF6WHJzIV0hUCFRIV0jTyNQIV0jVSNWIV0jWSNaIV0jYiNjIV0jZiNnIV0jaCNpIV0jaSNqI2d+I2pSIVEhWyNzIWMhaSNzI1QjWiNzfiN2UiFRIVskUCFjIWkkUCNUI1okUH4kU1IhUSFbJF0hYyFpJF0jVCNaJF1+JGBSIVEhWyFdIWMhaSFdI1QjWiFdfiRuT2h+fiRxUSFRIVIkdyFSIVsmVn4kfFJUfiFPIVAlViFnIWglayNYI1kla34lWVAhUSFbJV1+JWJSVH4hUSFbJV0hZyFoJWsjWCNZJWt+JW5Se3wld30hTyV3IVEhWyV9fiV6UCFRIVslfX4mU1BUfiFRIVslfX4mW1NUfiFPIVAlViFRIVsmViFnIWglayNYI1kla34mbU9nfn4mck9dfn4md09bfn4melAjVCNVJn1+J1FQI2AjYSdUfidXUCNnI2gnWn4nXlAjWCNZJ2F+J2ZPUn5+J2lQI2kjaidsfidvUCNgI2Encn4ndVAjYCNhJ3h+J31PU35+KFFQI2YjZyhUfihXUCNpI2ooWn4oXlAjWCNZKGF+KGZPUX5+KGtPV35+KHBPVn5cIixcbiAgdG9rZW5pemVyczogWzBdLFxuICB0b3BSdWxlczoge1wiSnNvblRleHRcIjpbMCwxXX0sXG4gIHRva2VuUHJlYzogMFxufSk7XG5cbmV4cG9ydCB7IHBhcnNlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9