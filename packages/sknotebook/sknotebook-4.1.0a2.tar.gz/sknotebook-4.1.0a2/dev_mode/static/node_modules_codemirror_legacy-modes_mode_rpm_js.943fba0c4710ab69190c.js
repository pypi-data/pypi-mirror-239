"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_rpm_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/rpm.js":
/*!************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/rpm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rpmChanges": () => (/* binding */ rpmChanges),
/* harmony export */   "rpmSpec": () => (/* binding */ rpmSpec)
/* harmony export */ });
var headerSeparator = /^-+$/;
var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
var simpleEmail = /^[\w+.-]+@[\w.-]+/;

const rpmChanges = {
  name: "rpmchanges",
  token: function(stream) {
    if (stream.sol()) {
      if (stream.match(headerSeparator)) { return 'tag'; }
      if (stream.match(headerLine)) { return 'tag'; }
    }
    if (stream.match(simpleEmail)) { return 'string'; }
    stream.next();
    return null;
  }
}

// Quick and dirty spec file highlighting

var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;

var preamble = /^[a-zA-Z0-9()]+:/;
var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros
var control_flow_simple = /^%(else|endif)/; // rpm control flow macros
var operators = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; // operators in control flow macros

const rpmSpec = {
  name: "rpmspec",
  startState: function () {
    return {
      controlFlow: false,
      macroParameters: false,
      section: false
    };
  },
  token: function (stream, state) {
    var ch = stream.peek();
    if (ch == "#") { stream.skipToEnd(); return "comment"; }

    if (stream.sol()) {
      if (stream.match(preamble)) { return "header"; }
      if (stream.match(section)) { return "atom"; }
    }

    if (stream.match(/^\$\w+/)) { return "def"; } // Variables like '$RPM_BUILD_ROOT'
    if (stream.match(/^\$\{\w+\}/)) { return "def"; } // Variables like '${RPM_BUILD_ROOT}'

    if (stream.match(control_flow_simple)) { return "keyword"; }
    if (stream.match(control_flow_complex)) {
      state.controlFlow = true;
      return "keyword";
    }
    if (state.controlFlow) {
      if (stream.match(operators)) { return "operator"; }
      if (stream.match(/^(\d+)/)) { return "number"; }
      if (stream.eol()) { state.controlFlow = false; }
    }

    if (stream.match(arch)) {
      if (stream.eol()) { state.controlFlow = false; }
      return "number";
    }

    // Macros like '%make_install' or '%attr(0775,root,root)'
    if (stream.match(/^%[\w]+/)) {
      if (stream.match('(')) { state.macroParameters = true; }
      return "keyword";
    }
    if (state.macroParameters) {
      if (stream.match(/^\d+/)) { return "number";}
      if (stream.match(')')) {
        state.macroParameters = false;
        return "keyword";
      }
    }

    // Macros like '%{defined fedora}'
    if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
      if (stream.eol()) { state.controlFlow = false; }
      return "def";
    }

    stream.next();
    return null;
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfcnBtX2pzLjk0M2ZiYTBjNDcxMGFiNjkxOTBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQSx3R0FBd0csS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEtBQUssR0FBRyxHQUFHO0FBQ25KOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLHNDQUFzQztBQUN0QztBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BELDRDQUE0QztBQUM1QywyREFBMkQ7O0FBRXBEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7O0FBRXpDO0FBQ0Esb0NBQW9DO0FBQ3BDLG1DQUFtQztBQUNuQzs7QUFFQSxrQ0FBa0MsZ0JBQWdCO0FBQ2xELDJCQUEyQixLQUFLLE1BQU0sZ0JBQWdCLHFCQUFxQixlQUFlOztBQUUxRiw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEMsMEJBQTBCO0FBQzFCOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsZUFBZTtBQUNyQywwQkFBMEIsaUJBQWlCO0FBQzNDLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9ycG0uanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhlYWRlclNlcGFyYXRvciA9IC9eLSskLztcbnZhciBoZWFkZXJMaW5lID0gL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICA/XFxkezEsMn0gXFxkezJ9OlxcZHsyfSg6XFxkezJ9KT8gW0EtWl17Myw0fSBcXGR7NH0gLSAvO1xudmFyIHNpbXBsZUVtYWlsID0gL15bXFx3Ky4tXStAW1xcdy4tXSsvO1xuXG5leHBvcnQgY29uc3QgcnBtQ2hhbmdlcyA9IHtcbiAgbmFtZTogXCJycG1jaGFuZ2VzXCIsXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKGhlYWRlclNlcGFyYXRvcikpIHsgcmV0dXJuICd0YWcnOyB9XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKGhlYWRlckxpbmUpKSB7IHJldHVybiAndGFnJzsgfVxuICAgIH1cbiAgICBpZiAoc3RyZWFtLm1hdGNoKHNpbXBsZUVtYWlsKSkgeyByZXR1cm4gJ3N0cmluZyc7IH1cbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIFF1aWNrIGFuZCBkaXJ0eSBzcGVjIGZpbGUgaGlnaGxpZ2h0aW5nXG5cbnZhciBhcmNoID0gL14oaTM4NnxpNTg2fGk2ODZ8eDg2XzY0fHBwYzY0bGV8cHBjNjR8cHBjfGlhNjR8czM5MHh8czM5MHxzcGFyYzY0fHNwYXJjdjl8c3BhcmN8bm9hcmNofGFscGhhZXY2fGFscGhhfGhwcGF8bWlwc2VsKS87XG5cbnZhciBwcmVhbWJsZSA9IC9eW2EtekEtWjAtOSgpXSs6LztcbnZhciBzZWN0aW9uID0gL14lKGRlYnVnX3BhY2thZ2V8cGFja2FnZXxkZXNjcmlwdGlvbnxwcmVwfGJ1aWxkfGluc3RhbGx8ZmlsZXN8Y2xlYW58Y2hhbmdlbG9nfHByZWluc3RhbGx8cHJldW58cG9zdGluc3RhbGx8cG9zdHVufHByZXRyYW5zfHBvc3R0cmFuc3xwcmV8cG9zdHx0cmlnZ2VyaW58dHJpZ2dlcnVufHZlcmlmeXNjcmlwdHxjaGVja3x0cmlnZ2VycG9zdHVufHRyaWdnZXJwcmVpbnx0cmlnZ2VyKS87XG52YXIgY29udHJvbF9mbG93X2NvbXBsZXggPSAvXiUoaWZuYXJjaHxpZmFyY2h8aWYpLzsgLy8gcnBtIGNvbnRyb2wgZmxvdyBtYWNyb3NcbnZhciBjb250cm9sX2Zsb3dfc2ltcGxlID0gL14lKGVsc2V8ZW5kaWYpLzsgLy8gcnBtIGNvbnRyb2wgZmxvdyBtYWNyb3NcbnZhciBvcGVyYXRvcnMgPSAvXihcXCF8XFw/fFxcPFxcPXxcXDx8XFw+XFw9fFxcPnxcXD1cXD18XFwmXFwmfFxcfFxcfCkvOyAvLyBvcGVyYXRvcnMgaW4gY29udHJvbCBmbG93IG1hY3Jvc1xuXG5leHBvcnQgY29uc3QgcnBtU3BlYyA9IHtcbiAgbmFtZTogXCJycG1zcGVjXCIsXG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbEZsb3c6IGZhbHNlLFxuICAgICAgbWFjcm9QYXJhbWV0ZXJzOiBmYWxzZSxcbiAgICAgIHNlY3Rpb246IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgdG9rZW46IGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RyZWFtLnBlZWsoKTtcbiAgICBpZiAoY2ggPT0gXCIjXCIpIHsgc3RyZWFtLnNraXBUb0VuZCgpOyByZXR1cm4gXCJjb21tZW50XCI7IH1cblxuICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2gocHJlYW1ibGUpKSB7IHJldHVybiBcImhlYWRlclwiOyB9XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKHNlY3Rpb24pKSB7IHJldHVybiBcImF0b21cIjsgfVxuICAgIH1cblxuICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXCRcXHcrLykpIHsgcmV0dXJuIFwiZGVmXCI7IH0gLy8gVmFyaWFibGVzIGxpa2UgJyRSUE1fQlVJTERfUk9PVCdcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFwkXFx7XFx3K1xcfS8pKSB7IHJldHVybiBcImRlZlwiOyB9IC8vIFZhcmlhYmxlcyBsaWtlICcke1JQTV9CVUlMRF9ST09UfSdcblxuICAgIGlmIChzdHJlYW0ubWF0Y2goY29udHJvbF9mbG93X3NpbXBsZSkpIHsgcmV0dXJuIFwia2V5d29yZFwiOyB9XG4gICAgaWYgKHN0cmVhbS5tYXRjaChjb250cm9sX2Zsb3dfY29tcGxleCkpIHtcbiAgICAgIHN0YXRlLmNvbnRyb2xGbG93ID0gdHJ1ZTtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmNvbnRyb2xGbG93KSB7XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKG9wZXJhdG9ycykpIHsgcmV0dXJuIFwib3BlcmF0b3JcIjsgfVxuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXihcXGQrKS8pKSB7IHJldHVybiBcIm51bWJlclwiOyB9XG4gICAgICBpZiAoc3RyZWFtLmVvbCgpKSB7IHN0YXRlLmNvbnRyb2xGbG93ID0gZmFsc2U7IH1cbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtLm1hdGNoKGFyY2gpKSB7XG4gICAgICBpZiAoc3RyZWFtLmVvbCgpKSB7IHN0YXRlLmNvbnRyb2xGbG93ID0gZmFsc2U7IH1cbiAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgIH1cblxuICAgIC8vIE1hY3JvcyBsaWtlICclbWFrZV9pbnN0YWxsJyBvciAnJWF0dHIoMDc3NSxyb290LHJvb3QpJ1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14lW1xcd10rLykpIHtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goJygnKSkgeyBzdGF0ZS5tYWNyb1BhcmFtZXRlcnMgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5tYWNyb1BhcmFtZXRlcnMpIHtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXGQrLykpIHsgcmV0dXJuIFwibnVtYmVyXCI7fVxuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgnKScpKSB7XG4gICAgICAgIHN0YXRlLm1hY3JvUGFyYW1ldGVycyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWFjcm9zIGxpa2UgJyV7ZGVmaW5lZCBmZWRvcmF9J1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14lXFx7XFw/P1tcXHcgXFwtXFw6XFwhXStcXH0vKSkge1xuICAgICAgaWYgKHN0cmVhbS5lb2woKSkgeyBzdGF0ZS5jb250cm9sRmxvdyA9IGZhbHNlOyB9XG4gICAgICByZXR1cm4gXCJkZWZcIjtcbiAgICB9XG5cbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=