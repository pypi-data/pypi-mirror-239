"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_vb_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/vb.js":
/*!***********************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/vb.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vb": () => (/* binding */ vb)
/* harmony export */ });
var ERRORCLASS = 'error';

function wordRegexp(words) {
  return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
}

var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");

var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];
var middleKeywords = ['else','elseif','case', 'catch', 'finally'];
var endKeywords = ['next','loop'];

var operatorKeywords = ['and', "andalso", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];
var wordOperators = wordRegexp(operatorKeywords);

var commonKeywords = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];

var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];

var keywords = wordRegexp(commonKeywords);
var types = wordRegexp(commontypes);
var stringPrefixes = '"';

var opening = wordRegexp(openingKeywords);
var middle = wordRegexp(middleKeywords);
var closing = wordRegexp(endKeywords);
var doubleClosing = wordRegexp(['end']);
var doOpening = wordRegexp(['do']);

var indentInfo = null;

function indent(_stream, state) {
  state.currentIndent++;
}

function dedent(_stream, state) {
  state.currentIndent--;
}
// tokenizers
function tokenBase(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }

  var ch = stream.peek();

  // Handle Comments
  if (ch === "'") {
    stream.skipToEnd();
    return 'comment';
  }


  // Handle Number Literals
  if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
    var floatLiteral = false;
    // Floats
    if (stream.match(/^\d*\.\d+F?/i)) { floatLiteral = true; }
    else if (stream.match(/^\d+\.\d*F?/)) { floatLiteral = true; }
    else if (stream.match(/^\.\d+F?/)) { floatLiteral = true; }

    if (floatLiteral) {
      // Float literals may be "imaginary"
      stream.eat(/J/i);
      return 'number';
    }
    // Integers
    var intLiteral = false;
    // Hex
    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
    // Octal
    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
    // Decimal
    else if (stream.match(/^[1-9]\d*F?/)) {
      // Decimal literals may be "imaginary"
      stream.eat(/J/i);
      // TODO - Can you have imaginary longs?
      intLiteral = true;
    }
    // Zero by itself with no other piece of number.
    else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
    if (intLiteral) {
      // Integer literals may be "long"
      stream.eat(/L/i);
      return 'number';
    }
  }

  // Handle Strings
  if (stream.match(stringPrefixes)) {
    state.tokenize = tokenStringFactory(stream.current());
    return state.tokenize(stream, state);
  }

  // Handle operators and Delimiters
  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
    return null;
  }
  if (stream.match(doubleOperators)
      || stream.match(singleOperators)
      || stream.match(wordOperators)) {
    return 'operator';
  }
  if (stream.match(singleDelimiters)) {
    return null;
  }
  if (stream.match(doOpening)) {
    indent(stream,state);
    state.doInCurrentLine = true;
    return 'keyword';
  }
  if (stream.match(opening)) {
    if (! state.doInCurrentLine)
      indent(stream,state);
    else
      state.doInCurrentLine = false;
    return 'keyword';
  }
  if (stream.match(middle)) {
    return 'keyword';
  }

  if (stream.match(doubleClosing)) {
    dedent(stream,state);
    dedent(stream,state);
    return 'keyword';
  }
  if (stream.match(closing)) {
    dedent(stream,state);
    return 'keyword';
  }

  if (stream.match(types)) {
    return 'keyword';
  }

  if (stream.match(keywords)) {
    return 'keyword';
  }

  if (stream.match(identifiers)) {
    return 'variable';
  }

  // Handle non-detected items
  stream.next();
  return ERRORCLASS;
}

function tokenStringFactory(delimiter) {
  var singleline = delimiter.length == 1;
  var OUTCLASS = 'string';

  return function(stream, state) {
    while (!stream.eol()) {
      stream.eatWhile(/[^'"]/);
      if (stream.match(delimiter)) {
        state.tokenize = tokenBase;
        return OUTCLASS;
      } else {
        stream.eat(/['"]/);
      }
    }
    if (singleline) {
      state.tokenize = tokenBase;
    }
    return OUTCLASS;
  };
}


function tokenLexer(stream, state) {
  var style = state.tokenize(stream, state);
  var current = stream.current();

  // Handle '.' connected identifiers
  if (current === '.') {
    style = state.tokenize(stream, state);
    if (style === 'variable') {
      return 'variable';
    } else {
      return ERRORCLASS;
    }
  }


  var delimiter_index = '[({'.indexOf(current);
  if (delimiter_index !== -1) {
    indent(stream, state );
  }
  if (indentInfo === 'dedent') {
    if (dedent(stream, state)) {
      return ERRORCLASS;
    }
  }
  delimiter_index = '])}'.indexOf(current);
  if (delimiter_index !== -1) {
    if (dedent(stream, state)) {
      return ERRORCLASS;
    }
  }

  return style;
}

const vb = {
  name: "vb",

  startState: function() {
    return {
      tokenize: tokenBase,
      lastToken: null,
      currentIndent: 0,
      nextLineIndent: 0,
      doInCurrentLine: false


    };
  },

  token: function(stream, state) {
    if (stream.sol()) {
      state.currentIndent += state.nextLineIndent;
      state.nextLineIndent = 0;
      state.doInCurrentLine = 0;
    }
    var style = tokenLexer(stream, state);

    state.lastToken = {style:style, content: stream.current()};



    return style;
  },

  indent: function(state, textAfter, cx) {
    var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
    if(state.currentIndent < 0) return 0;
    return state.currentIndent * cx.unit;
  },

  languageData: {
    closeBrackets: {brackets: ["(", "[", "{", '"']},
    commentTokens: {line: "'"},
    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)
      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfdmJfanMuYWQwMTc3MmI0MTY3Zjg4NThmMWIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRCxHQUFHLE1BQU07QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsNENBQTRDO0FBQzVDLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7O0FBR0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7Ozs7QUFJdkI7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0Esb0JBQW9CLHVCQUF1QixRQUFRO0FBQ25ELG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS92Yi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRVJST1JDTEFTUyA9ICdlcnJvcic7XG5cbmZ1bmN0aW9uIHdvcmRSZWdleHAod29yZHMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKChcIiArIHdvcmRzLmpvaW4oXCIpfChcIikgKyBcIikpXFxcXGJcIiwgXCJpXCIpO1xufVxuXG52YXIgc2luZ2xlT3BlcmF0b3JzID0gbmV3IFJlZ0V4cChcIl5bXFxcXCtcXFxcLVxcXFwqLyUmXFxcXFxcXFx8XFxcXF5+PD4hXVwiKTtcbnZhciBzaW5nbGVEZWxpbWl0ZXJzID0gbmV3IFJlZ0V4cCgnXltcXFxcKFxcXFwpXFxcXFtcXFxcXVxcXFx7XFxcXH1ALDpgPTtcXFxcLl0nKTtcbnZhciBkb3VibGVPcGVyYXRvcnMgPSBuZXcgUmVnRXhwKFwiXigoPT0pfCg8Pil8KDw9KXwoPj0pfCg8Pil8KDw8KXwoPj4pfCgvLyl8KFxcXFwqXFxcXCopKVwiKTtcbnZhciBkb3VibGVEZWxpbWl0ZXJzID0gbmV3IFJlZ0V4cChcIl4oKFxcXFwrPSl8KFxcXFwtPSl8KFxcXFwqPSl8KCU9KXwoLz0pfCgmPSl8KFxcXFx8PSl8KFxcXFxePSkpXCIpO1xudmFyIHRyaXBsZURlbGltaXRlcnMgPSBuZXcgUmVnRXhwKFwiXigoLy89KXwoPj49KXwoPDw9KXwoXFxcXCpcXFxcKj0pKVwiKTtcbnZhciBpZGVudGlmaWVycyA9IG5ldyBSZWdFeHAoXCJeW19BLVphLXpdW19BLVphLXowLTldKlwiKTtcblxudmFyIG9wZW5pbmdLZXl3b3JkcyA9IFsnY2xhc3MnLCdtb2R1bGUnLCAnc3ViJywnZW51bScsJ3NlbGVjdCcsJ3doaWxlJywnaWYnLCdmdW5jdGlvbicsICdnZXQnLCdzZXQnLCdwcm9wZXJ0eScsICd0cnknLCAnc3RydWN0dXJlJywgJ3N5bmNsb2NrJywgJ3VzaW5nJywgJ3dpdGgnXTtcbnZhciBtaWRkbGVLZXl3b3JkcyA9IFsnZWxzZScsJ2Vsc2VpZicsJ2Nhc2UnLCAnY2F0Y2gnLCAnZmluYWxseSddO1xudmFyIGVuZEtleXdvcmRzID0gWyduZXh0JywnbG9vcCddO1xuXG52YXIgb3BlcmF0b3JLZXl3b3JkcyA9IFsnYW5kJywgXCJhbmRhbHNvXCIsICdvcicsICdvcmVsc2UnLCAneG9yJywgJ2luJywgJ25vdCcsICdpcycsICdpc25vdCcsICdsaWtlJ107XG52YXIgd29yZE9wZXJhdG9ycyA9IHdvcmRSZWdleHAob3BlcmF0b3JLZXl3b3Jkcyk7XG5cbnZhciBjb21tb25LZXl3b3JkcyA9IFtcIiNjb25zdFwiLCBcIiNlbHNlXCIsIFwiI2Vsc2VpZlwiLCBcIiNlbmRcIiwgXCIjaWZcIiwgXCIjcmVnaW9uXCIsIFwiYWRkaGFuZGxlclwiLCBcImFkZHJlc3NvZlwiLCBcImFsaWFzXCIsIFwiYXNcIiwgXCJieXJlZlwiLCBcImJ5dmFsXCIsIFwiY2Jvb2xcIiwgXCJjYnl0ZVwiLCBcImNjaGFyXCIsIFwiY2RhdGVcIiwgXCJjZGJsXCIsIFwiY2RlY1wiLCBcImNpbnRcIiwgXCJjbG5nXCIsIFwiY29ialwiLCBcImNvbXBhcmVcIiwgXCJjb25zdFwiLCBcImNvbnRpbnVlXCIsIFwiY3NieXRlXCIsIFwiY3Nob3J0XCIsIFwiY3NuZ1wiLCBcImNzdHJcIiwgXCJjdWludFwiLCBcImN1bG5nXCIsIFwiY3VzaG9ydFwiLCBcImRlY2xhcmVcIiwgXCJkZWZhdWx0XCIsIFwiZGVsZWdhdGVcIiwgXCJkaW1cIiwgXCJkaXJlY3RjYXN0XCIsIFwiZWFjaFwiLCBcImVyYXNlXCIsIFwiZXJyb3JcIiwgXCJldmVudFwiLCBcImV4aXRcIiwgXCJleHBsaWNpdFwiLCBcImZhbHNlXCIsIFwiZm9yXCIsIFwiZnJpZW5kXCIsIFwiZ2V0dHlwZVwiLCBcImdvdG9cIiwgXCJoYW5kbGVzXCIsIFwiaW1wbGVtZW50c1wiLCBcImltcG9ydHNcIiwgXCJpbmZlclwiLCBcImluaGVyaXRzXCIsIFwiaW50ZXJmYWNlXCIsIFwiaXNmYWxzZVwiLCBcImlzdHJ1ZVwiLCBcImxpYlwiLCBcIm1lXCIsIFwibW9kXCIsIFwibXVzdGluaGVyaXRcIiwgXCJtdXN0b3ZlcnJpZGVcIiwgXCJteVwiLCBcIm15YmFzZVwiLCBcIm15Y2xhc3NcIiwgXCJuYW1lc3BhY2VcIiwgXCJuYXJyb3dpbmdcIiwgXCJuZXdcIiwgXCJub3RoaW5nXCIsIFwibm90aW5oZXJpdGFibGVcIiwgXCJub3RvdmVycmlkYWJsZVwiLCBcIm9mXCIsIFwib2ZmXCIsIFwib25cIiwgXCJvcGVyYXRvclwiLCBcIm9wdGlvblwiLCBcIm9wdGlvbmFsXCIsIFwib3V0XCIsIFwib3ZlcmxvYWRzXCIsIFwib3ZlcnJpZGFibGVcIiwgXCJvdmVycmlkZXNcIiwgXCJwYXJhbWFycmF5XCIsIFwicGFydGlhbFwiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgXCJwdWJsaWNcIiwgXCJyYWlzZWV2ZW50XCIsIFwicmVhZG9ubHlcIiwgXCJyZWRpbVwiLCBcInJlbW92ZWhhbmRsZXJcIiwgXCJyZXN1bWVcIiwgXCJyZXR1cm5cIiwgXCJzaGFkb3dzXCIsIFwic2hhcmVkXCIsIFwic3RhdGljXCIsIFwic3RlcFwiLCBcInN0b3BcIiwgXCJzdHJpY3RcIiwgXCJ0aGVuXCIsIFwidGhyb3dcIiwgXCJ0b1wiLCBcInRydWVcIiwgXCJ0cnljYXN0XCIsIFwidHlwZW9mXCIsIFwidW50aWxcIiwgXCJ1bnRpbFwiLCBcIndoZW5cIiwgXCJ3aWRlbmluZ1wiLCBcIndpdGhldmVudHNcIiwgXCJ3cml0ZW9ubHlcIl07XG5cbnZhciBjb21tb250eXBlcyA9IFsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnY2hhcicsICdzdHJpbmcnLCAnYnl0ZScsICdzYnl0ZScsICdzaG9ydCcsICd1c2hvcnQnLCAnaW50MTYnLCAndWludDE2JywgJ2ludGVnZXInLCAndWludGVnZXInLCAnaW50MzInLCAndWludDMyJywgJ2xvbmcnLCAndWxvbmcnLCAnaW50NjQnLCAndWludDY0JywgJ2RlY2ltYWwnLCAnc2luZ2xlJywgJ2RvdWJsZScsICdmbG9hdCcsICdkYXRlJywgJ2RhdGV0aW1lJywgJ2ludHB0cicsICd1aW50cHRyJ107XG5cbnZhciBrZXl3b3JkcyA9IHdvcmRSZWdleHAoY29tbW9uS2V5d29yZHMpO1xudmFyIHR5cGVzID0gd29yZFJlZ2V4cChjb21tb250eXBlcyk7XG52YXIgc3RyaW5nUHJlZml4ZXMgPSAnXCInO1xuXG52YXIgb3BlbmluZyA9IHdvcmRSZWdleHAob3BlbmluZ0tleXdvcmRzKTtcbnZhciBtaWRkbGUgPSB3b3JkUmVnZXhwKG1pZGRsZUtleXdvcmRzKTtcbnZhciBjbG9zaW5nID0gd29yZFJlZ2V4cChlbmRLZXl3b3Jkcyk7XG52YXIgZG91YmxlQ2xvc2luZyA9IHdvcmRSZWdleHAoWydlbmQnXSk7XG52YXIgZG9PcGVuaW5nID0gd29yZFJlZ2V4cChbJ2RvJ10pO1xuXG52YXIgaW5kZW50SW5mbyA9IG51bGw7XG5cbmZ1bmN0aW9uIGluZGVudChfc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5jdXJyZW50SW5kZW50Kys7XG59XG5cbmZ1bmN0aW9uIGRlZGVudChfc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5jdXJyZW50SW5kZW50LS07XG59XG4vLyB0b2tlbml6ZXJzXG5mdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBjaCA9IHN0cmVhbS5wZWVrKCk7XG5cbiAgLy8gSGFuZGxlIENvbW1lbnRzXG4gIGlmIChjaCA9PT0gXCInXCIpIHtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfVxuXG5cbiAgLy8gSGFuZGxlIE51bWJlciBMaXRlcmFsc1xuICBpZiAoc3RyZWFtLm1hdGNoKC9eKCgmSCl8KCZPKSk/WzAtOVxcLmEtZl0vaSwgZmFsc2UpKSB7XG4gICAgdmFyIGZsb2F0TGl0ZXJhbCA9IGZhbHNlO1xuICAgIC8vIEZsb2F0c1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXGQqXFwuXFxkK0Y/L2kpKSB7IGZsb2F0TGl0ZXJhbCA9IHRydWU7IH1cbiAgICBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15cXGQrXFwuXFxkKkY/LykpIHsgZmxvYXRMaXRlcmFsID0gdHJ1ZTsgfVxuICAgIGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXlxcLlxcZCtGPy8pKSB7IGZsb2F0TGl0ZXJhbCA9IHRydWU7IH1cblxuICAgIGlmIChmbG9hdExpdGVyYWwpIHtcbiAgICAgIC8vIEZsb2F0IGxpdGVyYWxzIG1heSBiZSBcImltYWdpbmFyeVwiXG4gICAgICBzdHJlYW0uZWF0KC9KL2kpO1xuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIH1cbiAgICAvLyBJbnRlZ2Vyc1xuICAgIHZhciBpbnRMaXRlcmFsID0gZmFsc2U7XG4gICAgLy8gSGV4XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXiZIWzAtOWEtZl0rL2kpKSB7IGludExpdGVyYWwgPSB0cnVlOyB9XG4gICAgLy8gT2N0YWxcbiAgICBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL14mT1swLTddKy9pKSkgeyBpbnRMaXRlcmFsID0gdHJ1ZTsgfVxuICAgIC8vIERlY2ltYWxcbiAgICBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15bMS05XVxcZCpGPy8pKSB7XG4gICAgICAvLyBEZWNpbWFsIGxpdGVyYWxzIG1heSBiZSBcImltYWdpbmFyeVwiXG4gICAgICBzdHJlYW0uZWF0KC9KL2kpO1xuICAgICAgLy8gVE9ETyAtIENhbiB5b3UgaGF2ZSBpbWFnaW5hcnkgbG9uZ3M/XG4gICAgICBpbnRMaXRlcmFsID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gWmVybyBieSBpdHNlbGYgd2l0aCBubyBvdGhlciBwaWVjZSBvZiBudW1iZXIuXG4gICAgZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eMCg/IVtcXGR4XSkvaSkpIHsgaW50TGl0ZXJhbCA9IHRydWU7IH1cbiAgICBpZiAoaW50TGl0ZXJhbCkge1xuICAgICAgLy8gSW50ZWdlciBsaXRlcmFscyBtYXkgYmUgXCJsb25nXCJcbiAgICAgIHN0cmVhbS5lYXQoL0wvaSk7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfVxuICB9XG5cbiAgLy8gSGFuZGxlIFN0cmluZ3NcbiAgaWYgKHN0cmVhbS5tYXRjaChzdHJpbmdQcmVmaXhlcykpIHtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuU3RyaW5nRmFjdG9yeShzdHJlYW0uY3VycmVudCgpKTtcbiAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cblxuICAvLyBIYW5kbGUgb3BlcmF0b3JzIGFuZCBEZWxpbWl0ZXJzXG4gIGlmIChzdHJlYW0ubWF0Y2godHJpcGxlRGVsaW1pdGVycykgfHwgc3RyZWFtLm1hdGNoKGRvdWJsZURlbGltaXRlcnMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHN0cmVhbS5tYXRjaChkb3VibGVPcGVyYXRvcnMpXG4gICAgICB8fCBzdHJlYW0ubWF0Y2goc2luZ2xlT3BlcmF0b3JzKVxuICAgICAgfHwgc3RyZWFtLm1hdGNoKHdvcmRPcGVyYXRvcnMpKSB7XG4gICAgcmV0dXJuICdvcGVyYXRvcic7XG4gIH1cbiAgaWYgKHN0cmVhbS5tYXRjaChzaW5nbGVEZWxpbWl0ZXJzKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChzdHJlYW0ubWF0Y2goZG9PcGVuaW5nKSkge1xuICAgIGluZGVudChzdHJlYW0sc3RhdGUpO1xuICAgIHN0YXRlLmRvSW5DdXJyZW50TGluZSA9IHRydWU7XG4gICAgcmV0dXJuICdrZXl3b3JkJztcbiAgfVxuICBpZiAoc3RyZWFtLm1hdGNoKG9wZW5pbmcpKSB7XG4gICAgaWYgKCEgc3RhdGUuZG9JbkN1cnJlbnRMaW5lKVxuICAgICAgaW5kZW50KHN0cmVhbSxzdGF0ZSk7XG4gICAgZWxzZVxuICAgICAgc3RhdGUuZG9JbkN1cnJlbnRMaW5lID0gZmFsc2U7XG4gICAgcmV0dXJuICdrZXl3b3JkJztcbiAgfVxuICBpZiAoc3RyZWFtLm1hdGNoKG1pZGRsZSkpIHtcbiAgICByZXR1cm4gJ2tleXdvcmQnO1xuICB9XG5cbiAgaWYgKHN0cmVhbS5tYXRjaChkb3VibGVDbG9zaW5nKSkge1xuICAgIGRlZGVudChzdHJlYW0sc3RhdGUpO1xuICAgIGRlZGVudChzdHJlYW0sc3RhdGUpO1xuICAgIHJldHVybiAna2V5d29yZCc7XG4gIH1cbiAgaWYgKHN0cmVhbS5tYXRjaChjbG9zaW5nKSkge1xuICAgIGRlZGVudChzdHJlYW0sc3RhdGUpO1xuICAgIHJldHVybiAna2V5d29yZCc7XG4gIH1cblxuICBpZiAoc3RyZWFtLm1hdGNoKHR5cGVzKSkge1xuICAgIHJldHVybiAna2V5d29yZCc7XG4gIH1cblxuICBpZiAoc3RyZWFtLm1hdGNoKGtleXdvcmRzKSkge1xuICAgIHJldHVybiAna2V5d29yZCc7XG4gIH1cblxuICBpZiAoc3RyZWFtLm1hdGNoKGlkZW50aWZpZXJzKSkge1xuICAgIHJldHVybiAndmFyaWFibGUnO1xuICB9XG5cbiAgLy8gSGFuZGxlIG5vbi1kZXRlY3RlZCBpdGVtc1xuICBzdHJlYW0ubmV4dCgpO1xuICByZXR1cm4gRVJST1JDTEFTUztcbn1cblxuZnVuY3Rpb24gdG9rZW5TdHJpbmdGYWN0b3J5KGRlbGltaXRlcikge1xuICB2YXIgc2luZ2xlbGluZSA9IGRlbGltaXRlci5sZW5ndGggPT0gMTtcbiAgdmFyIE9VVENMQVNTID0gJ3N0cmluZyc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXidcIl0vKTtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goZGVsaW1pdGVyKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgICAgcmV0dXJuIE9VVENMQVNTO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyZWFtLmVhdCgvWydcIl0vKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNpbmdsZWxpbmUpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgIH1cbiAgICByZXR1cm4gT1VUQ0xBU1M7XG4gIH07XG59XG5cblxuZnVuY3Rpb24gdG9rZW5MZXhlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBzdHlsZSA9IHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICB2YXIgY3VycmVudCA9IHN0cmVhbS5jdXJyZW50KCk7XG5cbiAgLy8gSGFuZGxlICcuJyBjb25uZWN0ZWQgaWRlbnRpZmllcnNcbiAgaWYgKGN1cnJlbnQgPT09ICcuJykge1xuICAgIHN0eWxlID0gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0eWxlID09PSAndmFyaWFibGUnKSB7XG4gICAgICByZXR1cm4gJ3ZhcmlhYmxlJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SQ0xBU1M7XG4gICAgfVxuICB9XG5cblxuICB2YXIgZGVsaW1pdGVyX2luZGV4ID0gJ1soeycuaW5kZXhPZihjdXJyZW50KTtcbiAgaWYgKGRlbGltaXRlcl9pbmRleCAhPT0gLTEpIHtcbiAgICBpbmRlbnQoc3RyZWFtLCBzdGF0ZSApO1xuICB9XG4gIGlmIChpbmRlbnRJbmZvID09PSAnZGVkZW50Jykge1xuICAgIGlmIChkZWRlbnQoc3RyZWFtLCBzdGF0ZSkpIHtcbiAgICAgIHJldHVybiBFUlJPUkNMQVNTO1xuICAgIH1cbiAgfVxuICBkZWxpbWl0ZXJfaW5kZXggPSAnXSl9Jy5pbmRleE9mKGN1cnJlbnQpO1xuICBpZiAoZGVsaW1pdGVyX2luZGV4ICE9PSAtMSkge1xuICAgIGlmIChkZWRlbnQoc3RyZWFtLCBzdGF0ZSkpIHtcbiAgICAgIHJldHVybiBFUlJPUkNMQVNTO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGNvbnN0IHZiID0ge1xuICBuYW1lOiBcInZiXCIsXG5cbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuaXplOiB0b2tlbkJhc2UsXG4gICAgICBsYXN0VG9rZW46IG51bGwsXG4gICAgICBjdXJyZW50SW5kZW50OiAwLFxuICAgICAgbmV4dExpbmVJbmRlbnQ6IDAsXG4gICAgICBkb0luQ3VycmVudExpbmU6IGZhbHNlXG5cblxuICAgIH07XG4gIH0sXG5cbiAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICBzdGF0ZS5jdXJyZW50SW5kZW50ICs9IHN0YXRlLm5leHRMaW5lSW5kZW50O1xuICAgICAgc3RhdGUubmV4dExpbmVJbmRlbnQgPSAwO1xuICAgICAgc3RhdGUuZG9JbkN1cnJlbnRMaW5lID0gMDtcbiAgICB9XG4gICAgdmFyIHN0eWxlID0gdG9rZW5MZXhlcihzdHJlYW0sIHN0YXRlKTtcblxuICAgIHN0YXRlLmxhc3RUb2tlbiA9IHtzdHlsZTpzdHlsZSwgY29udGVudDogc3RyZWFtLmN1cnJlbnQoKX07XG5cblxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuXG4gIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlciwgY3gpIHtcbiAgICB2YXIgdHJ1ZVRleHQgPSB0ZXh0QWZ0ZXIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpIDtcbiAgICBpZiAodHJ1ZVRleHQubWF0Y2goY2xvc2luZykgfHwgdHJ1ZVRleHQubWF0Y2goZG91YmxlQ2xvc2luZykgfHwgdHJ1ZVRleHQubWF0Y2gobWlkZGxlKSkgcmV0dXJuIGN4LnVuaXQqKHN0YXRlLmN1cnJlbnRJbmRlbnQtMSk7XG4gICAgaWYoc3RhdGUuY3VycmVudEluZGVudCA8IDApIHJldHVybiAwO1xuICAgIHJldHVybiBzdGF0ZS5jdXJyZW50SW5kZW50ICogY3gudW5pdDtcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBjbG9zZUJyYWNrZXRzOiB7YnJhY2tldHM6IFtcIihcIiwgXCJbXCIsIFwie1wiLCAnXCInXX0sXG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiJ1wifSxcbiAgICBhdXRvY29tcGxldGU6IG9wZW5pbmdLZXl3b3Jkcy5jb25jYXQobWlkZGxlS2V5d29yZHMpLmNvbmNhdChlbmRLZXl3b3JkcylcbiAgICAgIC5jb25jYXQob3BlcmF0b3JLZXl3b3JkcykuY29uY2F0KGNvbW1vbktleXdvcmRzKS5jb25jYXQoY29tbW9udHlwZXMpXG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=