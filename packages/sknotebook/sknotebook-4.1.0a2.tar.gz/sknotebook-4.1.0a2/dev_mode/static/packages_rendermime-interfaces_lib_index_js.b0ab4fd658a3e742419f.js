"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["packages_rendermime-interfaces_lib_index_js"],{

/***/ "../packages/rendermime-interfaces/lib/index.js":
/*!******************************************************!*\
  !*** ../packages/rendermime-interfaces/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
/**
 * @packageDocumentation
 * @module rendermime-interfaces
 */



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,