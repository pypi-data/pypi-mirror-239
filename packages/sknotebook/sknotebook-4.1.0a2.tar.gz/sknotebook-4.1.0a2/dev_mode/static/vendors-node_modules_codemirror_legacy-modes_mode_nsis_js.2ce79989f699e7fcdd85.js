"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_codemirror_legacy-modes_mode_nsis_js"],{

/***/ "../node_modules/@codemirror/legacy-modes/mode/nsis.js":
/*!*************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/nsis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nsis": () => (/* binding */ nsis)
/* harmony export */ });
/* harmony import */ var _simple_mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simple-mode.js */ "../node_modules/@codemirror/legacy-modes/mode/simple-mode.js");

const nsis = (0,_simple_mode_js__WEBPACK_IMPORTED_MODULE_0__.simpleMode)({
  start:[
    // Numbers
    {regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number"},

    // Strings
    { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
    { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
    { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },

    // Compile Time Commands
    {regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i, token: "keyword"},

    // Conditional Compilation
    {regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i, token: "keyword", indent: true},
    {regex: /^\s*(?:\!(else|endif|macroend))\b/i, token: "keyword", dedent: true},

    // Runtime Commands
    {regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i, token: "keyword"},
    {regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i, token: "keyword", indent: true},
    {regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i, token: "keyword", dedent: true},

    // Command Options
    {regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i, token: "atom"},
    {regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i, token: "builtin"},

    // LogicLib.nsh
    {regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i, token: "variable-2", indent: true},

    // FileFunc.nsh
    {regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i, token: "variable-2", dedent: true},

    // Memento.nsh
    {regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i, token: "variable-2", dedent: true},

    // TextFunc.nsh
    {regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i, token: "variable-2", dedent: true},

    // WinVer.nsh
    {regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i, token: "variable", dedent: true},

    // WordFunc.nsh
    {regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i, token: "keyword", dedent: true},

    // x64.nsh
    {regex: /\$\{(?:RunningX64)\}/i, token: "variable", dedent: true},
    {regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i, token: "keyword", dedent: true},

    // Line Comment
    {regex: /(#|;).*/, token: "comment"},

    // Block Comment
    {regex: /\/\*/, token: "comment", next: "comment"},

    // Operator
    {regex: /[-+\/*=<>!]+/, token: "operator"},

    // Variable
    {regex: /\$\w[\w\.]*/, token: "variable"},

    // Constant
    {regex: /\${[\!\w\.:-]+}/, token: "variableName.constant"},

    // Language String
    {regex: /\$\([\!\w\.:-]+\)/, token: "atom"}
  ],
  comment: [
    {regex: /.*?\*\//, token: "comment", next: "start"},
    {regex: /.*/, token: "comment"}
  ],
  languageData: {
    name: "nsis",
    indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
    commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
  }
});



/***/ }),

/***/ "../node_modules/@codemirror/legacy-modes/mode/simple-mode.js":
/*!********************************************************************!*\
  !*** ../node_modules/@codemirror/legacy-modes/mode/simple-mode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "simpleMode": () => (/* binding */ simpleMode)
/* harmony export */ });
function simpleMode(states) {
  ensureState(states, "start");
  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
    var list = states_[state] = [], orig = states[state];
    for (var i = 0; i < orig.length; i++) {
      var data = orig[i];
      list.push(new Rule(data, states));
      if (data.indent || data.dedent) hasIndentation = true;
    }
  }
  return {
    name: meta.name,
    startState: function() {
      return {state: "start", pending: null, indent: hasIndentation ? [] : null};
    },
    copyState: function(state) {
      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
      if (state.stack)
        s.stack = state.stack.slice(0);
      return s;
    },
    token: tokenFunction(states_),
    indent: indentFunction(states_, meta),
    languageData: meta
  }
};

function ensureState(states, name) {
  if (!states.hasOwnProperty(name))
    throw new Error("Undefined state " + name + " in simple mode");
}

function toRegex(val, caret) {
  if (!val) return /(?:)/;
  var flags = "";
  if (val instanceof RegExp) {
    if (val.ignoreCase) flags = "i";
    val = val.source;
  } else {
    val = String(val);
  }
  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
}

function asToken(val) {
  if (!val) return null;
  if (val.apply) return val
  if (typeof val == "string") return val.replace(/\./g, " ");
  var result = [];
  for (var i = 0; i < val.length; i++)
    result.push(val[i] && val[i].replace(/\./g, " "));
  return result;
}

function Rule(data, states) {
  if (data.next || data.push) ensureState(states, data.next || data.push);
  this.regex = toRegex(data.regex);
  this.token = asToken(data.token);
  this.data = data;
}

function tokenFunction(states) {
  return function(stream, state) {
    if (state.pending) {
      var pend = state.pending.shift();
      if (state.pending.length == 0) state.pending = null;
      stream.pos += pend.text.length;
      return pend.token;
    }

    var curState = states[state.state];
    for (var i = 0; i < curState.length; i++) {
      var rule = curState[i];
      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
      if (matches) {
        if (rule.data.next) {
          state.state = rule.data.next;
        } else if (rule.data.push) {
          (state.stack || (state.stack = [])).push(state.state);
          state.state = rule.data.push;
        } else if (rule.data.pop && state.stack && state.stack.length) {
          state.state = state.stack.pop();
        }

        if (rule.data.indent)
          state.indent.push(stream.indentation() + stream.indentUnit);
        if (rule.data.dedent)
          state.indent.pop();
        var token = rule.token
        if (token && token.apply) token = token(matches)
        if (matches.length > 2 && rule.token && typeof rule.token != "string") {
          state.pending = [];
          for (var j = 2; j < matches.length; j++)
            if (matches[j])
              state.pending.push({text: matches[j], token: rule.token[j - 1]});
          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
          return token[0];
        } else if (token && token.join) {
          return token[0];
        } else {
          return token;
        }
      }
    }
    stream.next();
    return null;
  };
}

function indentFunction(states, meta) {
  return function(state, textAfter) {
    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
      return null

    var pos = state.indent.length - 1, rules = states[state.state];
    scan: for (;;) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
          var m = rule.regex.exec(textAfter);
          if (m && m[0]) {
            pos--;
            if (rule.next || rule.push) rules = states[rule.next || rule.push];
            textAfter = textAfter.slice(m[0].length);
            continue scan;
          }
        }
      }
      break;
    }
    return pos < 0 ? 0 : state.indent[pos];
  };
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfY29kZW1pcnJvcl9sZWdhY3ktbW9kZXNfbW9kZV9uc2lzX2pzLjJjZTc5OTg5ZjY5OWU3ZmNkZDg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ3BDLGFBQWEsMkRBQVU7QUFDOUI7QUFDQTtBQUNBLEtBQUssMEZBQTBGOztBQUUvRjtBQUNBLE1BQU0sOENBQThDO0FBQ3BELE1BQU0sOENBQThDO0FBQ3BELE1BQU0sOENBQThDOztBQUVwRDtBQUNBLEtBQUssb1NBQW9TOztBQUV6UztBQUNBLEtBQUssd0ZBQXdGO0FBQzdGLEtBQUssNEVBQTRFOztBQUVqRjtBQUNBLEtBQUssc29GQUFzb0Y7QUFDM29GLEtBQUssc0ZBQXNGO0FBQzNGLEtBQUssMkZBQTJGOztBQUVoRztBQUNBLEtBQUssNjRCQUE2NEI7QUFDbDVCLEtBQUssZ2JBQWdiOztBQUVyYjtBQUNBLEtBQUssWUFBWSx3UkFBd1Isc0NBQXNDOztBQUUvVTtBQUNBLEtBQUssWUFBWSxvTUFBb00sc0NBQXNDOztBQUUzUDtBQUNBLEtBQUssWUFBWSxvRUFBb0Usc0NBQXNDOztBQUUzSDtBQUNBLEtBQUssWUFBWSxtSUFBbUksc0NBQXNDOztBQUUxTDtBQUNBLEtBQUssWUFBWSxvSEFBb0gsb0NBQW9DOztBQUV6SztBQUNBLEtBQUssWUFBWSxpR0FBaUcsbUNBQW1DOztBQUVySjtBQUNBLEtBQUssWUFBWSxnQkFBZ0Isb0NBQW9DO0FBQ3JFLEtBQUssWUFBWSxvQ0FBb0MsbUNBQW1DOztBQUV4RjtBQUNBLEtBQUssWUFBWSx1QkFBdUI7O0FBRXhDO0FBQ0EsS0FBSyxpREFBaUQ7O0FBRXREO0FBQ0EsS0FBSyx5Q0FBeUM7O0FBRTlDO0FBQ0EsS0FBSyx3Q0FBd0M7O0FBRTdDO0FBQ0EsS0FBSyxXQUFXLFlBQVksa0NBQWtDOztBQUU5RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSyxrREFBa0Q7QUFDdkQsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtGQUErRix5Q0FBeUM7QUFDeEksb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1RU07QUFDUDtBQUNBLGtCQUFrQixrQ0FBa0M7QUFDcEQ7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxLQUFLO0FBQ0w7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixvQkFBb0I7QUFDOUM7QUFDQSxrQ0FBa0MsMkNBQTJDO0FBQzdFO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQixzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9uc2lzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc2ltcGxlLW1vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzaW1wbGVNb2RlfSBmcm9tIFwiLi9zaW1wbGUtbW9kZS5qc1wiXG5leHBvcnQgY29uc3QgbnNpcyA9IHNpbXBsZU1vZGUoe1xuICBzdGFydDpbXG4gICAgLy8gTnVtYmVyc1xuICAgIHtyZWdleDogLyg/OlsrLV0/KSg/OjB4W1xcZCxhLWZdKyl8KD86MG9bMC03XSspfCg/OjBiWzAsMV0rKXwoPzpcXGQrLj9cXGQqKS8sIHRva2VuOiBcIm51bWJlclwifSxcblxuICAgIC8vIFN0cmluZ3NcbiAgICB7IHJlZ2V4OiAvXCIoPzpbXlxcXFxcIl18XFxcXC4pKlwiPy8sIHRva2VuOiBcInN0cmluZ1wiIH0sXG4gICAgeyByZWdleDogLycoPzpbXlxcXFwnXXxcXFxcLikqJz8vLCB0b2tlbjogXCJzdHJpbmdcIiB9LFxuICAgIHsgcmVnZXg6IC9gKD86W15cXFxcYF18XFxcXC4pKmA/LywgdG9rZW46IFwic3RyaW5nXCIgfSxcblxuICAgIC8vIENvbXBpbGUgVGltZSBDb21tYW5kc1xuICAgIHtyZWdleDogL15cXHMqKD86XFwhKGFkZGluY2x1ZGVkaXJ8YWRkcGx1Z2luZGlyfGFwcGVuZGZpbGV8Y2R8ZGVmaW5lfGRlbGZpbGV8ZWNob3xlcnJvcnxleGVjdXRlfGZpbmFsaXplfGdldGRsbHZlcnNpb258Z2V0dGxidmVyc2lvbnxpbmNsdWRlfGluc2VydG1hY3JvfG1hY3JvfG1hY3JvZW5kfG1ha2Vuc2lzfHBhY2toZHJ8cHJhZ21hfHNlYXJjaHBhcnNlfHNlYXJjaHJlcGxhY2V8c3lzdGVtfHRlbXBmaWxlfHVuZGVmfHVuaW5zdGZpbmFsaXplfHZlcmJvc2V8d2FybmluZykpXFxiL2ksIHRva2VuOiBcImtleXdvcmRcIn0sXG5cbiAgICAvLyBDb25kaXRpb25hbCBDb21waWxhdGlvblxuICAgIHtyZWdleDogL15cXHMqKD86XFwhKGlmKD86bj9kZWYpP3xpZm1hY3Jvbj9kZWZ8bWFjcm8pKVxcYi9pLCB0b2tlbjogXCJrZXl3b3JkXCIsIGluZGVudDogdHJ1ZX0sXG4gICAge3JlZ2V4OiAvXlxccyooPzpcXCEoZWxzZXxlbmRpZnxtYWNyb2VuZCkpXFxiL2ksIHRva2VuOiBcImtleXdvcmRcIiwgZGVkZW50OiB0cnVlfSxcblxuICAgIC8vIFJ1bnRpbWUgQ29tbWFuZHNcbiAgICB7cmVnZXg6IC9eXFxzKig/OkFib3J0fEFkZEJyYW5kaW5nSW1hZ2V8QWRkU2l6ZXxBbGxvd1Jvb3REaXJJbnN0YWxsfEFsbG93U2tpcEZpbGVzfEF1dG9DbG9zZVdpbmRvd3xCR0ZvbnR8QkdHcmFkaWVudHxCcmFuZGluZ1RleHR8QnJpbmdUb0Zyb250fENhbGx8Q2FsbEluc3RETEx8Q2FwdGlvbnxDaGFuZ2VVSXxDaGVja0JpdG1hcHxDbGVhckVycm9yc3xDb21wbGV0ZWRUZXh0fENvbXBvbmVudFRleHR8Q29weUZpbGVzfENSQ0NoZWNrfENyZWF0ZURpcmVjdG9yeXxDcmVhdGVGb250fENyZWF0ZVNob3J0Q3V0fERlbGV0ZXxEZWxldGVJTklTZWN8RGVsZXRlSU5JU3RyfERlbGV0ZVJlZ0tleXxEZWxldGVSZWdWYWx1ZXxEZXRhaWxQcmludHxEZXRhaWxzQnV0dG9uVGV4dHxEaXJUZXh0fERpclZhcnxEaXJWZXJpZnl8RW5hYmxlV2luZG93fEVudW1SZWdLZXl8RW51bVJlZ1ZhbHVlfEV4Y2h8RXhlY3xFeGVjU2hlbGx8RXhlY1NoZWxsV2FpdHxFeGVjV2FpdHxFeHBhbmRFbnZTdHJpbmdzfEZpbGV8RmlsZUJ1ZlNpemV8RmlsZUNsb3NlfEZpbGVFcnJvclRleHR8RmlsZU9wZW58RmlsZVJlYWR8RmlsZVJlYWRCeXRlfEZpbGVSZWFkVVRGMTZMRXxGaWxlUmVhZFdvcmR8RmlsZVdyaXRlVVRGMTZMRXxGaWxlU2Vla3xGaWxlV3JpdGV8RmlsZVdyaXRlQnl0ZXxGaWxlV3JpdGVXb3JkfEZpbmRDbG9zZXxGaW5kRmlyc3R8RmluZE5leHR8RmluZFdpbmRvd3xGbHVzaElOSXxHZXRDdXJJbnN0VHlwZXxHZXRDdXJyZW50QWRkcmVzc3xHZXREbGdJdGVtfEdldERMTFZlcnNpb258R2V0RExMVmVyc2lvbkxvY2FsfEdldEVycm9yTGV2ZWx8R2V0RmlsZVRpbWV8R2V0RmlsZVRpbWVMb2NhbHxHZXRGdWxsUGF0aE5hbWV8R2V0RnVuY3Rpb25BZGRyZXNzfEdldEluc3REaXJFcnJvcnxHZXRLbm93bkZvbGRlclBhdGh8R2V0TGFiZWxBZGRyZXNzfEdldFRlbXBGaWxlTmFtZXxHZXRXaW5WZXJ8R290b3xIaWRlV2luZG93fEljb258SWZBYm9ydHxJZkVycm9yc3xJZkZpbGVFeGlzdHN8SWZSZWJvb3RGbGFnfElmUnRsTGFuZ3VhZ2V8SWZTaGVsbFZhckNvbnRleHRBbGx8SWZTaWxlbnR8SW5pdFBsdWdpbnNEaXJ8SW5zdGFsbEJ1dHRvblRleHR8SW5zdGFsbENvbG9yc3xJbnN0YWxsRGlyfEluc3RhbGxEaXJSZWdLZXl8SW5zdFByb2dyZXNzRmxhZ3N8SW5zdFR5cGV8SW5zdFR5cGVHZXRUZXh0fEluc3RUeXBlU2V0VGV4dHxJbnQ2NENtcHxJbnQ2NENtcFV8SW50NjRGbXR8SW50Q21wfEludENtcFV8SW50Rm10fEludE9wfEludFB0ckNtcHxJbnRQdHJDbXBVfEludFB0ck9wfElzV2luZG93fExhbmdTdHJpbmd8TGljZW5zZUJrQ29sb3J8TGljZW5zZURhdGF8TGljZW5zZUZvcmNlU2VsZWN0aW9ufExpY2Vuc2VMYW5nU3RyaW5nfExpY2Vuc2VUZXh0fExvYWRBbmRTZXRJbWFnZXxMb2FkTGFuZ3VhZ2VGaWxlfExvY2tXaW5kb3d8TG9nU2V0fExvZ1RleHR8TWFuaWZlc3REUElBd2FyZXxNYW5pZmVzdExvbmdQYXRoQXdhcmV8TWFuaWZlc3RNYXhWZXJzaW9uVGVzdGVkfE1hbmlmZXN0U3VwcG9ydGVkT1N8TWVzc2FnZUJveHxNaXNjQnV0dG9uVGV4dHxOYW1lfE5vcHxPdXRGaWxlfFBhZ2V8UGFnZUNhbGxiYWNrc3xQRUFkZFJlc291cmNlfFBFRGxsQ2hhcmFjdGVyaXN0aWNzfFBFUmVtb3ZlUmVzb3VyY2V8UEVTdWJzeXNWZXJ8UG9wfFB1c2h8UXVpdHxSZWFkRW52U3RyfFJlYWRJTklTdHJ8UmVhZFJlZ0RXT1JEfFJlYWRSZWdTdHJ8UmVib290fFJlZ0RMTHxSZW5hbWV8UmVxdWVzdEV4ZWN1dGlvbkxldmVsfFJlc2VydmVGaWxlfFJldHVybnxSTURpcnxTZWFyY2hQYXRofFNlY3Rpb25HZXRGbGFnc3xTZWN0aW9uR2V0SW5zdFR5cGVzfFNlY3Rpb25HZXRTaXplfFNlY3Rpb25HZXRUZXh0fFNlY3Rpb25JbnxTZWN0aW9uU2V0RmxhZ3N8U2VjdGlvblNldEluc3RUeXBlc3xTZWN0aW9uU2V0U2l6ZXxTZWN0aW9uU2V0VGV4dHxTZW5kTWVzc2FnZXxTZXRBdXRvQ2xvc2V8U2V0QnJhbmRpbmdJbWFnZXxTZXRDb21wcmVzc3xTZXRDb21wcmVzc29yfFNldENvbXByZXNzb3JEaWN0U2l6ZXxTZXRDdGxDb2xvcnN8U2V0Q3VySW5zdFR5cGV8U2V0RGF0YWJsb2NrT3B0aW1pemV8U2V0RGF0ZVNhdmV8U2V0RGV0YWlsc1ByaW50fFNldERldGFpbHNWaWV3fFNldEVycm9yTGV2ZWx8U2V0RXJyb3JzfFNldEZpbGVBdHRyaWJ1dGVzfFNldEZvbnR8U2V0T3V0UGF0aHxTZXRPdmVyd3JpdGV8U2V0UmVib290RmxhZ3xTZXRSZWdWaWV3fFNldFNoZWxsVmFyQ29udGV4dHxTZXRTaWxlbnR8U2hvd0luc3REZXRhaWxzfFNob3dVbmluc3REZXRhaWxzfFNob3dXaW5kb3d8U2lsZW50SW5zdGFsbHxTaWxlbnRVbkluc3RhbGx8U2xlZXB8U3BhY2VUZXh0c3xTdHJDbXB8U3RyQ21wU3xTdHJDcHl8U3RyTGVufFN1YkNhcHRpb258VGFyZ2V0fFVuaWNvZGV8VW5pbnN0YWxsQnV0dG9uVGV4dHxVbmluc3RhbGxDYXB0aW9ufFVuaW5zdGFsbEljb258VW5pbnN0YWxsU3ViQ2FwdGlvbnxVbmluc3RhbGxUZXh0fFVuaW5zdFBhZ2V8VW5SZWdETEx8VmFyfFZJQWRkVmVyc2lvbktleXxWSUZpbGVWZXJzaW9ufFZJUHJvZHVjdFZlcnNpb258V2luZG93SWNvbnxXcml0ZUlOSVN0cnxXcml0ZVJlZ0JpbnxXcml0ZVJlZ0RXT1JEfFdyaXRlUmVnRXhwYW5kU3RyfFdyaXRlUmVnTXVsdGlTdHJ8V3JpdGVSZWdOb25lfFdyaXRlUmVnU3RyfFdyaXRlVW5pbnN0YWxsZXJ8WFBTdHlsZSlcXGIvaSwgdG9rZW46IFwia2V5d29yZFwifSxcbiAgICB7cmVnZXg6IC9eXFxzKig/OkZ1bmN0aW9ufFBhZ2VFeHxTZWN0aW9uKD86R3JvdXApPylcXGIvaSwgdG9rZW46IFwia2V5d29yZFwiLCBpbmRlbnQ6IHRydWV9LFxuICAgIHtyZWdleDogL15cXHMqKD86KEZ1bmN0aW9ufFBhZ2VFeHxTZWN0aW9uKD86R3JvdXApPylFbmQpXFxiL2ksIHRva2VuOiBcImtleXdvcmRcIiwgZGVkZW50OiB0cnVlfSxcblxuICAgIC8vIENvbW1hbmQgT3B0aW9uc1xuICAgIHtyZWdleDogL1xcYig/OkFSQ0hJVkV8RklMRV9BVFRSSUJVVEVfQVJDSElWRXxGSUxFX0FUVFJJQlVURV9ISURERU58RklMRV9BVFRSSUJVVEVfTk9STUFMfEZJTEVfQVRUUklCVVRFX09GRkxJTkV8RklMRV9BVFRSSUJVVEVfUkVBRE9OTFl8RklMRV9BVFRSSUJVVEVfU1lTVEVNfEZJTEVfQVRUUklCVVRFX1RFTVBPUkFSWXxISURERU58SEtDQ3xIS0NSKDMyfDY0KT98SEtDVSgzMnw2NCk/fEhLRER8SEtFWV9DTEFTU0VTX1JPT1R8SEtFWV9DVVJSRU5UX0NPTkZJR3xIS0VZX0NVUlJFTlRfVVNFUnxIS0VZX0RZTl9EQVRBfEhLRVlfTE9DQUxfTUFDSElORXxIS0VZX1BFUkZPUk1BTkNFX0RBVEF8SEtFWV9VU0VSU3xIS0xNKDMyfDY0KT98SEtQRHxIS1V8SURBQk9SVHxJRENBTkNFTHxJRERfRElSfElERF9JTlNUfElERF9JTlNURklMRVN8SUREX0xJQ0VOU0V8SUREX1NFTENPTXxJRERfVU5JTlNUfElERF9WRVJJRll8SURJR05PUkV8SUROT3xJRE9LfElEUkVUUll8SURZRVN8TUJfQUJPUlRSRVRSWUlHTk9SRXxNQl9ERUZCVVRUT04xfE1CX0RFRkJVVFRPTjJ8TUJfREVGQlVUVE9OM3xNQl9ERUZCVVRUT040fE1CX0lDT05FWENMQU1BVElPTnxNQl9JQ09OSU5GT1JNQVRJT058TUJfSUNPTlFVRVNUSU9OfE1CX0lDT05TVE9QfE1CX09LfE1CX09LQ0FOQ0VMfE1CX1JFVFJZQ0FOQ0VMfE1CX1JJR0hUfE1CX1JUTFJFQURJTkd8TUJfU0VURk9SRUdST1VORHxNQl9UT1BNT1NUfE1CX1VTRVJJQ09OfE1CX1lFU05PfE1CX1lFU05PQ0FOQ0VMfE5PUk1BTHxPRkZMSU5FfFJFQURPTkxZfFNIQ1RYfFNIRUxMX0NPTlRFWFR8U1dfSElERXxTV19TSE9XREVGQVVMVHxTV19TSE9XTUFYSU1JWkVEfFNXX1NIT1dNSU5JTUlaRUR8U1dfU0hPV05PUk1BTHxTWVNURU18VEVNUE9SQVJZKVxcYi9pLCB0b2tlbjogXCJhdG9tXCJ9LFxuICAgIHtyZWdleDogL1xcYig/OmFkbWlufGFsbHxhbWQ2NC11bmljb2RlfGF1dG98Ym90aHxib3R0b218YnppcDJ8Y29tcG9uZW50c3xjdXJyZW50fGN1c3RvbXxkaXJlY3Rvcnl8ZmFsc2V8Zm9yY2V8aGlkZXxoaWdoZXN0fGlmZGlmZnxpZm5ld2VyfGluc3RmaWxlc3xsYXN0dXNlZHxsZWF2ZXxsZWZ0fGxpY2Vuc2V8bGlzdG9ubHl8bHptYXxuZXZlcnNob3d8bm9uZXxub3JtYWx8bm90c2V0fG9mZnxvbnxyaWdodHxzaG93fHNpbGVudHxzaWxlbnRsb2d8dGV4dG9ubHl8dG9wfHRydWV8dHJ5fHVuXFwuY29tcG9uZW50c3x1blxcLmN1c3RvbXx1blxcLmRpcmVjdG9yeXx1blxcLmluc3RmaWxlc3x1blxcLmxpY2Vuc2V8dW5pbnN0Q29uZmlybXx1c2VyfFdpbjEwfFdpbjd8V2luOHxXaW5WaXN0YXx4LTg2LShhbnNpfHVuaWNvZGUpfHpsaWIpXFxiL2ksIHRva2VuOiBcImJ1aWx0aW5cIn0sXG5cbiAgICAvLyBMb2dpY0xpYi5uc2hcbiAgICB7cmVnZXg6IC9cXCRcXHsoPzpBbmQoPzpJZig/Ok5vdCk/fFVubGVzcyl8QnJlYWt8Q2FzZSg/OjJ8M3w0fDV8RWxzZSk/fENvbnRpbnVlfERlZmF1bHR8RG8oPzpVbnRpbHxXaGlsZSk/fEVsc2UoPzpJZig/Ok5vdCk/fFVubGVzcyk/fEVuZCg/OklmfFNlbGVjdHxTd2l0Y2gpfEV4aXQoPzpEb3xGb3J8V2hpbGUpfEZvcig/OkVhY2gpP3xJZig/OkNtZHxOb3QoPzpUaGVuKT98VGhlbik/fExvb3AoPzpVbnRpbHxXaGlsZSk/fE9yKD86SWYoPzpOb3QpP3xVbmxlc3MpfFNlbGVjdHxTd2l0Y2h8VW5sZXNzfFdoaWxlKVxcfS9pLCB0b2tlbjogXCJ2YXJpYWJsZS0yXCIsIGluZGVudDogdHJ1ZX0sXG5cbiAgICAvLyBGaWxlRnVuYy5uc2hcbiAgICB7cmVnZXg6IC9cXCRcXHsoPzpCYW5uZXJUcmltUGF0aHxEaXJTdGF0ZXxEcml2ZVNwYWNlfEdldChCYXNlTmFtZXxEcml2ZXN8RXhlTmFtZXxFeGVQYXRofEZpbGVBdHRyaWJ1dGVzfEZpbGVFeHR8RmlsZU5hbWV8RmlsZVZlcnNpb258T3B0aW9uc3xPcHRpb25zU3xQYXJhbWV0ZXJzfFBhcmVudHxSb290fFNpemV8VGltZSl8TG9jYXRlfFJlZnJlc2hTaGVsbEljb25zKVxcfS9pLCB0b2tlbjogXCJ2YXJpYWJsZS0yXCIsIGRlZGVudDogdHJ1ZX0sXG5cbiAgICAvLyBNZW1lbnRvLm5zaFxuICAgIHtyZWdleDogL1xcJFxceyg/Ok1lbWVudG8oPzpTZWN0aW9uKD86RG9uZXxFbmR8UmVzdG9yZXxTYXZlKT98VW5zZWxlY3RlZFNlY3Rpb24pKVxcfS9pLCB0b2tlbjogXCJ2YXJpYWJsZS0yXCIsIGRlZGVudDogdHJ1ZX0sXG5cbiAgICAvLyBUZXh0RnVuYy5uc2hcbiAgICB7cmVnZXg6IC9cXCRcXHsoPzpDb25maWcoPzpSZWFkfFJlYWRTfFdyaXRlfFdyaXRlUyl8RmlsZSg/OkpvaW58UmVhZEZyb21FbmR8UmVjb2RlKXxMaW5lKD86RmluZHxSZWFkfFN1bSl8VGV4dCg/OkNvbXBhcmV8Q29tcGFyZVMpfFRyaW1OZXdMaW5lcylcXH0vaSwgdG9rZW46IFwidmFyaWFibGUtMlwiLCBkZWRlbnQ6IHRydWV9LFxuXG4gICAgLy8gV2luVmVyLm5zaFxuICAgIHtyZWdleDogL1xcJFxceyg/Oig/OkF0KD86TGVhc3R8TW9zdCl8SXMpKD86U2VydmljZVBhY2t8V2luKD86N3w4fDEwfDk1fDk4fDIwMCg/OjB8M3w4KD86UjIpPyl8TUV8TlQ0fFZpc3RhfFhQKSl8SXMoPzpOVHxTZXJ2ZXIpKVxcfS9pLCB0b2tlbjogXCJ2YXJpYWJsZVwiLCBkZWRlbnQ6IHRydWV9LFxuXG4gICAgLy8gV29yZEZ1bmMubnNoXG4gICAge3JlZ2V4OiAvXFwkXFx7KD86U3RyRmlsdGVyUz98VmVyc2lvbig/OkNvbXBhcmV8Q29udmVydCl8V29yZCg/OkFkZFM/fEZpbmQoPzooPzoyfDMpWCk/Uz98SW5zZXJ0Uz98UmVwbGFjZVM/KSlcXH0vaSwgdG9rZW46IFwia2V5d29yZFwiLCBkZWRlbnQ6IHRydWV9LFxuXG4gICAgLy8geDY0Lm5zaFxuICAgIHtyZWdleDogL1xcJFxceyg/OlJ1bm5pbmdYNjQpXFx9L2ksIHRva2VuOiBcInZhcmlhYmxlXCIsIGRlZGVudDogdHJ1ZX0sXG4gICAge3JlZ2V4OiAvXFwkXFx7KD86RGlzYWJsZXxFbmFibGUpWDY0RlNSZWRpcmVjdGlvblxcfS9pLCB0b2tlbjogXCJrZXl3b3JkXCIsIGRlZGVudDogdHJ1ZX0sXG5cbiAgICAvLyBMaW5lIENvbW1lbnRcbiAgICB7cmVnZXg6IC8oI3w7KS4qLywgdG9rZW46IFwiY29tbWVudFwifSxcblxuICAgIC8vIEJsb2NrIENvbW1lbnRcbiAgICB7cmVnZXg6IC9cXC9cXCovLCB0b2tlbjogXCJjb21tZW50XCIsIG5leHQ6IFwiY29tbWVudFwifSxcblxuICAgIC8vIE9wZXJhdG9yXG4gICAge3JlZ2V4OiAvWy0rXFwvKj08PiFdKy8sIHRva2VuOiBcIm9wZXJhdG9yXCJ9LFxuXG4gICAgLy8gVmFyaWFibGVcbiAgICB7cmVnZXg6IC9cXCRcXHdbXFx3XFwuXSovLCB0b2tlbjogXCJ2YXJpYWJsZVwifSxcblxuICAgIC8vIENvbnN0YW50XG4gICAge3JlZ2V4OiAvXFwke1tcXCFcXHdcXC46LV0rfS8sIHRva2VuOiBcInZhcmlhYmxlTmFtZS5jb25zdGFudFwifSxcblxuICAgIC8vIExhbmd1YWdlIFN0cmluZ1xuICAgIHtyZWdleDogL1xcJFxcKFtcXCFcXHdcXC46LV0rXFwpLywgdG9rZW46IFwiYXRvbVwifVxuICBdLFxuICBjb21tZW50OiBbXG4gICAge3JlZ2V4OiAvLio/XFwqXFwvLywgdG9rZW46IFwiY29tbWVudFwiLCBuZXh0OiBcInN0YXJ0XCJ9LFxuICAgIHtyZWdleDogLy4qLywgdG9rZW46IFwiY29tbWVudFwifVxuICBdLFxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBuYW1lOiBcIm5zaXNcIixcbiAgICBpbmRlbnRPbklucHV0OiAvXlxccyooKEZ1bmN0aW9ufFBhZ2VFeHxTZWN0aW9ufFNlY3Rpb24oR3JvdXApPylFbmR8KFxcIShlbmRpZnxtYWNyb2VuZCkpfFxcJFxceyhFbmQoSWZ8VW5sZXNzfFdoaWxlKXxMb29wKFVudGlsKXxOZXh0KVxcfSkkL2ksXG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiI1wiLCBibG9jazoge29wZW46IFwiLypcIiwgY2xvc2U6IFwiKi9cIn19XG4gIH1cbn0pO1xuXG4iLCJleHBvcnQgZnVuY3Rpb24gc2ltcGxlTW9kZShzdGF0ZXMpIHtcbiAgZW5zdXJlU3RhdGUoc3RhdGVzLCBcInN0YXJ0XCIpO1xuICB2YXIgc3RhdGVzXyA9IHt9LCBtZXRhID0gc3RhdGVzLmxhbmd1YWdlRGF0YSB8fCB7fSwgaGFzSW5kZW50YXRpb24gPSBmYWxzZTtcbiAgZm9yICh2YXIgc3RhdGUgaW4gc3RhdGVzKSBpZiAoc3RhdGUgIT0gbWV0YSAmJiBzdGF0ZXMuaGFzT3duUHJvcGVydHkoc3RhdGUpKSB7XG4gICAgdmFyIGxpc3QgPSBzdGF0ZXNfW3N0YXRlXSA9IFtdLCBvcmlnID0gc3RhdGVzW3N0YXRlXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yaWcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkYXRhID0gb3JpZ1tpXTtcbiAgICAgIGxpc3QucHVzaChuZXcgUnVsZShkYXRhLCBzdGF0ZXMpKTtcbiAgICAgIGlmIChkYXRhLmluZGVudCB8fCBkYXRhLmRlZGVudCkgaGFzSW5kZW50YXRpb24gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IG1ldGEubmFtZSxcbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7c3RhdGU6IFwic3RhcnRcIiwgcGVuZGluZzogbnVsbCwgaW5kZW50OiBoYXNJbmRlbnRhdGlvbiA/IFtdIDogbnVsbH07XG4gICAgfSxcbiAgICBjb3B5U3RhdGU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgcyA9IHtzdGF0ZTogc3RhdGUuc3RhdGUsIHBlbmRpbmc6IHN0YXRlLnBlbmRpbmcsIGluZGVudDogc3RhdGUuaW5kZW50ICYmIHN0YXRlLmluZGVudC5zbGljZSgwKX07XG4gICAgICBpZiAoc3RhdGUuc3RhY2spXG4gICAgICAgIHMuc3RhY2sgPSBzdGF0ZS5zdGFjay5zbGljZSgwKTtcbiAgICAgIHJldHVybiBzO1xuICAgIH0sXG4gICAgdG9rZW46IHRva2VuRnVuY3Rpb24oc3RhdGVzXyksXG4gICAgaW5kZW50OiBpbmRlbnRGdW5jdGlvbihzdGF0ZXNfLCBtZXRhKSxcbiAgICBsYW5ndWFnZURhdGE6IG1ldGFcbiAgfVxufTtcblxuZnVuY3Rpb24gZW5zdXJlU3RhdGUoc3RhdGVzLCBuYW1lKSB7XG4gIGlmICghc3RhdGVzLmhhc093blByb3BlcnR5KG5hbWUpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuZGVmaW5lZCBzdGF0ZSBcIiArIG5hbWUgKyBcIiBpbiBzaW1wbGUgbW9kZVwiKTtcbn1cblxuZnVuY3Rpb24gdG9SZWdleCh2YWwsIGNhcmV0KSB7XG4gIGlmICghdmFsKSByZXR1cm4gLyg/OikvO1xuICB2YXIgZmxhZ3MgPSBcIlwiO1xuICBpZiAodmFsIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgaWYgKHZhbC5pZ25vcmVDYXNlKSBmbGFncyA9IFwiaVwiO1xuICAgIHZhbCA9IHZhbC5zb3VyY2U7XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWdFeHAoKGNhcmV0ID09PSBmYWxzZSA/IFwiXCIgOiBcIl5cIikgKyBcIig/OlwiICsgdmFsICsgXCIpXCIsIGZsYWdzKTtcbn1cblxuZnVuY3Rpb24gYXNUb2tlbih2YWwpIHtcbiAgaWYgKCF2YWwpIHJldHVybiBudWxsO1xuICBpZiAodmFsLmFwcGx5KSByZXR1cm4gdmFsXG4gIGlmICh0eXBlb2YgdmFsID09IFwic3RyaW5nXCIpIHJldHVybiB2YWwucmVwbGFjZSgvXFwuL2csIFwiIFwiKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKylcbiAgICByZXN1bHQucHVzaCh2YWxbaV0gJiYgdmFsW2ldLnJlcGxhY2UoL1xcLi9nLCBcIiBcIikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBSdWxlKGRhdGEsIHN0YXRlcykge1xuICBpZiAoZGF0YS5uZXh0IHx8IGRhdGEucHVzaCkgZW5zdXJlU3RhdGUoc3RhdGVzLCBkYXRhLm5leHQgfHwgZGF0YS5wdXNoKTtcbiAgdGhpcy5yZWdleCA9IHRvUmVnZXgoZGF0YS5yZWdleCk7XG4gIHRoaXMudG9rZW4gPSBhc1Rva2VuKGRhdGEudG9rZW4pO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5mdW5jdGlvbiB0b2tlbkZ1bmN0aW9uKHN0YXRlcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nKSB7XG4gICAgICB2YXIgcGVuZCA9IHN0YXRlLnBlbmRpbmcuc2hpZnQoKTtcbiAgICAgIGlmIChzdGF0ZS5wZW5kaW5nLmxlbmd0aCA9PSAwKSBzdGF0ZS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIHN0cmVhbS5wb3MgKz0gcGVuZC50ZXh0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwZW5kLnRva2VuO1xuICAgIH1cblxuICAgIHZhciBjdXJTdGF0ZSA9IHN0YXRlc1tzdGF0ZS5zdGF0ZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJTdGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSBjdXJTdGF0ZVtpXTtcbiAgICAgIHZhciBtYXRjaGVzID0gKCFydWxlLmRhdGEuc29sIHx8IHN0cmVhbS5zb2woKSkgJiYgc3RyZWFtLm1hdGNoKHJ1bGUucmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKHJ1bGUuZGF0YS5uZXh0KSB7XG4gICAgICAgICAgc3RhdGUuc3RhdGUgPSBydWxlLmRhdGEubmV4dDtcbiAgICAgICAgfSBlbHNlIGlmIChydWxlLmRhdGEucHVzaCkge1xuICAgICAgICAgIChzdGF0ZS5zdGFjayB8fCAoc3RhdGUuc3RhY2sgPSBbXSkpLnB1c2goc3RhdGUuc3RhdGUpO1xuICAgICAgICAgIHN0YXRlLnN0YXRlID0gcnVsZS5kYXRhLnB1c2g7XG4gICAgICAgIH0gZWxzZSBpZiAocnVsZS5kYXRhLnBvcCAmJiBzdGF0ZS5zdGFjayAmJiBzdGF0ZS5zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICBzdGF0ZS5zdGF0ZSA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJ1bGUuZGF0YS5pbmRlbnQpXG4gICAgICAgICAgc3RhdGUuaW5kZW50LnB1c2goc3RyZWFtLmluZGVudGF0aW9uKCkgKyBzdHJlYW0uaW5kZW50VW5pdCk7XG4gICAgICAgIGlmIChydWxlLmRhdGEuZGVkZW50KVxuICAgICAgICAgIHN0YXRlLmluZGVudC5wb3AoKTtcbiAgICAgICAgdmFyIHRva2VuID0gcnVsZS50b2tlblxuICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4uYXBwbHkpIHRva2VuID0gdG9rZW4obWF0Y2hlcylcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMiAmJiBydWxlLnRva2VuICYmIHR5cGVvZiBydWxlLnRva2VuICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBzdGF0ZS5wZW5kaW5nID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDI7IGogPCBtYXRjaGVzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgaWYgKG1hdGNoZXNbal0pXG4gICAgICAgICAgICAgIHN0YXRlLnBlbmRpbmcucHVzaCh7dGV4dDogbWF0Y2hlc1tqXSwgdG9rZW46IHJ1bGUudG9rZW5baiAtIDFdfSk7XG4gICAgICAgICAgc3RyZWFtLmJhY2tVcChtYXRjaGVzWzBdLmxlbmd0aCAtIChtYXRjaGVzWzFdID8gbWF0Y2hlc1sxXS5sZW5ndGggOiAwKSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuICYmIHRva2VuLmpvaW4pIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW5bMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudEZ1bmN0aW9uKHN0YXRlcywgbWV0YSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgIGlmIChzdGF0ZS5pbmRlbnQgPT0gbnVsbCB8fCBtZXRhLmRvbnRJbmRlbnRTdGF0ZXMgJiYgbWV0YS5kb25lSW5kZW50U3RhdGUuaW5kZXhPZihzdGF0ZS5zdGF0ZSkgPiAtMSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICB2YXIgcG9zID0gc3RhdGUuaW5kZW50Lmxlbmd0aCAtIDEsIHJ1bGVzID0gc3RhdGVzW3N0YXRlLnN0YXRlXTtcbiAgICBzY2FuOiBmb3IgKDs7KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgICAgIGlmIChydWxlLmRhdGEuZGVkZW50ICYmIHJ1bGUuZGF0YS5kZWRlbnRJZkxpbmVTdGFydCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbSA9IHJ1bGUucmVnZXguZXhlYyh0ZXh0QWZ0ZXIpO1xuICAgICAgICAgIGlmIChtICYmIG1bMF0pIHtcbiAgICAgICAgICAgIHBvcy0tO1xuICAgICAgICAgICAgaWYgKHJ1bGUubmV4dCB8fCBydWxlLnB1c2gpIHJ1bGVzID0gc3RhdGVzW3J1bGUubmV4dCB8fCBydWxlLnB1c2hdO1xuICAgICAgICAgICAgdGV4dEFmdGVyID0gdGV4dEFmdGVyLnNsaWNlKG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlIHNjYW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHBvcyA8IDAgPyAwIDogc3RhdGUuaW5kZW50W3Bvc107XG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=