"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_mermaid_dist_flowDiagram-f303bdd6_js"],{

/***/ "../node_modules/dagre-d3-es/src/dagre-js/arrows.js":
/*!**********************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/arrows.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrows": () => (/* binding */ arrows),
/* harmony export */   "setArrows": () => (/* binding */ setArrows)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");




var arrows = {
  normal,
  vee,
  undirected,
};

function setArrows(value) {
  arrows = value;
}

function normal(parent, id, edge, type) {
  var marker = parent
    .append('marker')
    .attr('id', id)
    .attr('viewBox', '0 0 10 10')
    .attr('refX', 9)
    .attr('refY', 5)
    .attr('markerUnits', 'strokeWidth')
    .attr('markerWidth', 8)
    .attr('markerHeight', 6)
    .attr('orient', 'auto');

  var path = marker
    .append('path')
    .attr('d', 'M 0 0 L 10 5 L 0 10 z')
    .style('stroke-width', 1)
    .style('stroke-dasharray', '1,0');
  _util_js__WEBPACK_IMPORTED_MODULE_0__.applyStyle(path, edge[type + 'Style']);
  if (edge[type + 'Class']) {
    path.attr('class', edge[type + 'Class']);
  }
}

function vee(parent, id, edge, type) {
  var marker = parent
    .append('marker')
    .attr('id', id)
    .attr('viewBox', '0 0 10 10')
    .attr('refX', 9)
    .attr('refY', 5)
    .attr('markerUnits', 'strokeWidth')
    .attr('markerWidth', 8)
    .attr('markerHeight', 6)
    .attr('orient', 'auto');

  var path = marker
    .append('path')
    .attr('d', 'M 0 0 L 10 5 L 0 10 L 4 5 z')
    .style('stroke-width', 1)
    .style('stroke-dasharray', '1,0');
  _util_js__WEBPACK_IMPORTED_MODULE_0__.applyStyle(path, edge[type + 'Style']);
  if (edge[type + 'Class']) {
    path.attr('class', edge[type + 'Class']);
  }
}

function undirected(parent, id, edge, type) {
  var marker = parent
    .append('marker')
    .attr('id', id)
    .attr('viewBox', '0 0 10 10')
    .attr('refX', 9)
    .attr('refY', 5)
    .attr('markerUnits', 'strokeWidth')
    .attr('markerWidth', 8)
    .attr('markerHeight', 6)
    .attr('orient', 'auto');

  var path = marker
    .append('path')
    .attr('d', 'M 0 5 L 10 5')
    .style('stroke-width', 1)
    .style('stroke-dasharray', '1,0');
  _util_js__WEBPACK_IMPORTED_MODULE_0__.applyStyle(path, edge[type + 'Style']);
  if (edge[type + 'Class']) {
    path.attr('class', edge[type + 'Class']);
  }
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/create-clusters.js":
/*!*******************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/create-clusters.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createClusters": () => (/* binding */ createClusters),
/* harmony export */   "setCreateClusters": () => (/* binding */ setCreateClusters)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var _label_add_label_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label/add-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");






var createClusters = function (selection, g) {
  var clusters = g.nodes().filter(function (v) {
    return _util_js__WEBPACK_IMPORTED_MODULE_2__.isSubgraph(g, v);
  });
  var svgClusters = selection.selectAll('g.cluster').data(clusters, function (v) {
    return v;
  });

  _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(svgClusters.exit(), g).style('opacity', 0).remove();

  var enterSelection = svgClusters
    .enter()
    .append('g')
    .attr('class', 'cluster')
    .attr('id', function (v) {
      var node = g.node(v);
      return node.id;
    })
    .style('opacity', 0)
    .each(function (v) {
      var node = g.node(v);
      var thisGroup = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
      d3__WEBPACK_IMPORTED_MODULE_0__.select(this).append('rect');
      var labelGroup = thisGroup.append('g').attr('class', 'label');
      (0,_label_add_label_js__WEBPACK_IMPORTED_MODULE_1__.addLabel)(labelGroup, node, node.clusterLabelPos);
    });

  svgClusters = svgClusters.merge(enterSelection);

  svgClusters = _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(svgClusters, g).style('opacity', 1);

  svgClusters.selectAll('rect').each(function (c) {
    var node = g.node(c);
    var domCluster = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyStyle(domCluster, node.style);
  });

  return svgClusters;
};

function setCreateClusters(value) {
  createClusters = value;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js":
/*!**********************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEdgeLabels": () => (/* binding */ createEdgeLabels),
/* harmony export */   "setCreateEdgeLabels": () => (/* binding */ setCreateEdgeLabels)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/has.js");
/* harmony import */ var _label_add_label_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label/add-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");







let createEdgeLabels = function (selection, g) {
  var svgEdgeLabels = selection
    .selectAll('g.edgeLabel')
    .data(g.edges(), function (e) {
      return _util_js__WEBPACK_IMPORTED_MODULE_2__.edgeToId(e);
    })
    .classed('update', true);

  svgEdgeLabels.exit().remove();
  svgEdgeLabels.enter().append('g').classed('edgeLabel', true).style('opacity', 0);

  svgEdgeLabels = selection.selectAll('g.edgeLabel');

  svgEdgeLabels.each(function (e) {
    var root = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
    root.select('.label').remove();
    var edge = g.edge(e);
    var label = (0,_label_add_label_js__WEBPACK_IMPORTED_MODULE_1__.addLabel)(root, g.edge(e), 0).classed('label', true);
    var bbox = label.node().getBBox();

    if (edge.labelId) {
      label.attr('id', edge.labelId);
    }
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"](edge, 'width')) {
      edge.width = bbox.width;
    }
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"](edge, 'height')) {
      edge.height = bbox.height;
    }
  });

  var exitSelection;

  if (svgEdgeLabels.exit) {
    exitSelection = svgEdgeLabels.exit();
  } else {
    exitSelection = svgEdgeLabels.selectAll(null); // empty selection
  }

  _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(exitSelection, g).style('opacity', 0).remove();

  return svgEdgeLabels;
};

function setCreateEdgeLabels(value) {
  createEdgeLabels = value;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js":
/*!*********************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createEdgePaths": () => (/* binding */ createEdgePaths),
/* harmony export */   "setCreateEdgePaths": () => (/* binding */ setCreateEdgePaths)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/uniqueId.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/range.js");
/* harmony import */ var _intersect_intersect_node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersect/intersect-node.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");







var createEdgePaths = function (selection, g, arrows) {
  var previousPaths = selection
    .selectAll('g.edgePath')
    .data(g.edges(), function (e) {
      return _util_js__WEBPACK_IMPORTED_MODULE_2__.edgeToId(e);
    })
    .classed('update', true);

  var newPaths = enter(previousPaths, g);
  exit(previousPaths, g);

  var svgPaths = previousPaths.merge !== undefined ? previousPaths.merge(newPaths) : previousPaths;
  _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(svgPaths, g).style('opacity', 1);

  // Save DOM element in the path group, and set ID and class
  svgPaths.each(function (e) {
    var domEdge = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
    var edge = g.edge(e);
    edge.elem = this;

    if (edge.id) {
      domEdge.attr('id', edge.id);
    }

    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyClass(
      domEdge,
      edge['class'],
      (domEdge.classed('update') ? 'update ' : '') + 'edgePath'
    );
  });

  svgPaths.selectAll('path.path').each(function (e) {
    var edge = g.edge(e);
    edge.arrowheadId = lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"]('arrowhead');

    var domEdge = d3__WEBPACK_IMPORTED_MODULE_0__.select(this)
      .attr('marker-end', function () {
        return 'url(' + makeFragmentRef(location.href, edge.arrowheadId) + ')';
      })
      .style('fill', 'none');

    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(domEdge, g).attr('d', function (e) {
      return calcPoints(g, e);
    });

    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyStyle(domEdge, edge.style);
  });

  svgPaths.selectAll('defs *').remove();
  svgPaths.selectAll('defs').each(function (e) {
    var edge = g.edge(e);
    var arrowhead = arrows[edge.arrowhead];
    arrowhead(d3__WEBPACK_IMPORTED_MODULE_0__.select(this), edge.arrowheadId, edge, 'arrowhead');
  });

  return svgPaths;
};

function setCreateEdgePaths(value) {
  createEdgePaths = value;
}

function makeFragmentRef(url, fragmentId) {
  var baseUrl = url.split('#')[0];
  return baseUrl + '#' + fragmentId;
}

function calcPoints(g, e) {
  var edge = g.edge(e);
  var tail = g.node(e.v);
  var head = g.node(e.w);
  var points = edge.points.slice(1, edge.points.length - 1);
  points.unshift((0,_intersect_intersect_node_js__WEBPACK_IMPORTED_MODULE_1__.intersectNode)(tail, points[0]));
  points.push((0,_intersect_intersect_node_js__WEBPACK_IMPORTED_MODULE_1__.intersectNode)(head, points[points.length - 1]));

  return createLine(edge, points);
}

function createLine(edge, points) {
  // @ts-expect-error
  var line = (d3__WEBPACK_IMPORTED_MODULE_0__.line || d3__WEBPACK_IMPORTED_MODULE_0__.svg.line)()
    .x(function (d) {
      return d.x;
    })
    .y(function (d) {
      return d.y;
    });

  (line.curve || line.interpolate)(edge.curve);

  return line(points);
}

function getCoords(elem) {
  var bbox = elem.getBBox();
  var matrix = elem.ownerSVGElement
    .getScreenCTM()
    .inverse()
    .multiply(elem.getScreenCTM())
    .translate(bbox.width / 2, bbox.height / 2);
  return { x: matrix.e, y: matrix.f };
}

function enter(svgPaths, g) {
  var svgPathsEnter = svgPaths.enter().append('g').attr('class', 'edgePath').style('opacity', 0);
  svgPathsEnter
    .append('path')
    .attr('class', 'path')
    .attr('d', function (e) {
      var edge = g.edge(e);
      var sourceElem = g.node(e.v).elem;
      var points = lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"](edge.points.length).map(function () {
        return getCoords(sourceElem);
      });
      return createLine(edge, points);
    });
  svgPathsEnter.append('defs');
  return svgPathsEnter;
}

function exit(svgPaths, g) {
  var svgPathExit = svgPaths.exit();
  _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(svgPathExit, g).style('opacity', 0).remove();
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/create-nodes.js":
/*!****************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/create-nodes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNodes": () => (/* binding */ createNodes),
/* harmony export */   "setCreateNodes": () => (/* binding */ setCreateNodes)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/pick.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/has.js");
/* harmony import */ var _label_add_label_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label/add-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");







var createNodes = function (selection, g, shapes) {
  var simpleNodes = g.nodes().filter(function (v) {
    return !_util_js__WEBPACK_IMPORTED_MODULE_2__.isSubgraph(g, v);
  });
  var svgNodes = selection
    .selectAll('g.node')
    .data(simpleNodes, function (v) {
      return v;
    })
    .classed('update', true);

  svgNodes.exit().remove();

  svgNodes.enter().append('g').attr('class', 'node').style('opacity', 0);

  svgNodes = selection.selectAll('g.node');

  svgNodes.each(function (v) {
    var node = g.node(v);
    var thisGroup = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyClass(
      thisGroup,
      node['class'],
      (thisGroup.classed('update') ? 'update ' : '') + 'node'
    );

    thisGroup.select('g.label').remove();
    var labelGroup = thisGroup.append('g').attr('class', 'label');
    var labelDom = (0,_label_add_label_js__WEBPACK_IMPORTED_MODULE_1__.addLabel)(labelGroup, node);
    var shape = shapes[node.shape];
    var bbox = lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"](labelDom.node().getBBox(), 'width', 'height');

    node.elem = this;

    if (node.id) {
      thisGroup.attr('id', node.id);
    }
    if (node.labelId) {
      labelGroup.attr('id', node.labelId);
    }

    if (lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"](node, 'width')) {
      bbox.width = node.width;
    }
    if (lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"](node, 'height')) {
      bbox.height = node.height;
    }

    bbox.width += node.paddingLeft + node.paddingRight;
    bbox.height += node.paddingTop + node.paddingBottom;
    labelGroup.attr(
      'transform',
      'translate(' +
        (node.paddingLeft - node.paddingRight) / 2 +
        ',' +
        (node.paddingTop - node.paddingBottom) / 2 +
        ')'
    );

    var root = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);
    root.select('.label-container').remove();
    var shapeSvg = shape(root, bbox, node).classed('label-container', true);
    _util_js__WEBPACK_IMPORTED_MODULE_2__.applyStyle(shapeSvg, node.style);

    var shapeBBox = shapeSvg.node().getBBox();
    node.width = shapeBBox.width;
    node.height = shapeBBox.height;
  });

  var exitSelection;

  if (svgNodes.exit) {
    exitSelection = svgNodes.exit();
  } else {
    exitSelection = svgNodes.selectAll(null); // empty selection
  }

  _util_js__WEBPACK_IMPORTED_MODULE_2__.applyTransition(exitSelection, g).style('opacity', 0).remove();

  return svgNodes;
};

function setCreateNodes(value) {
  createNodes = value;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/index.js":
/*!*******************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "circle": () => (/* reexport module object */ _intersect_circle_js__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "ellipse": () => (/* reexport module object */ _intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "node": () => (/* reexport module object */ _intersect_node_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "polygon": () => (/* reexport module object */ _intersect_polygon_js__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "rect": () => (/* reexport module object */ _intersect_rect_js__WEBPACK_IMPORTED_MODULE_4__)
/* harmony export */ });
/* harmony import */ var _intersect_node_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersect-node.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js");
/* harmony import */ var _intersect_circle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersect-circle.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js");
/* harmony import */ var _intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./intersect-ellipse.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js");
/* harmony import */ var _intersect_polygon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./intersect-polygon.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js");
/* harmony import */ var _intersect_rect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./intersect-rect.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js");









/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js":
/*!******************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectCircle": () => (/* binding */ intersectCircle)
/* harmony export */ });
/* harmony import */ var _intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersect-ellipse.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js");




function intersectCircle(node, rx, point) {
  return (0,_intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_0__.intersectEllipse)(node, rx, rx, point);
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectEllipse": () => (/* binding */ intersectEllipse)
/* harmony export */ });


function intersectEllipse(node, rx, ry, point) {
  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html

  var cx = node.x;
  var cy = node.y;

  var px = cx - point.x;
  var py = cy - point.y;

  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);

  var dx = Math.abs((rx * ry * px) / det);
  if (point.x < cx) {
    dx = -dx;
  }
  var dy = Math.abs((rx * ry * py) / det);
  if (point.y < cy) {
    dy = -dy;
  }

  return { x: cx + dx, y: cy + dy };
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js":
/*!****************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectLine": () => (/* binding */ intersectLine)
/* harmony export */ });


/*
 * Returns the point at which two lines, p and q, intersect or returns
 * undefined if they do not intersect.
 */
function intersectLine(p1, p2, q1, q2) {
  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,
  // p7 and p473.

  var a1, a2, b1, b2, c1, c2;
  var r1, r2, r3, r4;
  var denom, offset, num;
  var x, y;

  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +
  // b1 y + c1 = 0.
  a1 = p2.y - p1.y;
  b1 = p1.x - p2.x;
  c1 = p2.x * p1.y - p1.x * p2.y;

  // Compute r3 and r4.
  r3 = a1 * q1.x + b1 * q1.y + c1;
  r4 = a1 * q2.x + b1 * q2.y + c1;

  // Check signs of r3 and r4. If both point 3 and point 4 lie on
  // same side of line 1, the line segments do not intersect.
  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {
    return /*DONT_INTERSECT*/;
  }

  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0
  a2 = q2.y - q1.y;
  b2 = q1.x - q2.x;
  c2 = q2.x * q1.y - q1.x * q2.y;

  // Compute r1 and r2
  r1 = a2 * p1.x + b2 * p1.y + c2;
  r2 = a2 * p2.x + b2 * p2.y + c2;

  // Check signs of r1 and r2. If both point 1 and point 2 lie
  // on same side of second line segment, the line segments do
  // not intersect.
  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {
    return /*DONT_INTERSECT*/;
  }

  // Line segments intersect: compute intersection point.
  denom = a1 * b2 - a2 * b1;
  if (denom === 0) {
    return /*COLLINEAR*/;
  }

  offset = Math.abs(denom / 2);

  // The denom/2 is to get rounding instead of truncating. It
  // is added or subtracted to the numerator, depending upon the
  // sign of the numerator.
  num = b1 * c2 - b2 * c1;
  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;

  num = a2 * c1 - a1 * c2;
  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;

  return { x: x, y: y };
}

function sameSign(r1, r2) {
  return r1 * r2 > 0;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js":
/*!****************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-node.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectNode": () => (/* binding */ intersectNode)
/* harmony export */ });


function intersectNode(node, point) {
  return node.intersect(point);
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectPolygon": () => (/* binding */ intersectPolygon)
/* harmony export */ });
/* harmony import */ var _intersect_line_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersect-line.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-line.js");




/*
 * Returns the point ({x, y}) at which the point argument intersects with the
 * node argument assuming that it has the shape specified by polygon.
 */
function intersectPolygon(node, polyPoints, point) {
  var x1 = node.x;
  var y1 = node.y;

  var intersections = [];

  var minX = Number.POSITIVE_INFINITY;
  var minY = Number.POSITIVE_INFINITY;
  polyPoints.forEach(function (entry) {
    minX = Math.min(minX, entry.x);
    minY = Math.min(minY, entry.y);
  });

  var left = x1 - node.width / 2 - minX;
  var top = y1 - node.height / 2 - minY;

  for (var i = 0; i < polyPoints.length; i++) {
    var p1 = polyPoints[i];
    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];
    var intersect = (0,_intersect_line_js__WEBPACK_IMPORTED_MODULE_0__.intersectLine)(
      node,
      point,
      { x: left + p1.x, y: top + p1.y },
      { x: left + p2.x, y: top + p2.y }
    );
    if (intersect) {
      intersections.push(intersect);
    }
  }

  if (!intersections.length) {
    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);
    return node;
  }

  if (intersections.length > 1) {
    // More intersections, find the one nearest to edge end point
    intersections.sort(function (p, q) {
      var pdx = p.x - point.x;
      var pdy = p.y - point.y;
      var distp = Math.sqrt(pdx * pdx + pdy * pdy);

      var qdx = q.x - point.x;
      var qdy = q.y - point.y;
      var distq = Math.sqrt(qdx * qdx + qdy * qdy);

      return distp < distq ? -1 : distp === distq ? 0 : 1;
    });
  }
  return intersections[0];
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js":
/*!****************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersectRect": () => (/* binding */ intersectRect)
/* harmony export */ });


function intersectRect(node, point) {
  var x = node.x;
  var y = node.y;

  // Rectangle intersection algorithm from:
  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
  var dx = point.x - x;
  var dy = point.y - y;
  var w = node.width / 2;
  var h = node.height / 2;

  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    // Intersection is top or bottom of rect.
    if (dy < 0) {
      h = -h;
    }
    sx = dy === 0 ? 0 : (h * dx) / dy;
    sy = h;
  } else {
    // Intersection is left or right of rect.
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = dx === 0 ? 0 : (w * dy) / dx;
  }

  return { x: x + sx, y: y + sy };
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js":
/*!*******************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/label/add-label.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addLabel": () => (/* binding */ addLabel)
/* harmony export */ });
/* harmony import */ var _add_html_label_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-html-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js");
/* harmony import */ var _add_svg_label_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-svg-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js");
/* harmony import */ var _add_text_label_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-text-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js");






function addLabel(root, node, location) {
  var label = node.label;
  var labelSvg = root.append('g');

  // Allow the label to be a string, a function that returns a DOM element, or
  // a DOM element itself.
  if (node.labelType === 'svg') {
    (0,_add_svg_label_js__WEBPACK_IMPORTED_MODULE_1__.addSVGLabel)(labelSvg, node);
  } else if (typeof label !== 'string' || node.labelType === 'html') {
    (0,_add_html_label_js__WEBPACK_IMPORTED_MODULE_0__.addHtmlLabel)(labelSvg, node);
  } else {
    (0,_add_text_label_js__WEBPACK_IMPORTED_MODULE_2__.addTextLabel)(labelSvg, node);
  }

  var labelBBox = labelSvg.node().getBBox();
  var y;
  switch (location) {
    case 'top':
      y = -node.height / 2;
      break;
    case 'bottom':
      y = node.height / 2 - labelBBox.height;
      break;
    default:
      y = -labelBBox.height / 2;
  }
  labelSvg.attr('transform', 'translate(' + -labelBBox.width / 2 + ',' + y + ')');

  return labelSvg;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js":
/*!***********************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/label/add-svg-label.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addSVGLabel": () => (/* binding */ addSVGLabel)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");




function addSVGLabel(root, node) {
  var domNode = root;

  domNode.node().appendChild(node.label);

  _util_js__WEBPACK_IMPORTED_MODULE_0__.applyStyle(domNode, node.labelStyle);

  return domNode;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js":
/*!************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/label/add-text-label.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addTextLabel": () => (/* binding */ addTextLabel)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");




/*
 * Attaches a text label to the specified root. Handles escape sequences.
 */
function addTextLabel(root, node) {
  var domNode = root.append('text');

  var lines = processEscapeSequences(node.label).split('\n');
  for (var i = 0; i < lines.length; i++) {
    domNode
      .append('tspan')
      .attr('xml:space', 'preserve')
      .attr('dy', '1em')
      .attr('x', '1')
      .text(lines[i]);
  }

  _util_js__WEBPACK_IMPORTED_MODULE_0__.applyStyle(domNode, node.labelStyle);

  return domNode;
}

function processEscapeSequences(text) {
  var newText = '';
  var escaped = false;
  var ch;
  for (var i = 0; i < text.length; ++i) {
    ch = text[i];
    if (escaped) {
      switch (ch) {
        case 'n':
          newText += '\n';
          break;
        default:
          newText += ch;
      }
      escaped = false;
    } else if (ch === '\\') {
      escaped = true;
    } else {
      newText += ch;
    }
  }
  return newText;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/position-clusters.js":
/*!*********************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/position-clusters.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "positionClusters": () => (/* binding */ positionClusters)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");





function positionClusters(selection, g) {
  var created = selection.filter(function () {
    return !d3__WEBPACK_IMPORTED_MODULE_0__.select(this).classed('update');
  });

  function translate(v) {
    var node = g.node(v);
    return 'translate(' + node.x + ',' + node.y + ')';
  }

  created.attr('transform', translate);

  _util_js__WEBPACK_IMPORTED_MODULE_1__.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);

  _util_js__WEBPACK_IMPORTED_MODULE_1__.applyTransition(created.selectAll('rect'), g)
    .attr('width', function (v) {
      return g.node(v).width;
    })
    .attr('height', function (v) {
      return g.node(v).height;
    })
    .attr('x', function (v) {
      var node = g.node(v);
      return -node.width / 2;
    })
    .attr('y', function (v) {
      var node = g.node(v);
      return -node.height / 2;
    });
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js":
/*!************************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "positionEdgeLabels": () => (/* binding */ positionEdgeLabels)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/has.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");






function positionEdgeLabels(selection, g) {
  var created = selection.filter(function () {
    return !d3__WEBPACK_IMPORTED_MODULE_0__.select(this).classed('update');
  });

  function translate(e) {
    var edge = g.edge(e);
    return lodash_es__WEBPACK_IMPORTED_MODULE_2__["default"](edge, 'x') ? 'translate(' + edge.x + ',' + edge.y + ')' : '';
  }

  created.attr('transform', translate);

  _util_js__WEBPACK_IMPORTED_MODULE_1__.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/position-nodes.js":
/*!******************************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/position-nodes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "positionNodes": () => (/* binding */ positionNodes)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");





function positionNodes(selection, g) {
  var created = selection.filter(function () {
    return !d3__WEBPACK_IMPORTED_MODULE_0__.select(this).classed('update');
  });

  function translate(v) {
    var node = g.node(v);
    return 'translate(' + node.x + ',' + node.y + ')';
  }

  created.attr('transform', translate);

  _util_js__WEBPACK_IMPORTED_MODULE_1__.applyTransition(selection, g).style('opacity', 1).attr('transform', translate);
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/render.js":
/*!**********************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/render.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/has.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/defaults.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash-es */ "../node_modules/lodash-es/forEach.js");
/* harmony import */ var _dagre_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dagre/index.js */ "../node_modules/dagre-d3-es/src/dagre/index.js");
/* harmony import */ var _arrows_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrows.js */ "../node_modules/dagre-d3-es/src/dagre-js/arrows.js");
/* harmony import */ var _create_clusters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./create-clusters.js */ "../node_modules/dagre-d3-es/src/dagre-js/create-clusters.js");
/* harmony import */ var _create_edge_labels_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./create-edge-labels.js */ "../node_modules/dagre-d3-es/src/dagre-js/create-edge-labels.js");
/* harmony import */ var _create_edge_paths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./create-edge-paths.js */ "../node_modules/dagre-d3-es/src/dagre-js/create-edge-paths.js");
/* harmony import */ var _create_nodes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create-nodes.js */ "../node_modules/dagre-d3-es/src/dagre-js/create-nodes.js");
/* harmony import */ var _position_clusters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./position-clusters.js */ "../node_modules/dagre-d3-es/src/dagre-js/position-clusters.js");
/* harmony import */ var _position_edge_labels_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./position-edge-labels.js */ "../node_modules/dagre-d3-es/src/dagre-js/position-edge-labels.js");
/* harmony import */ var _position_nodes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./position-nodes.js */ "../node_modules/dagre-d3-es/src/dagre-js/position-nodes.js");
/* harmony import */ var _shapes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shapes.js */ "../node_modules/dagre-d3-es/src/dagre-js/shapes.js");















// This design is based on http://bost.ocks.org/mike/chart/.
function render() {
  var fn = function (svg, g) {
    preProcessGraph(g);

    var outputGroup = createOrSelectGroup(svg, 'output');
    var clustersGroup = createOrSelectGroup(outputGroup, 'clusters');
    var edgePathsGroup = createOrSelectGroup(outputGroup, 'edgePaths');
    var edgeLabels = (0,_create_edge_labels_js__WEBPACK_IMPORTED_MODULE_4__.createEdgeLabels)(createOrSelectGroup(outputGroup, 'edgeLabels'), g);
    var nodes = (0,_create_nodes_js__WEBPACK_IMPORTED_MODULE_6__.createNodes)(createOrSelectGroup(outputGroup, 'nodes'), g, _shapes_js__WEBPACK_IMPORTED_MODULE_10__.shapes);

    (0,_dagre_index_js__WEBPACK_IMPORTED_MODULE_1__.layout)(g);

    (0,_position_nodes_js__WEBPACK_IMPORTED_MODULE_9__.positionNodes)(nodes, g);
    (0,_position_edge_labels_js__WEBPACK_IMPORTED_MODULE_8__.positionEdgeLabels)(edgeLabels, g);
    (0,_create_edge_paths_js__WEBPACK_IMPORTED_MODULE_5__.createEdgePaths)(edgePathsGroup, g, _arrows_js__WEBPACK_IMPORTED_MODULE_2__.arrows);

    var clusters = (0,_create_clusters_js__WEBPACK_IMPORTED_MODULE_3__.createClusters)(clustersGroup, g);
    (0,_position_clusters_js__WEBPACK_IMPORTED_MODULE_7__.positionClusters)(clusters, g);

    postProcessGraph(g);
  };

  fn.createNodes = function (value) {
    if (!arguments.length) return _create_nodes_js__WEBPACK_IMPORTED_MODULE_6__.createNodes;
    (0,_create_nodes_js__WEBPACK_IMPORTED_MODULE_6__.setCreateNodes)(value);
    return fn;
  };

  fn.createClusters = function (value) {
    if (!arguments.length) return _create_clusters_js__WEBPACK_IMPORTED_MODULE_3__.createClusters;
    (0,_create_clusters_js__WEBPACK_IMPORTED_MODULE_3__.setCreateClusters)(value);
    return fn;
  };

  fn.createEdgeLabels = function (value) {
    if (!arguments.length) return _create_edge_labels_js__WEBPACK_IMPORTED_MODULE_4__.createEdgeLabels;
    (0,_create_edge_labels_js__WEBPACK_IMPORTED_MODULE_4__.setCreateEdgeLabels)(value);
    return fn;
  };

  fn.createEdgePaths = function (value) {
    if (!arguments.length) return _create_edge_paths_js__WEBPACK_IMPORTED_MODULE_5__.createEdgePaths;
    (0,_create_edge_paths_js__WEBPACK_IMPORTED_MODULE_5__.setCreateEdgePaths)(value);
    return fn;
  };

  fn.shapes = function (value) {
    if (!arguments.length) return _shapes_js__WEBPACK_IMPORTED_MODULE_10__.shapes;
    (0,_shapes_js__WEBPACK_IMPORTED_MODULE_10__.setShapes)(value);
    return fn;
  };

  fn.arrows = function (value) {
    if (!arguments.length) return _arrows_js__WEBPACK_IMPORTED_MODULE_2__.arrows;
    (0,_arrows_js__WEBPACK_IMPORTED_MODULE_2__.setArrows)(value);
    return fn;
  };

  return fn;
}

var NODE_DEFAULT_ATTRS = {
  paddingLeft: 10,
  paddingRight: 10,
  paddingTop: 10,
  paddingBottom: 10,
  rx: 0,
  ry: 0,
  shape: 'rect',
};

var EDGE_DEFAULT_ATTRS = {
  arrowhead: 'normal',
  curve: d3__WEBPACK_IMPORTED_MODULE_0__.curveLinear,
};

function preProcessGraph(g) {
  g.nodes().forEach(function (v) {
    var node = g.node(v);
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'label') && !g.children(v).length) {
      node.label = v;
    }

    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'paddingX')) {
      lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"](node, {
        paddingLeft: node.paddingX,
        paddingRight: node.paddingX,
      });
    }

    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'paddingY')) {
      lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"](node, {
        paddingTop: node.paddingY,
        paddingBottom: node.paddingY,
      });
    }

    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'padding')) {
      lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"](node, {
        paddingLeft: node.padding,
        paddingRight: node.padding,
        paddingTop: node.padding,
        paddingBottom: node.padding,
      });
    }

    lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"](node, NODE_DEFAULT_ATTRS);

    lodash_es__WEBPACK_IMPORTED_MODULE_13__["default"](['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'], function (k) {
      node[k] = Number(node[k]);
    });

    // Save dimensions for restore during post-processing
    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'width')) {
      node._prevWidth = node.width;
    }
    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, 'height')) {
      node._prevHeight = node.height;
    }
  });

  g.edges().forEach(function (e) {
    var edge = g.edge(e);
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](edge, 'label')) {
      edge.label = '';
    }
    lodash_es__WEBPACK_IMPORTED_MODULE_12__["default"](edge, EDGE_DEFAULT_ATTRS);
  });
}

function postProcessGraph(g) {
  lodash_es__WEBPACK_IMPORTED_MODULE_13__["default"](g.nodes(), function (v) {
    var node = g.node(v);

    // Restore original dimensions
    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, '_prevWidth')) {
      node.width = node._prevWidth;
    } else {
      delete node.width;
    }

    if (lodash_es__WEBPACK_IMPORTED_MODULE_11__["default"](node, '_prevHeight')) {
      node.height = node._prevHeight;
    } else {
      delete node.height;
    }

    delete node._prevWidth;
    delete node._prevHeight;
  });
}

function createOrSelectGroup(root, name) {
  var selection = root.select('g.' + name);
  if (selection.empty()) {
    selection = root.append('g').attr('class', name);
  }
  return selection;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/dagre-js/shapes.js":
/*!**********************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/dagre-js/shapes.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setShapes": () => (/* binding */ setShapes),
/* harmony export */   "shapes": () => (/* binding */ shapes)
/* harmony export */ });
/* harmony import */ var _intersect_intersect_circle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersect/intersect-circle.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-circle.js");
/* harmony import */ var _intersect_intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersect/intersect-ellipse.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-ellipse.js");
/* harmony import */ var _intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./intersect/intersect-polygon.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js");
/* harmony import */ var _intersect_intersect_rect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./intersect/intersect-rect.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js");







var shapes = {
  rect,
  ellipse,
  circle,
  diamond,
};

function setShapes(value) {
  shapes = value;
}

function rect(parent, bbox, node) {
  var shapeSvg = parent
    .insert('rect', ':first-child')
    .attr('rx', node.rx)
    .attr('ry', node.ry)
    .attr('x', -bbox.width / 2)
    .attr('y', -bbox.height / 2)
    .attr('width', bbox.width)
    .attr('height', bbox.height);

  node.intersect = function (point) {
    return (0,_intersect_intersect_rect_js__WEBPACK_IMPORTED_MODULE_3__.intersectRect)(node, point);
  };

  return shapeSvg;
}

function ellipse(parent, bbox, node) {
  var rx = bbox.width / 2;
  var ry = bbox.height / 2;
  var shapeSvg = parent
    .insert('ellipse', ':first-child')
    .attr('x', -bbox.width / 2)
    .attr('y', -bbox.height / 2)
    .attr('rx', rx)
    .attr('ry', ry);

  node.intersect = function (point) {
    return (0,_intersect_intersect_ellipse_js__WEBPACK_IMPORTED_MODULE_1__.intersectEllipse)(node, rx, ry, point);
  };

  return shapeSvg;
}

function circle(parent, bbox, node) {
  var r = Math.max(bbox.width, bbox.height) / 2;
  var shapeSvg = parent
    .insert('circle', ':first-child')
    .attr('x', -bbox.width / 2)
    .attr('y', -bbox.height / 2)
    .attr('r', r);

  node.intersect = function (point) {
    return (0,_intersect_intersect_circle_js__WEBPACK_IMPORTED_MODULE_0__.intersectCircle)(node, r, point);
  };

  return shapeSvg;
}

// Circumscribe an ellipse for the bounding box with a diamond shape. I derived
// the function to calculate the diamond shape from:
// http://mathforum.org/kb/message.jspa?messageID=3750236
function diamond(parent, bbox, node) {
  var w = (bbox.width * Math.SQRT2) / 2;
  var h = (bbox.height * Math.SQRT2) / 2;
  var points = [
    { x: 0, y: -h },
    { x: -w, y: 0 },
    { x: 0, y: h },
    { x: w, y: 0 },
  ];
  var shapeSvg = parent.insert('polygon', ':first-child').attr(
    'points',
    points
      .map(function (p) {
        return p.x + ',' + p.y;
      })
      .join(' ')
  );

  node.intersect = function (p) {
    return (0,_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_2__.intersectPolygon)(node, points, p);
  };

  return shapeSvg;
}


/***/ }),

/***/ "../node_modules/dagre-d3-es/src/index.js":
/*!************************************************!*\
  !*** ../node_modules/dagre-d3-es/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "graphlib": () => (/* reexport module object */ _graphlib_index_js__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "intersect": () => (/* reexport module object */ _dagre_js_intersect_index_js__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "render": () => (/* reexport safe */ _dagre_js_render_js__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _dagre_js_render_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dagre-js/render.js */ "../node_modules/dagre-d3-es/src/dagre-js/render.js");
/* harmony import */ var _graphlib_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graphlib/index.js */ "../node_modules/dagre-d3-es/src/graphlib/index.js");
/* harmony import */ var _dagre_js_intersect_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dagre-js/intersect/index.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/index.js");








/***/ }),

/***/ "../node_modules/mermaid/dist/flowDiagram-f303bdd6.js":
/*!************************************************************!*\
  !*** ../node_modules/mermaid/dist/flowDiagram-f303bdd6.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diagram": () => (/* binding */ diagram)
/* harmony export */ });
/* harmony import */ var _flowDb_fa1288b0_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./flowDb-fa1288b0.js */ "../node_modules/mermaid/dist/flowDb-fa1288b0.js");
/* harmony import */ var dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dagre-d3-es/src/graphlib/index.js */ "../node_modules/dagre-d3-es/src/graphlib/index.js");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ "../node_modules/d3/src/index.js");
/* harmony import */ var _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./mermaid-0d192ec3.js */ "../node_modules/mermaid/dist/mermaid-0d192ec3.js");
/* harmony import */ var dagre_d3_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dagre-d3-es */ "../node_modules/dagre-d3-es/src/index.js");
/* harmony import */ var dagre_d3_es_src_dagre_js_util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dagre-d3-es/src/dagre-js/util.js */ "../node_modules/dagre-d3-es/src/dagre-js/util.js");
/* harmony import */ var dagre_d3_es_src_dagre_js_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dagre-d3-es/src/dagre-js/label/add-html-label.js */ "../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js");
/* harmony import */ var dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js");
/* harmony import */ var dagre_d3_es_src_dagre_js_intersect_intersect_rect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dagre-d3-es/src/dagre-js/intersect/intersect-rect.js */ "../node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-rect.js");
/* harmony import */ var _styles_0671a096_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./styles-0671a096.js */ "../node_modules/mermaid/dist/styles-0671a096.js");
/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ts-dedent */ "../node_modules/ts-dedent/esm/index.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! dayjs */ "../node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @braintree/sanitize-url */ "../node_modules/@braintree/sanitize-url/dist/index.js");
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! dompurify */ "../node_modules/dompurify/dist/purify.js");
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! dagre-d3-es/src/dagre/index.js */ "../node_modules/dagre-d3-es/src/dagre/index.js");
/* harmony import */ var dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! dagre-d3-es/src/graphlib/json.js */ "../node_modules/dagre-d3-es/src/graphlib/json.js");

























function question(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const s = (w + h) * 0.9;
  const points = [
    { x: s / 2, y: 0 },
    { x: s, y: -s / 2 },
    { x: s / 2, y: -s },
    { x: 0, y: -s / 2 }
  ];
  const shapeSvg = insertPolygonShape(parent, s, s, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function hexagon(parent, bbox, node) {
  const f = 4;
  const h = bbox.height;
  const m = h / f;
  const w = bbox.width + 2 * m;
  const points = [
    { x: m, y: 0 },
    { x: w - m, y: 0 },
    { x: w, y: -h / 2 },
    { x: w - m, y: -h },
    { x: m, y: -h },
    { x: 0, y: -h / 2 }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function rect_left_inv_arrow(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: -h / 2, y: 0 },
    { x: w, y: 0 },
    { x: w, y: -h },
    { x: -h / 2, y: -h },
    { x: 0, y: -h / 2 }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function lean_right(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: -2 * h / 6, y: 0 },
    { x: w - h / 6, y: 0 },
    { x: w + 2 * h / 6, y: -h },
    { x: h / 6, y: -h }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function lean_left(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: 2 * h / 6, y: 0 },
    { x: w + h / 6, y: 0 },
    { x: w - 2 * h / 6, y: -h },
    { x: -h / 6, y: -h }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function trapezoid(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: -2 * h / 6, y: 0 },
    { x: w + 2 * h / 6, y: 0 },
    { x: w - h / 6, y: -h },
    { x: h / 6, y: -h }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function inv_trapezoid(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: h / 6, y: 0 },
    { x: w - h / 6, y: 0 },
    { x: w + 2 * h / 6, y: -h },
    { x: -2 * h / 6, y: -h }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function rect_right_inv_arrow(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: 0, y: 0 },
    { x: w + h / 2, y: 0 },
    { x: w, y: -h / 2 },
    { x: w + h / 2, y: -h },
    { x: 0, y: -h }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function stadium(parent, bbox, node) {
  const h = bbox.height;
  const w = bbox.width + h / 4;
  const shapeSvg = parent.insert("rect", ":first-child").attr("rx", h / 2).attr("ry", h / 2).attr("x", -w / 2).attr("y", -h / 2).attr("width", w).attr("height", h);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_rect_js__WEBPACK_IMPORTED_MODULE_6__.intersectRect)(node, point);
  };
  return shapeSvg;
}
function subroutine(parent, bbox, node) {
  const w = bbox.width;
  const h = bbox.height;
  const points = [
    { x: 0, y: 0 },
    { x: w, y: 0 },
    { x: w, y: -h },
    { x: 0, y: -h },
    { x: 0, y: 0 },
    { x: -8, y: 0 },
    { x: w + 8, y: 0 },
    { x: w + 8, y: -h },
    { x: -8, y: -h },
    { x: -8, y: 0 }
  ];
  const shapeSvg = insertPolygonShape(parent, w, h, points);
  node.intersect = function(point) {
    return (0,dagre_d3_es_src_dagre_js_intersect_intersect_polygon_js__WEBPACK_IMPORTED_MODULE_5__.intersectPolygon)(node, points, point);
  };
  return shapeSvg;
}
function cylinder(parent, bbox, node) {
  const w = bbox.width;
  const rx = w / 2;
  const ry = rx / (2.5 + w / 50);
  const h = bbox.height + ry;
  const shape = "M 0," + ry + " a " + rx + "," + ry + " 0,0,0 " + w + " 0 a " + rx + "," + ry + " 0,0,0 " + -w + " 0 l 0," + h + " a " + rx + "," + ry + " 0,0,0 " + w + " 0 l 0," + -h;
  const shapeSvg = parent.attr("label-offset-y", ry).insert("path", ":first-child").attr("d", shape).attr("transform", "translate(" + -w / 2 + "," + -(h / 2 + ry) + ")");
  node.intersect = function(point) {
    const pos = (0,dagre_d3_es_src_dagre_js_intersect_intersect_rect_js__WEBPACK_IMPORTED_MODULE_6__.intersectRect)(node, point);
    const x = pos.x - node.x;
    if (rx != 0 && (Math.abs(x) < node.width / 2 || Math.abs(x) == node.width / 2 && Math.abs(pos.y - node.y) > node.height / 2 - ry)) {
      let y = ry * ry * (1 - x * x / (rx * rx));
      if (y != 0) {
        y = Math.sqrt(y);
      }
      y = ry - y;
      if (point.y - node.y > 0) {
        y = -y;
      }
      pos.y += y;
    }
    return pos;
  };
  return shapeSvg;
}
function addToRender(render2) {
  render2.shapes().question = question;
  render2.shapes().hexagon = hexagon;
  render2.shapes().stadium = stadium;
  render2.shapes().subroutine = subroutine;
  render2.shapes().cylinder = cylinder;
  render2.shapes().rect_left_inv_arrow = rect_left_inv_arrow;
  render2.shapes().lean_right = lean_right;
  render2.shapes().lean_left = lean_left;
  render2.shapes().trapezoid = trapezoid;
  render2.shapes().inv_trapezoid = inv_trapezoid;
  render2.shapes().rect_right_inv_arrow = rect_right_inv_arrow;
}
function addToRenderV2(addShape) {
  addShape({ question });
  addShape({ hexagon });
  addShape({ stadium });
  addShape({ subroutine });
  addShape({ cylinder });
  addShape({ rect_left_inv_arrow });
  addShape({ lean_right });
  addShape({ lean_left });
  addShape({ trapezoid });
  addShape({ inv_trapezoid });
  addShape({ rect_right_inv_arrow });
}
function insertPolygonShape(parent, w, h, points) {
  return parent.insert("polygon", ":first-child").attr(
    "points",
    points.map(function(d) {
      return d.x + "," + d.y;
    }).join(" ")
  ).attr("transform", "translate(" + -w / 2 + "," + h / 2 + ")");
}
const flowChartShapes = {
  addToRender,
  addToRenderV2
};
const conf = {};
const setConf = function(cnf) {
  const keys = Object.keys(cnf);
  for (const key of keys) {
    conf[key] = cnf[key];
  }
};
const addVertices = function(vert, g, svgId, root, _doc, diagObj) {
  const svg = !root ? (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(`[id="${svgId}"]`) : root.select(`[id="${svgId}"]`);
  const doc = !_doc ? document : _doc;
  const keys = Object.keys(vert);
  keys.forEach(function(id) {
    const vertex = vert[id];
    let classStr = "default";
    if (vertex.classes.length > 0) {
      classStr = vertex.classes.join(" ");
    }
    const styles = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.k)(vertex.styles);
    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;
    let vertexNode;
    if ((0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.m)((0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.c)().flowchart.htmlLabels)) {
      const node = {
        label: vertexText.replace(
          /fa[blrs]?:fa-[\w-]+/g,
          (s) => `<i class='${s.replace(":", " ")}'></i>`
        )
      };
      vertexNode = (0,dagre_d3_es_src_dagre_js_label_add_html_label_js__WEBPACK_IMPORTED_MODULE_4__.addHtmlLabel)(svg, node).node();
      vertexNode.parentNode.removeChild(vertexNode);
    } else {
      const svgLabel = doc.createElementNS("http://www.w3.org/2000/svg", "text");
      svgLabel.setAttribute("style", styles.labelStyle.replace("color:", "fill:"));
      const rows = vertexText.split(_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.e.lineBreakRegex);
      for (const row of rows) {
        const tspan = doc.createElementNS("http://www.w3.org/2000/svg", "tspan");
        tspan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
        tspan.setAttribute("dy", "1em");
        tspan.setAttribute("x", "1");
        tspan.textContent = row;
        svgLabel.appendChild(tspan);
      }
      vertexNode = svgLabel;
    }
    let radious = 0;
    let _shape = "";
    switch (vertex.type) {
      case "round":
        radious = 5;
        _shape = "rect";
        break;
      case "square":
        _shape = "rect";
        break;
      case "diamond":
        _shape = "question";
        break;
      case "hexagon":
        _shape = "hexagon";
        break;
      case "odd":
        _shape = "rect_left_inv_arrow";
        break;
      case "lean_right":
        _shape = "lean_right";
        break;
      case "lean_left":
        _shape = "lean_left";
        break;
      case "trapezoid":
        _shape = "trapezoid";
        break;
      case "inv_trapezoid":
        _shape = "inv_trapezoid";
        break;
      case "odd_right":
        _shape = "rect_left_inv_arrow";
        break;
      case "circle":
        _shape = "circle";
        break;
      case "ellipse":
        _shape = "ellipse";
        break;
      case "stadium":
        _shape = "stadium";
        break;
      case "subroutine":
        _shape = "subroutine";
        break;
      case "cylinder":
        _shape = "cylinder";
        break;
      case "group":
        _shape = "rect";
        break;
      default:
        _shape = "rect";
    }
    _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.l.warn("Adding node", vertex.id, vertex.domId);
    g.setNode(diagObj.db.lookUpDomId(vertex.id), {
      labelType: "svg",
      labelStyle: styles.labelStyle,
      shape: _shape,
      label: vertexNode,
      rx: radious,
      ry: radious,
      class: classStr,
      style: styles.style,
      id: diagObj.db.lookUpDomId(vertex.id)
    });
  });
};
const addEdges = function(edges, g, diagObj) {
  let cnt = 0;
  let defaultStyle;
  let defaultLabelStyle;
  if (edges.defaultStyle !== void 0) {
    const defaultStyles = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.k)(edges.defaultStyle);
    defaultStyle = defaultStyles.style;
    defaultLabelStyle = defaultStyles.labelStyle;
  }
  edges.forEach(function(edge) {
    cnt++;
    const linkId = "L-" + edge.start + "-" + edge.end;
    const linkNameStart = "LS-" + edge.start;
    const linkNameEnd = "LE-" + edge.end;
    const edgeData = {};
    if (edge.type === "arrow_open") {
      edgeData.arrowhead = "none";
    } else {
      edgeData.arrowhead = "normal";
    }
    let style = "";
    let labelStyle = "";
    if (edge.style !== void 0) {
      const styles = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.k)(edge.style);
      style = styles.style;
      labelStyle = styles.labelStyle;
    } else {
      switch (edge.stroke) {
        case "normal":
          style = "fill:none";
          if (defaultStyle !== void 0) {
            style = defaultStyle;
          }
          if (defaultLabelStyle !== void 0) {
            labelStyle = defaultLabelStyle;
          }
          break;
        case "dotted":
          style = "fill:none;stroke-width:2px;stroke-dasharray:3;";
          break;
        case "thick":
          style = " stroke-width: 3.5px;fill:none";
          break;
      }
    }
    edgeData.style = style;
    edgeData.labelStyle = labelStyle;
    if (edge.interpolate !== void 0) {
      edgeData.curve = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.n)(edge.interpolate, d3__WEBPACK_IMPORTED_MODULE_1__.curveLinear);
    } else if (edges.defaultInterpolate !== void 0) {
      edgeData.curve = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.n)(edges.defaultInterpolate, d3__WEBPACK_IMPORTED_MODULE_1__.curveLinear);
    } else {
      edgeData.curve = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.n)(conf.curve, d3__WEBPACK_IMPORTED_MODULE_1__.curveLinear);
    }
    if (edge.text === void 0) {
      if (edge.style !== void 0) {
        edgeData.arrowheadStyle = "fill: #333";
      }
    } else {
      edgeData.arrowheadStyle = "fill: #333";
      edgeData.labelpos = "c";
      if ((0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.m)((0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.c)().flowchart.htmlLabels)) {
        edgeData.labelType = "html";
        edgeData.label = `<span id="L-${linkId}" class="edgeLabel L-${linkNameStart}' L-${linkNameEnd}" style="${edgeData.labelStyle}">${edge.text.replace(
          /fa[blrs]?:fa-[\w-]+/g,
          (s) => `<i class='${s.replace(":", " ")}'></i>`
        )}</span>`;
      } else {
        edgeData.labelType = "text";
        edgeData.label = edge.text.replace(_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.e.lineBreakRegex, "\n");
        if (edge.style === void 0) {
          edgeData.style = edgeData.style || "stroke: #333; stroke-width: 1.5px;fill:none";
        }
        edgeData.labelStyle = edgeData.labelStyle.replace("color:", "fill:");
      }
    }
    edgeData.id = linkId;
    edgeData.class = linkNameStart + " " + linkNameEnd;
    edgeData.minlen = edge.length || 1;
    g.setEdge(diagObj.db.lookUpDomId(edge.start), diagObj.db.lookUpDomId(edge.end), edgeData, cnt);
  });
};
const getClasses = function(text, diagObj) {
  _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.l.info("Extracting classes");
  return diagObj.db.getClasses();
};
const draw = function(text, id, _version, diagObj) {
  _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.l.info("Drawing flowchart");
  const { securityLevel, flowchart: conf2 } = (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.c)();
  let sandboxElement;
  if (securityLevel === "sandbox") {
    sandboxElement = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)("#i" + id);
  }
  const root = securityLevel === "sandbox" ? (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(sandboxElement.nodes()[0].contentDocument.body) : (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)("body");
  const doc = securityLevel === "sandbox" ? sandboxElement.nodes()[0].contentDocument : document;
  let dir = diagObj.db.getDirection();
  if (dir === void 0) {
    dir = "TD";
  }
  const nodeSpacing = conf2.nodeSpacing || 50;
  const rankSpacing = conf2.rankSpacing || 50;
  const g = new dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_0__.Graph({
    multigraph: true,
    compound: true
  }).setGraph({
    rankdir: dir,
    nodesep: nodeSpacing,
    ranksep: rankSpacing,
    marginx: 8,
    marginy: 8
  }).setDefaultEdgeLabel(function() {
    return {};
  });
  let subG;
  const subGraphs = diagObj.db.getSubGraphs();
  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {
    subG = subGraphs[i2];
    diagObj.db.addVertex(subG.id, subG.title, "group", void 0, subG.classes);
  }
  const vert = diagObj.db.getVertices();
  _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.l.warn("Get vertices", vert);
  const edges = diagObj.db.getEdges();
  let i = 0;
  for (i = subGraphs.length - 1; i >= 0; i--) {
    subG = subGraphs[i];
    (0,d3__WEBPACK_IMPORTED_MODULE_1__.selectAll)("cluster").append("text");
    for (let j = 0; j < subG.nodes.length; j++) {
      _mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.l.warn(
        "Setting subgraph",
        subG.nodes[j],
        diagObj.db.lookUpDomId(subG.nodes[j]),
        diagObj.db.lookUpDomId(subG.id)
      );
      g.setParent(diagObj.db.lookUpDomId(subG.nodes[j]), diagObj.db.lookUpDomId(subG.id));
    }
  }
  addVertices(vert, g, id, root, doc, diagObj);
  addEdges(edges, g, diagObj);
  const render$1 = new dagre_d3_es__WEBPACK_IMPORTED_MODULE_2__.render();
  flowChartShapes.addToRender(render$1);
  render$1.arrows().none = function normal(parent, id2, edge, type) {
    const marker = parent.append("marker").attr("id", id2).attr("viewBox", "0 0 10 10").attr("refX", 9).attr("refY", 5).attr("markerUnits", "strokeWidth").attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto");
    const path = marker.append("path").attr("d", "M 0 0 L 0 0 L 0 0 z");
    (0,dagre_d3_es_src_dagre_js_util_js__WEBPACK_IMPORTED_MODULE_3__.applyStyle)(path, edge[type + "Style"]);
  };
  render$1.arrows().normal = function normal(parent, id2) {
    const marker = parent.append("marker").attr("id", id2).attr("viewBox", "0 0 10 10").attr("refX", 9).attr("refY", 5).attr("markerUnits", "strokeWidth").attr("markerWidth", 8).attr("markerHeight", 6).attr("orient", "auto");
    marker.append("path").attr("d", "M 0 0 L 10 5 L 0 10 z").attr("class", "arrowheadPath").style("stroke-width", 1).style("stroke-dasharray", "1,0");
  };
  const svg = root.select(`[id="${id}"]`);
  const element = root.select("#" + id + " g");
  render$1(element, g);
  element.selectAll("g.node").attr("title", function() {
    return diagObj.db.getTooltip(this.id);
  });
  diagObj.db.indexNodes("subGraph" + i);
  for (i = 0; i < subGraphs.length; i++) {
    subG = subGraphs[i];
    if (subG.title !== "undefined") {
      const clusterRects = doc.querySelectorAll(
        "#" + id + ' [id="' + diagObj.db.lookUpDomId(subG.id) + '"] rect'
      );
      const clusterEl = doc.querySelectorAll(
        "#" + id + ' [id="' + diagObj.db.lookUpDomId(subG.id) + '"]'
      );
      const xPos = clusterRects[0].x.baseVal.value;
      const yPos = clusterRects[0].y.baseVal.value;
      const _width = clusterRects[0].width.baseVal.value;
      const cluster = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(clusterEl[0]);
      const te = cluster.select(".label");
      te.attr("transform", `translate(${xPos + _width / 2}, ${yPos + 14})`);
      te.attr("id", id + "Text");
      for (let j = 0; j < subG.classes.length; j++) {
        clusterEl[0].classList.add(subG.classes[j]);
      }
    }
  }
  if (!conf2.htmlLabels) {
    const labels = doc.querySelectorAll('[id="' + id + '"] .edgeLabel .label');
    for (const label of labels) {
      const dim = label.getBBox();
      const rect = doc.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("rx", 0);
      rect.setAttribute("ry", 0);
      rect.setAttribute("width", dim.width);
      rect.setAttribute("height", dim.height);
      label.insertBefore(rect, label.firstChild);
    }
  }
  (0,_mermaid_0d192ec3_js__WEBPACK_IMPORTED_MODULE_13__.o)(g, svg, conf2.diagramPadding, conf2.useMaxWidth);
  const keys = Object.keys(vert);
  keys.forEach(function(key) {
    const vertex = vert[key];
    if (vertex.link) {
      const node = root.select("#" + id + ' [id="' + diagObj.db.lookUpDomId(key) + '"]');
      if (node) {
        const link = doc.createElementNS("http://www.w3.org/2000/svg", "a");
        link.setAttributeNS("http://www.w3.org/2000/svg", "class", vertex.classes.join(" "));
        link.setAttributeNS("http://www.w3.org/2000/svg", "href", vertex.link);
        link.setAttributeNS("http://www.w3.org/2000/svg", "rel", "noopener");
        if (securityLevel === "sandbox") {
          link.setAttributeNS("http://www.w3.org/2000/svg", "target", "_top");
        } else if (vertex.linkTarget) {
          link.setAttributeNS("http://www.w3.org/2000/svg", "target", vertex.linkTarget);
        }
        const linkNode = node.insert(function() {
          return link;
        }, ":first-child");
        const shape = node.select(".label-container");
        if (shape) {
          linkNode.append(function() {
            return shape.node();
          });
        }
        const label = node.select(".label");
        if (label) {
          linkNode.append(function() {
            return label.node();
          });
        }
      }
    }
  });
};
const flowRenderer = {
  setConf,
  addVertices,
  addEdges,
  getClasses,
  draw
};
const diagram = {
  parser: _flowDb_fa1288b0_js__WEBPACK_IMPORTED_MODULE_14__.p,
  db: _flowDb_fa1288b0_js__WEBPACK_IMPORTED_MODULE_14__.f,
  renderer: _styles_0671a096_js__WEBPACK_IMPORTED_MODULE_15__.f,
  styles: _styles_0671a096_js__WEBPACK_IMPORTED_MODULE_15__.a,
  init: (cnf) => {
    if (!cnf.flowchart) {
      cnf.flowchart = {};
    }
    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;
    flowRenderer.setConf(cnf.flowchart);
    _flowDb_fa1288b0_js__WEBPACK_IMPORTED_MODULE_14__.f.clear();
    _flowDb_fa1288b0_js__WEBPACK_IMPORTED_MODULE_14__.f.setGen("gen-1");
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfbWVybWFpZF9kaXN0X2Zsb3dEaWFncmFtLWYzMDNiZGQ2X2pzLjgzNGMyMDlhMTIwMzVmOTRkODk0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFrQzs7QUFFTDs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnREFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGdEQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0RBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqRnlCO0FBQ3VCO0FBQ2Q7O0FBRVc7O0FBRTdDO0FBQ0E7QUFDQSxXQUFXLGdEQUFlO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFLHFEQUFvQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFTO0FBQy9CLE1BQU0sc0NBQVM7QUFDZjtBQUNBLE1BQU0sNkRBQVE7QUFDZCxLQUFLOztBQUVMOztBQUVBLGdCQUFnQixxREFBb0I7O0FBRXBDO0FBQ0E7QUFDQSxxQkFBcUIsc0NBQVM7QUFDOUIsSUFBSSxnREFBZTtBQUNuQixHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hEeUI7QUFDTTtBQUNpQjtBQUNkOztBQUVlOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQWE7QUFDMUIsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxlQUFlLHNDQUFTO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsNkRBQVE7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpREFBSztBQUNkO0FBQ0E7QUFDQSxTQUFTLGlEQUFLO0FBQ2Q7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixtREFBbUQ7QUFDbkQ7O0FBRUEsRUFBRSxxREFBb0I7O0FBRXRCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyRHlCO0FBQ007QUFDK0I7QUFDNUI7O0FBRWE7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4Q0FBYTtBQUMxQixLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEVBQUUscURBQW9COztBQUV0QjtBQUNBO0FBQ0Esa0JBQWtCLHNDQUFTO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUksZ0RBQWU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSx1QkFBdUIsaURBQVU7O0FBRWpDLGtCQUFrQixzQ0FDTDtBQUNiO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsSUFBSSxxREFBb0I7QUFDeEI7QUFDQSxLQUFLOztBQUVMLElBQUksZ0RBQWU7QUFDbkIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsc0NBQVM7QUFDdkIsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDJFQUFhO0FBQzlCLGNBQWMsMkVBQWE7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsb0NBQU8sSUFBSSx3Q0FBVztBQUNwQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpREFBTztBQUMxQjtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUUscURBQW9CO0FBQ3RCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuSXlCO0FBQ007QUFDaUI7QUFDZDs7QUFFSzs7QUFFdkM7QUFDQTtBQUNBLFlBQVksZ0RBQWU7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isc0NBQVM7QUFDN0IsSUFBSSxnREFBZTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLDZEQUFRO0FBQzNCO0FBQ0EsZUFBZSxpREFBTTs7QUFFckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsaURBQUs7QUFDYjtBQUNBO0FBQ0EsUUFBUSxpREFBSztBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxzQ0FBUztBQUN4QjtBQUNBO0FBQ0EsSUFBSSxnREFBZTs7QUFFbkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLDhDQUE4QztBQUM5Qzs7QUFFQSxFQUFFLHFEQUFvQjs7QUFFdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNGNEM7QUFDSTtBQUNFO0FBQ0E7QUFDTjs7QUFFSTs7Ozs7Ozs7Ozs7Ozs7OztBQ05VOztBQUUvQjs7QUFFM0I7QUFDQSxTQUFTLHVFQUFnQjtBQUN6Qjs7Ozs7Ozs7Ozs7Ozs7O0FDTjRCOztBQUU1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDs7Ozs7Ozs7Ozs7Ozs7O0FDdkJ5Qjs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQ3JFeUI7O0FBRXpCO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ0pvRDs7QUFFeEI7O0FBRTVCO0FBQ0EsdUJBQXVCLEtBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBLG9CQUFvQixpRUFBYTtBQUNqQztBQUNBO0FBQ0EsUUFBUSwrQkFBK0I7QUFDdkMsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQzFEeUI7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9CbUQ7QUFDRjtBQUNFOztBQUUvQjs7QUFFcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksOERBQVc7QUFDZixJQUFJO0FBQ0osSUFBSSxnRUFBWTtBQUNoQixJQUFJO0FBQ0osSUFBSSxnRUFBWTtBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDbkNtQzs7QUFFWjs7QUFFdkI7QUFDQTs7QUFFQTs7QUFFQSxFQUFFLGdEQUFlOztBQUVqQjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDWm1DOztBQUVYOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLGdEQUFlOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQy9DeUI7QUFDUzs7QUFFTjs7QUFFNUI7QUFDQTtBQUNBLFlBQVksc0NBQVM7QUFDckIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxFQUFFLHFEQUFvQjs7QUFFdEIsRUFBRSxxREFDa0I7QUFDcEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25DeUI7QUFDTTtBQUNHOztBQUVKOztBQUU5QjtBQUNBO0FBQ0EsWUFBWSxzQ0FBUztBQUNyQixHQUFHOztBQUVIO0FBQ0E7QUFDQSxXQUFXLGlEQUFLO0FBQ2hCOztBQUVBOztBQUVBLEVBQUUscURBQW9CO0FBQ3RCOzs7Ozs7Ozs7Ozs7Ozs7OztBQ25CeUI7QUFDUzs7QUFFVDs7QUFFekI7QUFDQTtBQUNBLFlBQVksc0NBQVM7QUFDckIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxFQUFFLHFEQUFvQjtBQUN0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQnlCO0FBQ007QUFDWTtBQUNLO0FBQ3lCO0FBQ087QUFDSDtBQUNiO0FBQ047QUFDSztBQUNYO0FBQ0o7O0FBRTlCOztBQUVsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0VBQWdCO0FBQ3JDLGdCQUFnQiw2REFBVywrQ0FBK0MsK0NBQU07O0FBRWhGLElBQUksdURBQU07O0FBRVYsSUFBSSxpRUFBYTtBQUNqQixJQUFJLDRFQUFrQjtBQUN0QixJQUFJLHNFQUFlLG9CQUFvQiw4Q0FBTTs7QUFFN0MsbUJBQW1CLG1FQUFjO0FBQ2pDLElBQUksdUVBQWdCOztBQUVwQjtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLHlEQUFXO0FBQzdDLElBQUksZ0VBQWM7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQywrREFBYztBQUNoRCxJQUFJLHNFQUFpQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLG9FQUFnQjtBQUNsRCxJQUFJLDJFQUFtQjtBQUN2QjtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLGtFQUFlO0FBQ2pELElBQUkseUVBQWtCO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsK0NBQU07QUFDeEMsSUFBSSxzREFBUztBQUNiO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsOENBQU07QUFDeEMsSUFBSSxxREFBUztBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsMkNBQWM7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrREFBSztBQUNkO0FBQ0E7O0FBRUEsUUFBUSxrREFBSztBQUNiLE1BQU0sa0RBQVU7QUFDaEI7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxRQUFRLGtEQUFLO0FBQ2IsTUFBTSxrREFBVTtBQUNoQjtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLFFBQVEsa0RBQUs7QUFDYixNQUFNLGtEQUFVO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLElBQUksa0RBQVU7O0FBRWQsSUFBSSxrREFBTTtBQUNWO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLFFBQVEsa0RBQUs7QUFDYjtBQUNBO0FBQ0EsUUFBUSxrREFBSztBQUNiO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxTQUFTLGtEQUFLO0FBQ2Q7QUFDQTtBQUNBLElBQUksa0RBQVU7QUFDZCxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxFQUFFLGtEQUFNO0FBQ1I7O0FBRUE7QUFDQSxRQUFRLGtEQUFLO0FBQ2I7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQSxRQUFRLGtEQUFLO0FBQ2I7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlLa0U7QUFDRTtBQUNBO0FBQ047O0FBRWpDOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsMkVBQWE7QUFDeEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGlGQUFnQjtBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVywrRUFBZTtBQUMxQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxhQUFhO0FBQ25CLE1BQU0sYUFBYTtBQUNuQixNQUFNLFlBQVk7QUFDbEIsTUFBTSxZQUFZO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxpRkFBZ0I7QUFDM0I7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3RjhDO0FBQ0U7O0FBRVc7O0FBRXBCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMeUI7QUFDRjtBQUNWO0FBQ21IO0FBQ2xJO0FBQ3lCO0FBQ2tCO0FBQ1c7QUFDTjtBQUNUO0FBQ3pEO0FBQ0o7QUFDa0I7QUFDZDtBQUNIO0FBQ2M7QUFDRjtBQUNaO0FBQ2M7QUFDRDtBQUNXO0FBQ0U7QUFDYjtBQUNLO0FBQ0E7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0JBQWdCO0FBQ3RCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlHQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFlBQVk7QUFDbEIsTUFBTSxnQkFBZ0I7QUFDdEIsTUFBTSxpQkFBaUI7QUFDdkIsTUFBTSxpQkFBaUI7QUFDdkIsTUFBTSxhQUFhO0FBQ25CLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlHQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0sWUFBWTtBQUNsQixNQUFNLGFBQWE7QUFDbkIsTUFBTSxrQkFBa0I7QUFDeEIsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUdBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxQkFBcUI7QUFDM0IsTUFBTSxvQkFBb0I7QUFDMUIsTUFBTSx5QkFBeUI7QUFDL0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUdBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxvQkFBb0I7QUFDMUIsTUFBTSxvQkFBb0I7QUFDMUIsTUFBTSx5QkFBeUI7QUFDL0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUdBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxQkFBcUI7QUFDM0IsTUFBTSx3QkFBd0I7QUFDOUIsTUFBTSxxQkFBcUI7QUFDM0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUdBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxnQkFBZ0I7QUFDdEIsTUFBTSxvQkFBb0I7QUFDMUIsTUFBTSx5QkFBeUI7QUFDL0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUdBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sb0JBQW9CO0FBQzFCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0scUJBQXFCO0FBQzNCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlHQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtR0FBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sWUFBWTtBQUNsQixNQUFNLFlBQVk7QUFDbEIsTUFBTSxhQUFhO0FBQ25CLE1BQU0sYUFBYTtBQUNuQixNQUFNLFlBQVk7QUFDbEIsTUFBTSxhQUFhO0FBQ25CLE1BQU0sZ0JBQWdCO0FBQ3RCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0sY0FBYztBQUNwQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsV0FBVyx5R0FBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtR0FBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFlBQVk7QUFDekIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEscUJBQXFCO0FBQ2xDLGFBQWEsWUFBWTtBQUN6QixhQUFhLFdBQVc7QUFDeEIsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsZUFBZTtBQUM1QixhQUFhLHNCQUFzQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBTSxTQUFTLE1BQU0sMkJBQTJCLE1BQU07QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3REFBa0I7QUFDckM7QUFDQTtBQUNBLFFBQVEsd0RBQVEsQ0FBQyx3REFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsb0JBQW9CO0FBQ2xEO0FBQ0E7QUFDQSxtQkFBbUIsOEZBQVk7QUFDL0I7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLG9DQUFvQyxtRUFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseURBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHdEQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQWtCO0FBQ3ZDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpQkFBaUIsbUJBQW1CO0FBQ2pFO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdEQUFrQixtQkFBbUIsMkNBQVc7QUFDdkUsTUFBTTtBQUNOLHVCQUF1Qix3REFBa0IsMkJBQTJCLDJDQUFXO0FBQy9FLE1BQU07QUFDTix1QkFBdUIsd0RBQWtCLGFBQWEsMkNBQVc7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsVUFBVSx3REFBUSxDQUFDLHdEQUFTO0FBQzVCO0FBQ0Esd0NBQXdDLE9BQU8sdUJBQXVCLGNBQWMsTUFBTSxZQUFZLFdBQVcsb0JBQW9CLElBQUk7QUFDekk7QUFDQSw4QkFBOEIsb0JBQW9CO0FBQ2xELFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQSwyQ0FBMkMsbUVBQXFCO0FBQ2hFO0FBQ0EsNERBQTRELG9CQUFvQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLHlEQUFRO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsRUFBRSx5REFBUTtBQUNWLFVBQVUsa0NBQWtDLEVBQUUsd0RBQVM7QUFDdkQ7QUFDQTtBQUNBLHFCQUFxQiwwQ0FBTTtBQUMzQjtBQUNBLDZDQUE2QywwQ0FBTSxtREFBbUQsMENBQU07QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0VBQWM7QUFDOUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUseURBQVE7QUFDVjtBQUNBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQSxJQUFJLDZDQUFTO0FBQ2Isb0JBQW9CLHVCQUF1QjtBQUMzQyxNQUFNLHlEQUFRO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0NBQU07QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDRFQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxHQUFHO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBTTtBQUM1QjtBQUNBLHdDQUF3QyxrQkFBa0IsSUFBSSxVQUFVO0FBQ3hFO0FBQ0Esc0JBQXNCLHlCQUF5QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0RBQWlCO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTSxtREFBTTtBQUNaLFlBQVksbURBQWM7QUFDMUIsVUFBVSxtREFBVTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUFZO0FBQ2hCLElBQUksMERBQWE7QUFDakI7QUFDQTtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvYXJyb3dzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL2NyZWF0ZS1jbHVzdGVycy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9jcmVhdGUtZWRnZS1sYWJlbHMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvY3JlYXRlLWVkZ2UtcGF0aHMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvY3JlYXRlLW5vZGVzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL2ludGVyc2VjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9pbnRlcnNlY3QvaW50ZXJzZWN0LWNpcmNsZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9pbnRlcnNlY3QvaW50ZXJzZWN0LWVsbGlwc2UuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvaW50ZXJzZWN0L2ludGVyc2VjdC1saW5lLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL2ludGVyc2VjdC9pbnRlcnNlY3Qtbm9kZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9pbnRlcnNlY3QvaW50ZXJzZWN0LXBvbHlnb24uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvaW50ZXJzZWN0L2ludGVyc2VjdC1yZWN0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL2xhYmVsL2FkZC1sYWJlbC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9sYWJlbC9hZGQtc3ZnLWxhYmVsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL2xhYmVsL2FkZC10ZXh0LWxhYmVsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL3Bvc2l0aW9uLWNsdXN0ZXJzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL3Bvc2l0aW9uLWVkZ2UtbGFiZWxzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL3Bvc2l0aW9uLW5vZGVzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uLi9ub2RlX21vZHVsZXMvZGFncmUtZDMtZXMvc3JjL2RhZ3JlLWpzL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9zaGFwZXMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy1lcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvZmxvd0RpYWdyYW0tZjMwM2JkZDYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwuanMnO1xuXG5leHBvcnQgeyBhcnJvd3MsIHNldEFycm93cyB9O1xuXG52YXIgYXJyb3dzID0ge1xuICBub3JtYWwsXG4gIHZlZSxcbiAgdW5kaXJlY3RlZCxcbn07XG5cbmZ1bmN0aW9uIHNldEFycm93cyh2YWx1ZSkge1xuICBhcnJvd3MgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsKHBhcmVudCwgaWQsIGVkZ2UsIHR5cGUpIHtcbiAgdmFyIG1hcmtlciA9IHBhcmVudFxuICAgIC5hcHBlbmQoJ21hcmtlcicpXG4gICAgLmF0dHIoJ2lkJywgaWQpXG4gICAgLmF0dHIoJ3ZpZXdCb3gnLCAnMCAwIDEwIDEwJylcbiAgICAuYXR0cigncmVmWCcsIDkpXG4gICAgLmF0dHIoJ3JlZlknLCA1KVxuICAgIC5hdHRyKCdtYXJrZXJVbml0cycsICdzdHJva2VXaWR0aCcpXG4gICAgLmF0dHIoJ21hcmtlcldpZHRoJywgOClcbiAgICAuYXR0cignbWFya2VySGVpZ2h0JywgNilcbiAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKTtcblxuICB2YXIgcGF0aCA9IG1hcmtlclxuICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdkJywgJ00gMCAwIEwgMTAgNSBMIDAgMTAgeicpXG4gICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAxKVxuICAgIC5zdHlsZSgnc3Ryb2tlLWRhc2hhcnJheScsICcxLDAnKTtcbiAgdXRpbC5hcHBseVN0eWxlKHBhdGgsIGVkZ2VbdHlwZSArICdTdHlsZSddKTtcbiAgaWYgKGVkZ2VbdHlwZSArICdDbGFzcyddKSB7XG4gICAgcGF0aC5hdHRyKCdjbGFzcycsIGVkZ2VbdHlwZSArICdDbGFzcyddKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2ZWUocGFyZW50LCBpZCwgZWRnZSwgdHlwZSkge1xuICB2YXIgbWFya2VyID0gcGFyZW50XG4gICAgLmFwcGVuZCgnbWFya2VyJylcbiAgICAuYXR0cignaWQnLCBpZClcbiAgICAuYXR0cigndmlld0JveCcsICcwIDAgMTAgMTAnKVxuICAgIC5hdHRyKCdyZWZYJywgOSlcbiAgICAuYXR0cigncmVmWScsIDUpXG4gICAgLmF0dHIoJ21hcmtlclVuaXRzJywgJ3N0cm9rZVdpZHRoJylcbiAgICAuYXR0cignbWFya2VyV2lkdGgnLCA4KVxuICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCA2KVxuICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpO1xuXG4gIHZhciBwYXRoID0gbWFya2VyXG4gICAgLmFwcGVuZCgncGF0aCcpXG4gICAgLmF0dHIoJ2QnLCAnTSAwIDAgTCAxMCA1IEwgMCAxMCBMIDQgNSB6JylcbiAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDEpXG4gICAgLnN0eWxlKCdzdHJva2UtZGFzaGFycmF5JywgJzEsMCcpO1xuICB1dGlsLmFwcGx5U3R5bGUocGF0aCwgZWRnZVt0eXBlICsgJ1N0eWxlJ10pO1xuICBpZiAoZWRnZVt0eXBlICsgJ0NsYXNzJ10pIHtcbiAgICBwYXRoLmF0dHIoJ2NsYXNzJywgZWRnZVt0eXBlICsgJ0NsYXNzJ10pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuZGlyZWN0ZWQocGFyZW50LCBpZCwgZWRnZSwgdHlwZSkge1xuICB2YXIgbWFya2VyID0gcGFyZW50XG4gICAgLmFwcGVuZCgnbWFya2VyJylcbiAgICAuYXR0cignaWQnLCBpZClcbiAgICAuYXR0cigndmlld0JveCcsICcwIDAgMTAgMTAnKVxuICAgIC5hdHRyKCdyZWZYJywgOSlcbiAgICAuYXR0cigncmVmWScsIDUpXG4gICAgLmF0dHIoJ21hcmtlclVuaXRzJywgJ3N0cm9rZVdpZHRoJylcbiAgICAuYXR0cignbWFya2VyV2lkdGgnLCA4KVxuICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCA2KVxuICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpO1xuXG4gIHZhciBwYXRoID0gbWFya2VyXG4gICAgLmFwcGVuZCgncGF0aCcpXG4gICAgLmF0dHIoJ2QnLCAnTSAwIDUgTCAxMCA1JylcbiAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDEpXG4gICAgLnN0eWxlKCdzdHJva2UtZGFzaGFycmF5JywgJzEsMCcpO1xuICB1dGlsLmFwcGx5U3R5bGUocGF0aCwgZWRnZVt0eXBlICsgJ1N0eWxlJ10pO1xuICBpZiAoZWRnZVt0eXBlICsgJ0NsYXNzJ10pIHtcbiAgICBwYXRoLmF0dHIoJ2NsYXNzJywgZWRnZVt0eXBlICsgJ0NsYXNzJ10pO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBhZGRMYWJlbCB9IGZyb20gJy4vbGFiZWwvYWRkLWxhYmVsLmpzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsLmpzJztcblxuZXhwb3J0IHsgY3JlYXRlQ2x1c3RlcnMsIHNldENyZWF0ZUNsdXN0ZXJzIH07XG5cbnZhciBjcmVhdGVDbHVzdGVycyA9IGZ1bmN0aW9uIChzZWxlY3Rpb24sIGcpIHtcbiAgdmFyIGNsdXN0ZXJzID0gZy5ub2RlcygpLmZpbHRlcihmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB1dGlsLmlzU3ViZ3JhcGgoZywgdik7XG4gIH0pO1xuICB2YXIgc3ZnQ2x1c3RlcnMgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCdnLmNsdXN0ZXInKS5kYXRhKGNsdXN0ZXJzLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2O1xuICB9KTtcblxuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihzdmdDbHVzdGVycy5leGl0KCksIGcpLnN0eWxlKCdvcGFjaXR5JywgMCkucmVtb3ZlKCk7XG5cbiAgdmFyIGVudGVyU2VsZWN0aW9uID0gc3ZnQ2x1c3RlcnNcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdjbGFzcycsICdjbHVzdGVyJylcbiAgICAuYXR0cignaWQnLCBmdW5jdGlvbiAodikge1xuICAgICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgICByZXR1cm4gbm9kZS5pZDtcbiAgICB9KVxuICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgLmVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgdmFyIHRoaXNHcm91cCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3JlY3QnKTtcbiAgICAgIHZhciBsYWJlbEdyb3VwID0gdGhpc0dyb3VwLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2xhYmVsJyk7XG4gICAgICBhZGRMYWJlbChsYWJlbEdyb3VwLCBub2RlLCBub2RlLmNsdXN0ZXJMYWJlbFBvcyk7XG4gICAgfSk7XG5cbiAgc3ZnQ2x1c3RlcnMgPSBzdmdDbHVzdGVycy5tZXJnZShlbnRlclNlbGVjdGlvbik7XG5cbiAgc3ZnQ2x1c3RlcnMgPSB1dGlsLmFwcGx5VHJhbnNpdGlvbihzdmdDbHVzdGVycywgZykuc3R5bGUoJ29wYWNpdHknLCAxKTtcblxuICBzdmdDbHVzdGVycy5zZWxlY3RBbGwoJ3JlY3QnKS5lYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUoYyk7XG4gICAgdmFyIGRvbUNsdXN0ZXIgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgdXRpbC5hcHBseVN0eWxlKGRvbUNsdXN0ZXIsIG5vZGUuc3R5bGUpO1xuICB9KTtcblxuICByZXR1cm4gc3ZnQ2x1c3RlcnM7XG59O1xuXG5mdW5jdGlvbiBzZXRDcmVhdGVDbHVzdGVycyh2YWx1ZSkge1xuICBjcmVhdGVDbHVzdGVycyA9IHZhbHVlO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgYWRkTGFiZWwgfSBmcm9tICcuL2xhYmVsL2FkZC1sYWJlbC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbC5qcyc7XG5cbmV4cG9ydCB7IGNyZWF0ZUVkZ2VMYWJlbHMsIHNldENyZWF0ZUVkZ2VMYWJlbHMgfTtcblxubGV0IGNyZWF0ZUVkZ2VMYWJlbHMgPSBmdW5jdGlvbiAoc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBzdmdFZGdlTGFiZWxzID0gc2VsZWN0aW9uXG4gICAgLnNlbGVjdEFsbCgnZy5lZGdlTGFiZWwnKVxuICAgIC5kYXRhKGcuZWRnZXMoKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiB1dGlsLmVkZ2VUb0lkKGUpO1xuICAgIH0pXG4gICAgLmNsYXNzZWQoJ3VwZGF0ZScsIHRydWUpO1xuXG4gIHN2Z0VkZ2VMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuICBzdmdFZGdlTGFiZWxzLmVudGVyKCkuYXBwZW5kKCdnJykuY2xhc3NlZCgnZWRnZUxhYmVsJywgdHJ1ZSkuc3R5bGUoJ29wYWNpdHknLCAwKTtcblxuICBzdmdFZGdlTGFiZWxzID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgnZy5lZGdlTGFiZWwnKTtcblxuICBzdmdFZGdlTGFiZWxzLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgcm9vdCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICByb290LnNlbGVjdCgnLmxhYmVsJykucmVtb3ZlKCk7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgdmFyIGxhYmVsID0gYWRkTGFiZWwocm9vdCwgZy5lZGdlKGUpLCAwKS5jbGFzc2VkKCdsYWJlbCcsIHRydWUpO1xuICAgIHZhciBiYm94ID0gbGFiZWwubm9kZSgpLmdldEJCb3goKTtcblxuICAgIGlmIChlZGdlLmxhYmVsSWQpIHtcbiAgICAgIGxhYmVsLmF0dHIoJ2lkJywgZWRnZS5sYWJlbElkKTtcbiAgICB9XG4gICAgaWYgKCFfLmhhcyhlZGdlLCAnd2lkdGgnKSkge1xuICAgICAgZWRnZS53aWR0aCA9IGJib3gud2lkdGg7XG4gICAgfVxuICAgIGlmICghXy5oYXMoZWRnZSwgJ2hlaWdodCcpKSB7XG4gICAgICBlZGdlLmhlaWdodCA9IGJib3guaGVpZ2h0O1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGV4aXRTZWxlY3Rpb247XG5cbiAgaWYgKHN2Z0VkZ2VMYWJlbHMuZXhpdCkge1xuICAgIGV4aXRTZWxlY3Rpb24gPSBzdmdFZGdlTGFiZWxzLmV4aXQoKTtcbiAgfSBlbHNlIHtcbiAgICBleGl0U2VsZWN0aW9uID0gc3ZnRWRnZUxhYmVscy5zZWxlY3RBbGwobnVsbCk7IC8vIGVtcHR5IHNlbGVjdGlvblxuICB9XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oZXhpdFNlbGVjdGlvbiwgZykuc3R5bGUoJ29wYWNpdHknLCAwKS5yZW1vdmUoKTtcblxuICByZXR1cm4gc3ZnRWRnZUxhYmVscztcbn07XG5cbmZ1bmN0aW9uIHNldENyZWF0ZUVkZ2VMYWJlbHModmFsdWUpIHtcbiAgY3JlYXRlRWRnZUxhYmVscyA9IHZhbHVlO1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0Tm9kZSB9IGZyb20gJy4vaW50ZXJzZWN0L2ludGVyc2VjdC1ub2RlLmpzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsLmpzJztcblxuZXhwb3J0IHsgY3JlYXRlRWRnZVBhdGhzLCBzZXRDcmVhdGVFZGdlUGF0aHMgfTtcblxudmFyIGNyZWF0ZUVkZ2VQYXRocyA9IGZ1bmN0aW9uIChzZWxlY3Rpb24sIGcsIGFycm93cykge1xuICB2YXIgcHJldmlvdXNQYXRocyA9IHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ2cuZWRnZVBhdGgnKVxuICAgIC5kYXRhKGcuZWRnZXMoKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiB1dGlsLmVkZ2VUb0lkKGUpO1xuICAgIH0pXG4gICAgLmNsYXNzZWQoJ3VwZGF0ZScsIHRydWUpO1xuXG4gIHZhciBuZXdQYXRocyA9IGVudGVyKHByZXZpb3VzUGF0aHMsIGcpO1xuICBleGl0KHByZXZpb3VzUGF0aHMsIGcpO1xuXG4gIHZhciBzdmdQYXRocyA9IHByZXZpb3VzUGF0aHMubWVyZ2UgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzUGF0aHMubWVyZ2UobmV3UGF0aHMpIDogcHJldmlvdXNQYXRocztcbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oc3ZnUGF0aHMsIGcpLnN0eWxlKCdvcGFjaXR5JywgMSk7XG5cbiAgLy8gU2F2ZSBET00gZWxlbWVudCBpbiB0aGUgcGF0aCBncm91cCwgYW5kIHNldCBJRCBhbmQgY2xhc3NcbiAgc3ZnUGF0aHMuZWFjaChmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkb21FZGdlID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGVkZ2UuZWxlbSA9IHRoaXM7XG5cbiAgICBpZiAoZWRnZS5pZCkge1xuICAgICAgZG9tRWRnZS5hdHRyKCdpZCcsIGVkZ2UuaWQpO1xuICAgIH1cblxuICAgIHV0aWwuYXBwbHlDbGFzcyhcbiAgICAgIGRvbUVkZ2UsXG4gICAgICBlZGdlWydjbGFzcyddLFxuICAgICAgKGRvbUVkZ2UuY2xhc3NlZCgndXBkYXRlJykgPyAndXBkYXRlICcgOiAnJykgKyAnZWRnZVBhdGgnXG4gICAgKTtcbiAgfSk7XG5cbiAgc3ZnUGF0aHMuc2VsZWN0QWxsKCdwYXRoLnBhdGgnKS5lYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgZWRnZS5hcnJvd2hlYWRJZCA9IF8udW5pcXVlSWQoJ2Fycm93aGVhZCcpO1xuXG4gICAgdmFyIGRvbUVkZ2UgPSBkM1xuICAgICAgLnNlbGVjdCh0aGlzKVxuICAgICAgLmF0dHIoJ21hcmtlci1lbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAndXJsKCcgKyBtYWtlRnJhZ21lbnRSZWYobG9jYXRpb24uaHJlZiwgZWRnZS5hcnJvd2hlYWRJZCkgKyAnKSc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKTtcblxuICAgIHV0aWwuYXBwbHlUcmFuc2l0aW9uKGRvbUVkZ2UsIGcpLmF0dHIoJ2QnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGNhbGNQb2ludHMoZywgZSk7XG4gICAgfSk7XG5cbiAgICB1dGlsLmFwcGx5U3R5bGUoZG9tRWRnZSwgZWRnZS5zdHlsZSk7XG4gIH0pO1xuXG4gIHN2Z1BhdGhzLnNlbGVjdEFsbCgnZGVmcyAqJykucmVtb3ZlKCk7XG4gIHN2Z1BhdGhzLnNlbGVjdEFsbCgnZGVmcycpLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICB2YXIgYXJyb3doZWFkID0gYXJyb3dzW2VkZ2UuYXJyb3doZWFkXTtcbiAgICBhcnJvd2hlYWQoZDMuc2VsZWN0KHRoaXMpLCBlZGdlLmFycm93aGVhZElkLCBlZGdlLCAnYXJyb3doZWFkJyk7XG4gIH0pO1xuXG4gIHJldHVybiBzdmdQYXRocztcbn07XG5cbmZ1bmN0aW9uIHNldENyZWF0ZUVkZ2VQYXRocyh2YWx1ZSkge1xuICBjcmVhdGVFZGdlUGF0aHMgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gbWFrZUZyYWdtZW50UmVmKHVybCwgZnJhZ21lbnRJZCkge1xuICB2YXIgYmFzZVVybCA9IHVybC5zcGxpdCgnIycpWzBdO1xuICByZXR1cm4gYmFzZVVybCArICcjJyArIGZyYWdtZW50SWQ7XG59XG5cbmZ1bmN0aW9uIGNhbGNQb2ludHMoZywgZSkge1xuICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgdmFyIHRhaWwgPSBnLm5vZGUoZS52KTtcbiAgdmFyIGhlYWQgPSBnLm5vZGUoZS53KTtcbiAgdmFyIHBvaW50cyA9IGVkZ2UucG9pbnRzLnNsaWNlKDEsIGVkZ2UucG9pbnRzLmxlbmd0aCAtIDEpO1xuICBwb2ludHMudW5zaGlmdChpbnRlcnNlY3ROb2RlKHRhaWwsIHBvaW50c1swXSkpO1xuICBwb2ludHMucHVzaChpbnRlcnNlY3ROb2RlKGhlYWQsIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pKTtcblxuICByZXR1cm4gY3JlYXRlTGluZShlZGdlLCBwb2ludHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5lKGVkZ2UsIHBvaW50cykge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gIHZhciBsaW5lID0gKGQzLmxpbmUgfHwgZDMuc3ZnLmxpbmUpKClcbiAgICAueChmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIGQueDtcbiAgICB9KVxuICAgIC55KGZ1bmN0aW9uIChkKSB7XG4gICAgICByZXR1cm4gZC55O1xuICAgIH0pO1xuXG4gIChsaW5lLmN1cnZlIHx8IGxpbmUuaW50ZXJwb2xhdGUpKGVkZ2UuY3VydmUpO1xuXG4gIHJldHVybiBsaW5lKHBvaW50cyk7XG59XG5cbmZ1bmN0aW9uIGdldENvb3JkcyhlbGVtKSB7XG4gIHZhciBiYm94ID0gZWxlbS5nZXRCQm94KCk7XG4gIHZhciBtYXRyaXggPSBlbGVtLm93bmVyU1ZHRWxlbWVudFxuICAgIC5nZXRTY3JlZW5DVE0oKVxuICAgIC5pbnZlcnNlKClcbiAgICAubXVsdGlwbHkoZWxlbS5nZXRTY3JlZW5DVE0oKSlcbiAgICAudHJhbnNsYXRlKGJib3gud2lkdGggLyAyLCBiYm94LmhlaWdodCAvIDIpO1xuICByZXR1cm4geyB4OiBtYXRyaXguZSwgeTogbWF0cml4LmYgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXIoc3ZnUGF0aHMsIGcpIHtcbiAgdmFyIHN2Z1BhdGhzRW50ZXIgPSBzdmdQYXRocy5lbnRlcigpLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2VkZ2VQYXRoJykuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgc3ZnUGF0aHNFbnRlclxuICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdjbGFzcycsICdwYXRoJylcbiAgICAuYXR0cignZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICAgIHZhciBzb3VyY2VFbGVtID0gZy5ub2RlKGUudikuZWxlbTtcbiAgICAgIHZhciBwb2ludHMgPSBfLnJhbmdlKGVkZ2UucG9pbnRzLmxlbmd0aCkubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldENvb3Jkcyhzb3VyY2VFbGVtKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNyZWF0ZUxpbmUoZWRnZSwgcG9pbnRzKTtcbiAgICB9KTtcbiAgc3ZnUGF0aHNFbnRlci5hcHBlbmQoJ2RlZnMnKTtcbiAgcmV0dXJuIHN2Z1BhdGhzRW50ZXI7XG59XG5cbmZ1bmN0aW9uIGV4aXQoc3ZnUGF0aHMsIGcpIHtcbiAgdmFyIHN2Z1BhdGhFeGl0ID0gc3ZnUGF0aHMuZXhpdCgpO1xuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihzdmdQYXRoRXhpdCwgZykuc3R5bGUoJ29wYWNpdHknLCAwKS5yZW1vdmUoKTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGFkZExhYmVsIH0gZnJvbSAnLi9sYWJlbC9hZGQtbGFiZWwuanMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwuanMnO1xuXG5leHBvcnQgeyBjcmVhdGVOb2Rlcywgc2V0Q3JlYXRlTm9kZXMgfTtcblxudmFyIGNyZWF0ZU5vZGVzID0gZnVuY3Rpb24gKHNlbGVjdGlvbiwgZywgc2hhcGVzKSB7XG4gIHZhciBzaW1wbGVOb2RlcyA9IGcubm9kZXMoKS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gIXV0aWwuaXNTdWJncmFwaChnLCB2KTtcbiAgfSk7XG4gIHZhciBzdmdOb2RlcyA9IHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ2cubm9kZScpXG4gICAgLmRhdGEoc2ltcGxlTm9kZXMsIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9KVxuICAgIC5jbGFzc2VkKCd1cGRhdGUnLCB0cnVlKTtcblxuICBzdmdOb2Rlcy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgc3ZnTm9kZXMuZW50ZXIoKS5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdub2RlJykuc3R5bGUoJ29wYWNpdHknLCAwKTtcblxuICBzdmdOb2RlcyA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoJ2cubm9kZScpO1xuXG4gIHN2Z05vZGVzLmVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICB2YXIgdGhpc0dyb3VwID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgIHV0aWwuYXBwbHlDbGFzcyhcbiAgICAgIHRoaXNHcm91cCxcbiAgICAgIG5vZGVbJ2NsYXNzJ10sXG4gICAgICAodGhpc0dyb3VwLmNsYXNzZWQoJ3VwZGF0ZScpID8gJ3VwZGF0ZSAnIDogJycpICsgJ25vZGUnXG4gICAgKTtcblxuICAgIHRoaXNHcm91cC5zZWxlY3QoJ2cubGFiZWwnKS5yZW1vdmUoKTtcbiAgICB2YXIgbGFiZWxHcm91cCA9IHRoaXNHcm91cC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdsYWJlbCcpO1xuICAgIHZhciBsYWJlbERvbSA9IGFkZExhYmVsKGxhYmVsR3JvdXAsIG5vZGUpO1xuICAgIHZhciBzaGFwZSA9IHNoYXBlc1tub2RlLnNoYXBlXTtcbiAgICB2YXIgYmJveCA9IF8ucGljayhsYWJlbERvbS5ub2RlKCkuZ2V0QkJveCgpLCAnd2lkdGgnLCAnaGVpZ2h0Jyk7XG5cbiAgICBub2RlLmVsZW0gPSB0aGlzO1xuXG4gICAgaWYgKG5vZGUuaWQpIHtcbiAgICAgIHRoaXNHcm91cC5hdHRyKCdpZCcsIG5vZGUuaWQpO1xuICAgIH1cbiAgICBpZiAobm9kZS5sYWJlbElkKSB7XG4gICAgICBsYWJlbEdyb3VwLmF0dHIoJ2lkJywgbm9kZS5sYWJlbElkKTtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMobm9kZSwgJ3dpZHRoJykpIHtcbiAgICAgIGJib3gud2lkdGggPSBub2RlLndpZHRoO1xuICAgIH1cbiAgICBpZiAoXy5oYXMobm9kZSwgJ2hlaWdodCcpKSB7XG4gICAgICBiYm94LmhlaWdodCA9IG5vZGUuaGVpZ2h0O1xuICAgIH1cblxuICAgIGJib3gud2lkdGggKz0gbm9kZS5wYWRkaW5nTGVmdCArIG5vZGUucGFkZGluZ1JpZ2h0O1xuICAgIGJib3guaGVpZ2h0ICs9IG5vZGUucGFkZGluZ1RvcCArIG5vZGUucGFkZGluZ0JvdHRvbTtcbiAgICBsYWJlbEdyb3VwLmF0dHIoXG4gICAgICAndHJhbnNmb3JtJyxcbiAgICAgICd0cmFuc2xhdGUoJyArXG4gICAgICAgIChub2RlLnBhZGRpbmdMZWZ0IC0gbm9kZS5wYWRkaW5nUmlnaHQpIC8gMiArXG4gICAgICAgICcsJyArXG4gICAgICAgIChub2RlLnBhZGRpbmdUb3AgLSBub2RlLnBhZGRpbmdCb3R0b20pIC8gMiArXG4gICAgICAgICcpJ1xuICAgICk7XG5cbiAgICB2YXIgcm9vdCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICByb290LnNlbGVjdCgnLmxhYmVsLWNvbnRhaW5lcicpLnJlbW92ZSgpO1xuICAgIHZhciBzaGFwZVN2ZyA9IHNoYXBlKHJvb3QsIGJib3gsIG5vZGUpLmNsYXNzZWQoJ2xhYmVsLWNvbnRhaW5lcicsIHRydWUpO1xuICAgIHV0aWwuYXBwbHlTdHlsZShzaGFwZVN2Zywgbm9kZS5zdHlsZSk7XG5cbiAgICB2YXIgc2hhcGVCQm94ID0gc2hhcGVTdmcubm9kZSgpLmdldEJCb3goKTtcbiAgICBub2RlLndpZHRoID0gc2hhcGVCQm94LndpZHRoO1xuICAgIG5vZGUuaGVpZ2h0ID0gc2hhcGVCQm94LmhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGV4aXRTZWxlY3Rpb247XG5cbiAgaWYgKHN2Z05vZGVzLmV4aXQpIHtcbiAgICBleGl0U2VsZWN0aW9uID0gc3ZnTm9kZXMuZXhpdCgpO1xuICB9IGVsc2Uge1xuICAgIGV4aXRTZWxlY3Rpb24gPSBzdmdOb2Rlcy5zZWxlY3RBbGwobnVsbCk7IC8vIGVtcHR5IHNlbGVjdGlvblxuICB9XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oZXhpdFNlbGVjdGlvbiwgZykuc3R5bGUoJ29wYWNpdHknLCAwKS5yZW1vdmUoKTtcblxuICByZXR1cm4gc3ZnTm9kZXM7XG59O1xuXG5mdW5jdGlvbiBzZXRDcmVhdGVOb2Rlcyh2YWx1ZSkge1xuICBjcmVhdGVOb2RlcyA9IHZhbHVlO1xufVxuIiwiaW1wb3J0ICogYXMgbm9kZSBmcm9tICcuL2ludGVyc2VjdC1ub2RlLmpzJztcbmltcG9ydCAqIGFzIGNpcmNsZSBmcm9tICcuL2ludGVyc2VjdC1jaXJjbGUuanMnO1xuaW1wb3J0ICogYXMgZWxsaXBzZSBmcm9tICcuL2ludGVyc2VjdC1lbGxpcHNlLmpzJztcbmltcG9ydCAqIGFzIHBvbHlnb24gZnJvbSAnLi9pbnRlcnNlY3QtcG9seWdvbi5qcyc7XG5pbXBvcnQgKiBhcyByZWN0IGZyb20gJy4vaW50ZXJzZWN0LXJlY3QuanMnO1xuXG5leHBvcnQgeyBub2RlLCBjaXJjbGUsIGVsbGlwc2UsIHBvbHlnb24sIHJlY3QgfTtcbiIsImltcG9ydCB7IGludGVyc2VjdEVsbGlwc2UgfSBmcm9tICcuL2ludGVyc2VjdC1lbGxpcHNlLmpzJztcblxuZXhwb3J0IHsgaW50ZXJzZWN0Q2lyY2xlIH07XG5cbmZ1bmN0aW9uIGludGVyc2VjdENpcmNsZShub2RlLCByeCwgcG9pbnQpIHtcbiAgcmV0dXJuIGludGVyc2VjdEVsbGlwc2Uobm9kZSwgcngsIHJ4LCBwb2ludCk7XG59XG4iLCJleHBvcnQgeyBpbnRlcnNlY3RFbGxpcHNlIH07XG5cbmZ1bmN0aW9uIGludGVyc2VjdEVsbGlwc2Uobm9kZSwgcngsIHJ5LCBwb2ludCkge1xuICAvLyBGb3JtdWxhZSBmcm9tOiBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0VsbGlwc2UtTGluZUludGVyc2VjdGlvbi5odG1sXG5cbiAgdmFyIGN4ID0gbm9kZS54O1xuICB2YXIgY3kgPSBub2RlLnk7XG5cbiAgdmFyIHB4ID0gY3ggLSBwb2ludC54O1xuICB2YXIgcHkgPSBjeSAtIHBvaW50Lnk7XG5cbiAgdmFyIGRldCA9IE1hdGguc3FydChyeCAqIHJ4ICogcHkgKiBweSArIHJ5ICogcnkgKiBweCAqIHB4KTtcblxuICB2YXIgZHggPSBNYXRoLmFicygocnggKiByeSAqIHB4KSAvIGRldCk7XG4gIGlmIChwb2ludC54IDwgY3gpIHtcbiAgICBkeCA9IC1keDtcbiAgfVxuICB2YXIgZHkgPSBNYXRoLmFicygocnggKiByeSAqIHB5KSAvIGRldCk7XG4gIGlmIChwb2ludC55IDwgY3kpIHtcbiAgICBkeSA9IC1keTtcbiAgfVxuXG4gIHJldHVybiB7IHg6IGN4ICsgZHgsIHk6IGN5ICsgZHkgfTtcbn1cbiIsImV4cG9ydCB7IGludGVyc2VjdExpbmUgfTtcblxuLypcbiAqIFJldHVybnMgdGhlIHBvaW50IGF0IHdoaWNoIHR3byBsaW5lcywgcCBhbmQgcSwgaW50ZXJzZWN0IG9yIHJldHVybnNcbiAqIHVuZGVmaW5lZCBpZiB0aGV5IGRvIG5vdCBpbnRlcnNlY3QuXG4gKi9cbmZ1bmN0aW9uIGludGVyc2VjdExpbmUocDEsIHAyLCBxMSwgcTIpIHtcbiAgLy8gQWxnb3JpdGhtIGZyb20gSi4gQXZybywgKGVkLikgR3JhcGhpY3MgR2VtcywgTm8gMiwgTW9yZ2FuIEthdWZtYW5uLCAxOTk0LFxuICAvLyBwNyBhbmQgcDQ3My5cblxuICB2YXIgYTEsIGEyLCBiMSwgYjIsIGMxLCBjMjtcbiAgdmFyIHIxLCByMiwgcjMsIHI0O1xuICB2YXIgZGVub20sIG9mZnNldCwgbnVtO1xuICB2YXIgeCwgeTtcblxuICAvLyBDb21wdXRlIGExLCBiMSwgYzEsIHdoZXJlIGxpbmUgam9pbmluZyBwb2ludHMgMSBhbmQgMiBpcyBGKHgseSkgPSBhMSB4ICtcbiAgLy8gYjEgeSArIGMxID0gMC5cbiAgYTEgPSBwMi55IC0gcDEueTtcbiAgYjEgPSBwMS54IC0gcDIueDtcbiAgYzEgPSBwMi54ICogcDEueSAtIHAxLnggKiBwMi55O1xuXG4gIC8vIENvbXB1dGUgcjMgYW5kIHI0LlxuICByMyA9IGExICogcTEueCArIGIxICogcTEueSArIGMxO1xuICByNCA9IGExICogcTIueCArIGIxICogcTIueSArIGMxO1xuXG4gIC8vIENoZWNrIHNpZ25zIG9mIHIzIGFuZCByNC4gSWYgYm90aCBwb2ludCAzIGFuZCBwb2ludCA0IGxpZSBvblxuICAvLyBzYW1lIHNpZGUgb2YgbGluZSAxLCB0aGUgbGluZSBzZWdtZW50cyBkbyBub3QgaW50ZXJzZWN0LlxuICBpZiAocjMgIT09IDAgJiYgcjQgIT09IDAgJiYgc2FtZVNpZ24ocjMsIHI0KSkge1xuICAgIHJldHVybiAvKkRPTlRfSU5URVJTRUNUKi87XG4gIH1cblxuICAvLyBDb21wdXRlIGEyLCBiMiwgYzIgd2hlcmUgbGluZSBqb2luaW5nIHBvaW50cyAzIGFuZCA0IGlzIEcoeCx5KSA9IGEyIHggKyBiMiB5ICsgYzIgPSAwXG4gIGEyID0gcTIueSAtIHExLnk7XG4gIGIyID0gcTEueCAtIHEyLng7XG4gIGMyID0gcTIueCAqIHExLnkgLSBxMS54ICogcTIueTtcblxuICAvLyBDb21wdXRlIHIxIGFuZCByMlxuICByMSA9IGEyICogcDEueCArIGIyICogcDEueSArIGMyO1xuICByMiA9IGEyICogcDIueCArIGIyICogcDIueSArIGMyO1xuXG4gIC8vIENoZWNrIHNpZ25zIG9mIHIxIGFuZCByMi4gSWYgYm90aCBwb2ludCAxIGFuZCBwb2ludCAyIGxpZVxuICAvLyBvbiBzYW1lIHNpZGUgb2Ygc2Vjb25kIGxpbmUgc2VnbWVudCwgdGhlIGxpbmUgc2VnbWVudHMgZG9cbiAgLy8gbm90IGludGVyc2VjdC5cbiAgaWYgKHIxICE9PSAwICYmIHIyICE9PSAwICYmIHNhbWVTaWduKHIxLCByMikpIHtcbiAgICByZXR1cm4gLypET05UX0lOVEVSU0VDVCovO1xuICB9XG5cbiAgLy8gTGluZSBzZWdtZW50cyBpbnRlcnNlY3Q6IGNvbXB1dGUgaW50ZXJzZWN0aW9uIHBvaW50LlxuICBkZW5vbSA9IGExICogYjIgLSBhMiAqIGIxO1xuICBpZiAoZGVub20gPT09IDApIHtcbiAgICByZXR1cm4gLypDT0xMSU5FQVIqLztcbiAgfVxuXG4gIG9mZnNldCA9IE1hdGguYWJzKGRlbm9tIC8gMik7XG5cbiAgLy8gVGhlIGRlbm9tLzIgaXMgdG8gZ2V0IHJvdW5kaW5nIGluc3RlYWQgb2YgdHJ1bmNhdGluZy4gSXRcbiAgLy8gaXMgYWRkZWQgb3Igc3VidHJhY3RlZCB0byB0aGUgbnVtZXJhdG9yLCBkZXBlbmRpbmcgdXBvbiB0aGVcbiAgLy8gc2lnbiBvZiB0aGUgbnVtZXJhdG9yLlxuICBudW0gPSBiMSAqIGMyIC0gYjIgKiBjMTtcbiAgeCA9IG51bSA8IDAgPyAobnVtIC0gb2Zmc2V0KSAvIGRlbm9tIDogKG51bSArIG9mZnNldCkgLyBkZW5vbTtcblxuICBudW0gPSBhMiAqIGMxIC0gYTEgKiBjMjtcbiAgeSA9IG51bSA8IDAgPyAobnVtIC0gb2Zmc2V0KSAvIGRlbm9tIDogKG51bSArIG9mZnNldCkgLyBkZW5vbTtcblxuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG59XG5cbmZ1bmN0aW9uIHNhbWVTaWduKHIxLCByMikge1xuICByZXR1cm4gcjEgKiByMiA+IDA7XG59XG4iLCJleHBvcnQgeyBpbnRlcnNlY3ROb2RlIH07XG5cbmZ1bmN0aW9uIGludGVyc2VjdE5vZGUobm9kZSwgcG9pbnQpIHtcbiAgcmV0dXJuIG5vZGUuaW50ZXJzZWN0KHBvaW50KTtcbn1cbiIsImltcG9ydCB7IGludGVyc2VjdExpbmUgfSBmcm9tICcuL2ludGVyc2VjdC1saW5lLmpzJztcblxuZXhwb3J0IHsgaW50ZXJzZWN0UG9seWdvbiB9O1xuXG4vKlxuICogUmV0dXJucyB0aGUgcG9pbnQgKHt4LCB5fSkgYXQgd2hpY2ggdGhlIHBvaW50IGFyZ3VtZW50IGludGVyc2VjdHMgd2l0aCB0aGVcbiAqIG5vZGUgYXJndW1lbnQgYXNzdW1pbmcgdGhhdCBpdCBoYXMgdGhlIHNoYXBlIHNwZWNpZmllZCBieSBwb2x5Z29uLlxuICovXG5mdW5jdGlvbiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvbHlQb2ludHMsIHBvaW50KSB7XG4gIHZhciB4MSA9IG5vZGUueDtcbiAgdmFyIHkxID0gbm9kZS55O1xuXG4gIHZhciBpbnRlcnNlY3Rpb25zID0gW107XG5cbiAgdmFyIG1pblggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIHZhciBtaW5ZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICBwb2x5UG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgbWluWCA9IE1hdGgubWluKG1pblgsIGVudHJ5LngpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBlbnRyeS55KTtcbiAgfSk7XG5cbiAgdmFyIGxlZnQgPSB4MSAtIG5vZGUud2lkdGggLyAyIC0gbWluWDtcbiAgdmFyIHRvcCA9IHkxIC0gbm9kZS5oZWlnaHQgLyAyIC0gbWluWTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvbHlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcDEgPSBwb2x5UG9pbnRzW2ldO1xuICAgIHZhciBwMiA9IHBvbHlQb2ludHNbaSA8IHBvbHlQb2ludHMubGVuZ3RoIC0gMSA/IGkgKyAxIDogMF07XG4gICAgdmFyIGludGVyc2VjdCA9IGludGVyc2VjdExpbmUoXG4gICAgICBub2RlLFxuICAgICAgcG9pbnQsXG4gICAgICB7IHg6IGxlZnQgKyBwMS54LCB5OiB0b3AgKyBwMS55IH0sXG4gICAgICB7IHg6IGxlZnQgKyBwMi54LCB5OiB0b3AgKyBwMi55IH1cbiAgICApO1xuICAgIGlmIChpbnRlcnNlY3QpIHtcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChpbnRlcnNlY3QpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaW50ZXJzZWN0aW9ucy5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmxvZygnTk8gSU5URVJTRUNUSU9OIEZPVU5ELCBSRVRVUk4gTk9ERSBDRU5URVInLCBub2RlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAvLyBNb3JlIGludGVyc2VjdGlvbnMsIGZpbmQgdGhlIG9uZSBuZWFyZXN0IHRvIGVkZ2UgZW5kIHBvaW50XG4gICAgaW50ZXJzZWN0aW9ucy5zb3J0KGZ1bmN0aW9uIChwLCBxKSB7XG4gICAgICB2YXIgcGR4ID0gcC54IC0gcG9pbnQueDtcbiAgICAgIHZhciBwZHkgPSBwLnkgLSBwb2ludC55O1xuICAgICAgdmFyIGRpc3RwID0gTWF0aC5zcXJ0KHBkeCAqIHBkeCArIHBkeSAqIHBkeSk7XG5cbiAgICAgIHZhciBxZHggPSBxLnggLSBwb2ludC54O1xuICAgICAgdmFyIHFkeSA9IHEueSAtIHBvaW50Lnk7XG4gICAgICB2YXIgZGlzdHEgPSBNYXRoLnNxcnQocWR4ICogcWR4ICsgcWR5ICogcWR5KTtcblxuICAgICAgcmV0dXJuIGRpc3RwIDwgZGlzdHEgPyAtMSA6IGRpc3RwID09PSBkaXN0cSA/IDAgOiAxO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbnRlcnNlY3Rpb25zWzBdO1xufVxuIiwiZXhwb3J0IHsgaW50ZXJzZWN0UmVjdCB9O1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RSZWN0KG5vZGUsIHBvaW50KSB7XG4gIHZhciB4ID0gbm9kZS54O1xuICB2YXIgeSA9IG5vZGUueTtcblxuICAvLyBSZWN0YW5nbGUgaW50ZXJzZWN0aW9uIGFsZ29yaXRobSBmcm9tOlxuICAvLyBodHRwOi8vbWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTA4MTEzL2ZpbmQtZWRnZS1iZXR3ZWVuLXR3by1ib3hlc1xuICB2YXIgZHggPSBwb2ludC54IC0geDtcbiAgdmFyIGR5ID0gcG9pbnQueSAtIHk7XG4gIHZhciB3ID0gbm9kZS53aWR0aCAvIDI7XG4gIHZhciBoID0gbm9kZS5oZWlnaHQgLyAyO1xuXG4gIHZhciBzeCwgc3k7XG4gIGlmIChNYXRoLmFicyhkeSkgKiB3ID4gTWF0aC5hYnMoZHgpICogaCkge1xuICAgIC8vIEludGVyc2VjdGlvbiBpcyB0b3Agb3IgYm90dG9tIG9mIHJlY3QuXG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgaCA9IC1oO1xuICAgIH1cbiAgICBzeCA9IGR5ID09PSAwID8gMCA6IChoICogZHgpIC8gZHk7XG4gICAgc3kgPSBoO1xuICB9IGVsc2Uge1xuICAgIC8vIEludGVyc2VjdGlvbiBpcyBsZWZ0IG9yIHJpZ2h0IG9mIHJlY3QuXG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgdyA9IC13O1xuICAgIH1cbiAgICBzeCA9IHc7XG4gICAgc3kgPSBkeCA9PT0gMCA/IDAgOiAodyAqIGR5KSAvIGR4O1xuICB9XG5cbiAgcmV0dXJuIHsgeDogeCArIHN4LCB5OiB5ICsgc3kgfTtcbn1cbiIsImltcG9ydCB7IGFkZEh0bWxMYWJlbCB9IGZyb20gJy4vYWRkLWh0bWwtbGFiZWwuanMnO1xuaW1wb3J0IHsgYWRkU1ZHTGFiZWwgfSBmcm9tICcuL2FkZC1zdmctbGFiZWwuanMnO1xuaW1wb3J0IHsgYWRkVGV4dExhYmVsIH0gZnJvbSAnLi9hZGQtdGV4dC1sYWJlbC5qcyc7XG5cbmV4cG9ydCB7IGFkZExhYmVsIH07XG5cbmZ1bmN0aW9uIGFkZExhYmVsKHJvb3QsIG5vZGUsIGxvY2F0aW9uKSB7XG4gIHZhciBsYWJlbCA9IG5vZGUubGFiZWw7XG4gIHZhciBsYWJlbFN2ZyA9IHJvb3QuYXBwZW5kKCdnJyk7XG5cbiAgLy8gQWxsb3cgdGhlIGxhYmVsIHRvIGJlIGEgc3RyaW5nLCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIERPTSBlbGVtZW50LCBvclxuICAvLyBhIERPTSBlbGVtZW50IGl0c2VsZi5cbiAgaWYgKG5vZGUubGFiZWxUeXBlID09PSAnc3ZnJykge1xuICAgIGFkZFNWR0xhYmVsKGxhYmVsU3ZnLCBub2RlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbGFiZWwgIT09ICdzdHJpbmcnIHx8IG5vZGUubGFiZWxUeXBlID09PSAnaHRtbCcpIHtcbiAgICBhZGRIdG1sTGFiZWwobGFiZWxTdmcsIG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGFkZFRleHRMYWJlbChsYWJlbFN2Zywgbm9kZSk7XG4gIH1cblxuICB2YXIgbGFiZWxCQm94ID0gbGFiZWxTdmcubm9kZSgpLmdldEJCb3goKTtcbiAgdmFyIHk7XG4gIHN3aXRjaCAobG9jYXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgeSA9IC1ub2RlLmhlaWdodCAvIDI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgeSA9IG5vZGUuaGVpZ2h0IC8gMiAtIGxhYmVsQkJveC5oZWlnaHQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgeSA9IC1sYWJlbEJCb3guaGVpZ2h0IC8gMjtcbiAgfVxuICBsYWJlbFN2Zy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAtbGFiZWxCQm94LndpZHRoIC8gMiArICcsJyArIHkgKyAnKScpO1xuXG4gIHJldHVybiBsYWJlbFN2Zztcbn1cbiIsImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbC5qcyc7XG5cbmV4cG9ydCB7IGFkZFNWR0xhYmVsIH07XG5cbmZ1bmN0aW9uIGFkZFNWR0xhYmVsKHJvb3QsIG5vZGUpIHtcbiAgdmFyIGRvbU5vZGUgPSByb290O1xuXG4gIGRvbU5vZGUubm9kZSgpLmFwcGVuZENoaWxkKG5vZGUubGFiZWwpO1xuXG4gIHV0aWwuYXBwbHlTdHlsZShkb21Ob2RlLCBub2RlLmxhYmVsU3R5bGUpO1xuXG4gIHJldHVybiBkb21Ob2RlO1xufVxuIiwiaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsLmpzJztcblxuZXhwb3J0IHsgYWRkVGV4dExhYmVsIH07XG5cbi8qXG4gKiBBdHRhY2hlcyBhIHRleHQgbGFiZWwgdG8gdGhlIHNwZWNpZmllZCByb290LiBIYW5kbGVzIGVzY2FwZSBzZXF1ZW5jZXMuXG4gKi9cbmZ1bmN0aW9uIGFkZFRleHRMYWJlbChyb290LCBub2RlKSB7XG4gIHZhciBkb21Ob2RlID0gcm9vdC5hcHBlbmQoJ3RleHQnKTtcblxuICB2YXIgbGluZXMgPSBwcm9jZXNzRXNjYXBlU2VxdWVuY2VzKG5vZGUubGFiZWwpLnNwbGl0KCdcXG4nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGRvbU5vZGVcbiAgICAgIC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgIC5hdHRyKCd4bWw6c3BhY2UnLCAncHJlc2VydmUnKVxuICAgICAgLmF0dHIoJ2R5JywgJzFlbScpXG4gICAgICAuYXR0cigneCcsICcxJylcbiAgICAgIC50ZXh0KGxpbmVzW2ldKTtcbiAgfVxuXG4gIHV0aWwuYXBwbHlTdHlsZShkb21Ob2RlLCBub2RlLmxhYmVsU3R5bGUpO1xuXG4gIHJldHVybiBkb21Ob2RlO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzRXNjYXBlU2VxdWVuY2VzKHRleHQpIHtcbiAgdmFyIG5ld1RleHQgPSAnJztcbiAgdmFyIGVzY2FwZWQgPSBmYWxzZTtcbiAgdmFyIGNoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyArK2kpIHtcbiAgICBjaCA9IHRleHRbaV07XG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgbmV3VGV4dCArPSAnXFxuJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBuZXdUZXh0ICs9IGNoO1xuICAgICAgfVxuICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1RleHQgKz0gY2g7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdUZXh0O1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwuanMnO1xuXG5leHBvcnQgeyBwb3NpdGlvbkNsdXN0ZXJzIH07XG5cbmZ1bmN0aW9uIHBvc2l0aW9uQ2x1c3RlcnMoc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBjcmVhdGVkID0gc2VsZWN0aW9uLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICFkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgndXBkYXRlJyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIG5vZGUueCArICcsJyArIG5vZGUueSArICcpJztcbiAgfVxuXG4gIGNyZWF0ZWQuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcblxuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihzZWxlY3Rpb24sIGcpLnN0eWxlKCdvcGFjaXR5JywgMSkuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcblxuICB1dGlsXG4gICAgLmFwcGx5VHJhbnNpdGlvbihjcmVhdGVkLnNlbGVjdEFsbCgncmVjdCcpLCBnKVxuICAgIC5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gZy5ub2RlKHYpLndpZHRoO1xuICAgIH0pXG4gICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gZy5ub2RlKHYpLmhlaWdodDtcbiAgICB9KVxuICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgcmV0dXJuIC1ub2RlLndpZHRoIC8gMjtcbiAgICB9KVxuICAgIC5hdHRyKCd5JywgZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgcmV0dXJuIC1ub2RlLmhlaWdodCAvIDI7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbC5qcyc7XG5cbmV4cG9ydCB7IHBvc2l0aW9uRWRnZUxhYmVscyB9O1xuXG5mdW5jdGlvbiBwb3NpdGlvbkVkZ2VMYWJlbHMoc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBjcmVhdGVkID0gc2VsZWN0aW9uLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICFkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgndXBkYXRlJyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZShlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgcmV0dXJuIF8uaGFzKGVkZ2UsICd4JykgPyAndHJhbnNsYXRlKCcgKyBlZGdlLnggKyAnLCcgKyBlZGdlLnkgKyAnKScgOiAnJztcbiAgfVxuXG4gIGNyZWF0ZWQuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcblxuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihzZWxlY3Rpb24sIGcpLnN0eWxlKCdvcGFjaXR5JywgMSkuYXR0cigndHJhbnNmb3JtJywgdHJhbnNsYXRlKTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsLmpzJztcblxuZXhwb3J0IHsgcG9zaXRpb25Ob2RlcyB9O1xuXG5mdW5jdGlvbiBwb3NpdGlvbk5vZGVzKHNlbGVjdGlvbiwgZykge1xuICB2YXIgY3JlYXRlZCA9IHNlbGVjdGlvbi5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ3VwZGF0ZScpO1xuICB9KTtcblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBub2RlLnggKyAnLCcgKyBub2RlLnkgKyAnKSc7XG4gIH1cblxuICBjcmVhdGVkLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSk7XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oc2VsZWN0aW9uLCBnKS5zdHlsZSgnb3BhY2l0eScsIDEpLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZSk7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBsYXlvdXQgfSBmcm9tICcuLi9kYWdyZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBhcnJvd3MsIHNldEFycm93cyB9IGZyb20gJy4vYXJyb3dzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUNsdXN0ZXJzLCBzZXRDcmVhdGVDbHVzdGVycyB9IGZyb20gJy4vY3JlYXRlLWNsdXN0ZXJzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUVkZ2VMYWJlbHMsIHNldENyZWF0ZUVkZ2VMYWJlbHMgfSBmcm9tICcuL2NyZWF0ZS1lZGdlLWxhYmVscy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFZGdlUGF0aHMsIHNldENyZWF0ZUVkZ2VQYXRocyB9IGZyb20gJy4vY3JlYXRlLWVkZ2UtcGF0aHMuanMnO1xuaW1wb3J0IHsgY3JlYXRlTm9kZXMsIHNldENyZWF0ZU5vZGVzIH0gZnJvbSAnLi9jcmVhdGUtbm9kZXMuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25DbHVzdGVycyB9IGZyb20gJy4vcG9zaXRpb24tY2x1c3RlcnMuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25FZGdlTGFiZWxzIH0gZnJvbSAnLi9wb3NpdGlvbi1lZGdlLWxhYmVscy5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvbk5vZGVzIH0gZnJvbSAnLi9wb3NpdGlvbi1ub2Rlcy5qcyc7XG5pbXBvcnQgeyBzaGFwZXMsIHNldFNoYXBlcyB9IGZyb20gJy4vc2hhcGVzLmpzJztcblxuZXhwb3J0IHsgcmVuZGVyIH07XG5cbi8vIFRoaXMgZGVzaWduIGlzIGJhc2VkIG9uIGh0dHA6Ly9ib3N0Lm9ja3Mub3JnL21pa2UvY2hhcnQvLlxuZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbiAoc3ZnLCBnKSB7XG4gICAgcHJlUHJvY2Vzc0dyYXBoKGcpO1xuXG4gICAgdmFyIG91dHB1dEdyb3VwID0gY3JlYXRlT3JTZWxlY3RHcm91cChzdmcsICdvdXRwdXQnKTtcbiAgICB2YXIgY2x1c3RlcnNHcm91cCA9IGNyZWF0ZU9yU2VsZWN0R3JvdXAob3V0cHV0R3JvdXAsICdjbHVzdGVycycpO1xuICAgIHZhciBlZGdlUGF0aHNHcm91cCA9IGNyZWF0ZU9yU2VsZWN0R3JvdXAob3V0cHV0R3JvdXAsICdlZGdlUGF0aHMnKTtcbiAgICB2YXIgZWRnZUxhYmVscyA9IGNyZWF0ZUVkZ2VMYWJlbHMoY3JlYXRlT3JTZWxlY3RHcm91cChvdXRwdXRHcm91cCwgJ2VkZ2VMYWJlbHMnKSwgZyk7XG4gICAgdmFyIG5vZGVzID0gY3JlYXRlTm9kZXMoY3JlYXRlT3JTZWxlY3RHcm91cChvdXRwdXRHcm91cCwgJ25vZGVzJyksIGcsIHNoYXBlcyk7XG5cbiAgICBsYXlvdXQoZyk7XG5cbiAgICBwb3NpdGlvbk5vZGVzKG5vZGVzLCBnKTtcbiAgICBwb3NpdGlvbkVkZ2VMYWJlbHMoZWRnZUxhYmVscywgZyk7XG4gICAgY3JlYXRlRWRnZVBhdGhzKGVkZ2VQYXRoc0dyb3VwLCBnLCBhcnJvd3MpO1xuXG4gICAgdmFyIGNsdXN0ZXJzID0gY3JlYXRlQ2x1c3RlcnMoY2x1c3RlcnNHcm91cCwgZyk7XG4gICAgcG9zaXRpb25DbHVzdGVycyhjbHVzdGVycywgZyk7XG5cbiAgICBwb3N0UHJvY2Vzc0dyYXBoKGcpO1xuICB9O1xuXG4gIGZuLmNyZWF0ZU5vZGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY3JlYXRlTm9kZXM7XG4gICAgc2V0Q3JlYXRlTm9kZXModmFsdWUpO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICBmbi5jcmVhdGVDbHVzdGVycyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUNsdXN0ZXJzO1xuICAgIHNldENyZWF0ZUNsdXN0ZXJzKHZhbHVlKTtcbiAgICByZXR1cm4gZm47XG4gIH07XG5cbiAgZm4uY3JlYXRlRWRnZUxhYmVscyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUVkZ2VMYWJlbHM7XG4gICAgc2V0Q3JlYXRlRWRnZUxhYmVscyh2YWx1ZSk7XG4gICAgcmV0dXJuIGZuO1xuICB9O1xuXG4gIGZuLmNyZWF0ZUVkZ2VQYXRocyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUVkZ2VQYXRocztcbiAgICBzZXRDcmVhdGVFZGdlUGF0aHModmFsdWUpO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICBmbi5zaGFwZXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaGFwZXM7XG4gICAgc2V0U2hhcGVzKHZhbHVlKTtcbiAgICByZXR1cm4gZm47XG4gIH07XG5cbiAgZm4uYXJyb3dzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYXJyb3dzO1xuICAgIHNldEFycm93cyh2YWx1ZSk7XG4gICAgcmV0dXJuIGZuO1xuICB9O1xuXG4gIHJldHVybiBmbjtcbn1cblxudmFyIE5PREVfREVGQVVMVF9BVFRSUyA9IHtcbiAgcGFkZGluZ0xlZnQ6IDEwLFxuICBwYWRkaW5nUmlnaHQ6IDEwLFxuICBwYWRkaW5nVG9wOiAxMCxcbiAgcGFkZGluZ0JvdHRvbTogMTAsXG4gIHJ4OiAwLFxuICByeTogMCxcbiAgc2hhcGU6ICdyZWN0Jyxcbn07XG5cbnZhciBFREdFX0RFRkFVTFRfQVRUUlMgPSB7XG4gIGFycm93aGVhZDogJ25vcm1hbCcsXG4gIGN1cnZlOiBkMy5jdXJ2ZUxpbmVhcixcbn07XG5cbmZ1bmN0aW9uIHByZVByb2Nlc3NHcmFwaChnKSB7XG4gIGcubm9kZXMoKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgaWYgKCFfLmhhcyhub2RlLCAnbGFiZWwnKSAmJiAhZy5jaGlsZHJlbih2KS5sZW5ndGgpIHtcbiAgICAgIG5vZGUubGFiZWwgPSB2O1xuICAgIH1cblxuICAgIGlmIChfLmhhcyhub2RlLCAncGFkZGluZ1gnKSkge1xuICAgICAgXy5kZWZhdWx0cyhub2RlLCB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBub2RlLnBhZGRpbmdYLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IG5vZGUucGFkZGluZ1gsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMobm9kZSwgJ3BhZGRpbmdZJykpIHtcbiAgICAgIF8uZGVmYXVsdHMobm9kZSwge1xuICAgICAgICBwYWRkaW5nVG9wOiBub2RlLnBhZGRpbmdZLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBub2RlLnBhZGRpbmdZLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKF8uaGFzKG5vZGUsICdwYWRkaW5nJykpIHtcbiAgICAgIF8uZGVmYXVsdHMobm9kZSwge1xuICAgICAgICBwYWRkaW5nTGVmdDogbm9kZS5wYWRkaW5nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IG5vZGUucGFkZGluZyxcbiAgICAgICAgcGFkZGluZ1RvcDogbm9kZS5wYWRkaW5nLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBub2RlLnBhZGRpbmcsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfLmRlZmF1bHRzKG5vZGUsIE5PREVfREVGQVVMVF9BVFRSUyk7XG5cbiAgICBfLmVhY2goWydwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nQm90dG9tJ10sIGZ1bmN0aW9uIChrKSB7XG4gICAgICBub2RlW2tdID0gTnVtYmVyKG5vZGVba10pO1xuICAgIH0pO1xuXG4gICAgLy8gU2F2ZSBkaW1lbnNpb25zIGZvciByZXN0b3JlIGR1cmluZyBwb3N0LXByb2Nlc3NpbmdcbiAgICBpZiAoXy5oYXMobm9kZSwgJ3dpZHRoJykpIHtcbiAgICAgIG5vZGUuX3ByZXZXaWR0aCA9IG5vZGUud2lkdGg7XG4gICAgfVxuICAgIGlmIChfLmhhcyhub2RlLCAnaGVpZ2h0JykpIHtcbiAgICAgIG5vZGUuX3ByZXZIZWlnaHQgPSBub2RlLmhlaWdodDtcbiAgICB9XG4gIH0pO1xuXG4gIGcuZWRnZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgaWYgKCFfLmhhcyhlZGdlLCAnbGFiZWwnKSkge1xuICAgICAgZWRnZS5sYWJlbCA9ICcnO1xuICAgIH1cbiAgICBfLmRlZmF1bHRzKGVkZ2UsIEVER0VfREVGQVVMVF9BVFRSUyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3N0UHJvY2Vzc0dyYXBoKGcpIHtcbiAgXy5lYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcblxuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgZGltZW5zaW9uc1xuICAgIGlmIChfLmhhcyhub2RlLCAnX3ByZXZXaWR0aCcpKSB7XG4gICAgICBub2RlLndpZHRoID0gbm9kZS5fcHJldldpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgbm9kZS53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMobm9kZSwgJ19wcmV2SGVpZ2h0JykpIHtcbiAgICAgIG5vZGUuaGVpZ2h0ID0gbm9kZS5fcHJldkhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIG5vZGUuaGVpZ2h0O1xuICAgIH1cblxuICAgIGRlbGV0ZSBub2RlLl9wcmV2V2lkdGg7XG4gICAgZGVsZXRlIG5vZGUuX3ByZXZIZWlnaHQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPclNlbGVjdEdyb3VwKHJvb3QsIG5hbWUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHJvb3Quc2VsZWN0KCdnLicgKyBuYW1lKTtcbiAgaWYgKHNlbGVjdGlvbi5lbXB0eSgpKSB7XG4gICAgc2VsZWN0aW9uID0gcm9vdC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsIG5hbWUpO1xuICB9XG4gIHJldHVybiBzZWxlY3Rpb247XG59XG4iLCJpbXBvcnQgeyBpbnRlcnNlY3RDaXJjbGUgfSBmcm9tICcuL2ludGVyc2VjdC9pbnRlcnNlY3QtY2lyY2xlLmpzJztcbmltcG9ydCB7IGludGVyc2VjdEVsbGlwc2UgfSBmcm9tICcuL2ludGVyc2VjdC9pbnRlcnNlY3QtZWxsaXBzZS5qcyc7XG5pbXBvcnQgeyBpbnRlcnNlY3RQb2x5Z29uIH0gZnJvbSAnLi9pbnRlcnNlY3QvaW50ZXJzZWN0LXBvbHlnb24uanMnO1xuaW1wb3J0IHsgaW50ZXJzZWN0UmVjdCB9IGZyb20gJy4vaW50ZXJzZWN0L2ludGVyc2VjdC1yZWN0LmpzJztcblxuZXhwb3J0IHsgc2hhcGVzLCBzZXRTaGFwZXMgfTtcblxudmFyIHNoYXBlcyA9IHtcbiAgcmVjdCxcbiAgZWxsaXBzZSxcbiAgY2lyY2xlLFxuICBkaWFtb25kLFxufTtcblxuZnVuY3Rpb24gc2V0U2hhcGVzKHZhbHVlKSB7XG4gIHNoYXBlcyA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiByZWN0KHBhcmVudCwgYmJveCwgbm9kZSkge1xuICB2YXIgc2hhcGVTdmcgPSBwYXJlbnRcbiAgICAuaW5zZXJ0KCdyZWN0JywgJzpmaXJzdC1jaGlsZCcpXG4gICAgLmF0dHIoJ3J4Jywgbm9kZS5yeClcbiAgICAuYXR0cigncnknLCBub2RlLnJ5KVxuICAgIC5hdHRyKCd4JywgLWJib3gud2lkdGggLyAyKVxuICAgIC5hdHRyKCd5JywgLWJib3guaGVpZ2h0IC8gMilcbiAgICAuYXR0cignd2lkdGgnLCBiYm94LndpZHRoKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBiYm94LmhlaWdodCk7XG5cbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0UmVjdChub2RlLCBwb2ludCk7XG4gIH07XG5cbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuXG5mdW5jdGlvbiBlbGxpcHNlKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICB2YXIgcnggPSBiYm94LndpZHRoIC8gMjtcbiAgdmFyIHJ5ID0gYmJveC5oZWlnaHQgLyAyO1xuICB2YXIgc2hhcGVTdmcgPSBwYXJlbnRcbiAgICAuaW5zZXJ0KCdlbGxpcHNlJywgJzpmaXJzdC1jaGlsZCcpXG4gICAgLmF0dHIoJ3gnLCAtYmJveC53aWR0aCAvIDIpXG4gICAgLmF0dHIoJ3knLCAtYmJveC5oZWlnaHQgLyAyKVxuICAgIC5hdHRyKCdyeCcsIHJ4KVxuICAgIC5hdHRyKCdyeScsIHJ5KTtcblxuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RFbGxpcHNlKG5vZGUsIHJ4LCByeSwgcG9pbnQpO1xuICB9O1xuXG4gIHJldHVybiBzaGFwZVN2Zztcbn1cblxuZnVuY3Rpb24gY2lyY2xlKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICB2YXIgciA9IE1hdGgubWF4KGJib3gud2lkdGgsIGJib3guaGVpZ2h0KSAvIDI7XG4gIHZhciBzaGFwZVN2ZyA9IHBhcmVudFxuICAgIC5pbnNlcnQoJ2NpcmNsZScsICc6Zmlyc3QtY2hpbGQnKVxuICAgIC5hdHRyKCd4JywgLWJib3gud2lkdGggLyAyKVxuICAgIC5hdHRyKCd5JywgLWJib3guaGVpZ2h0IC8gMilcbiAgICAuYXR0cigncicsIHIpO1xuXG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdENpcmNsZShub2RlLCByLCBwb2ludCk7XG4gIH07XG5cbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuXG4vLyBDaXJjdW1zY3JpYmUgYW4gZWxsaXBzZSBmb3IgdGhlIGJvdW5kaW5nIGJveCB3aXRoIGEgZGlhbW9uZCBzaGFwZS4gSSBkZXJpdmVkXG4vLyB0aGUgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBkaWFtb25kIHNoYXBlIGZyb206XG4vLyBodHRwOi8vbWF0aGZvcnVtLm9yZy9rYi9tZXNzYWdlLmpzcGE/bWVzc2FnZUlEPTM3NTAyMzZcbmZ1bmN0aW9uIGRpYW1vbmQocGFyZW50LCBiYm94LCBub2RlKSB7XG4gIHZhciB3ID0gKGJib3gud2lkdGggKiBNYXRoLlNRUlQyKSAvIDI7XG4gIHZhciBoID0gKGJib3guaGVpZ2h0ICogTWF0aC5TUVJUMikgLyAyO1xuICB2YXIgcG9pbnRzID0gW1xuICAgIHsgeDogMCwgeTogLWggfSxcbiAgICB7IHg6IC13LCB5OiAwIH0sXG4gICAgeyB4OiAwLCB5OiBoIH0sXG4gICAgeyB4OiB3LCB5OiAwIH0sXG4gIF07XG4gIHZhciBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoJ3BvbHlnb24nLCAnOmZpcnN0LWNoaWxkJykuYXR0cihcbiAgICAncG9pbnRzJyxcbiAgICBwb2ludHNcbiAgICAgIC5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIHAueCArICcsJyArIHAueTtcbiAgICAgIH0pXG4gICAgICAuam9pbignICcpXG4gICk7XG5cbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvaW50cywgcCk7XG4gIH07XG5cbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnLi9kYWdyZS1qcy9yZW5kZXIuanMnO1xuaW1wb3J0ICogYXMgZ3JhcGhsaWIgZnJvbSAnLi9ncmFwaGxpYi9pbmRleC5qcyc7XG5cbmltcG9ydCAqIGFzIGludGVyc2VjdCBmcm9tICcuL2RhZ3JlLWpzL2ludGVyc2VjdC9pbmRleC5qcyc7XG5cbmV4cG9ydCB7IGdyYXBobGliLCBpbnRlcnNlY3QsIHJlbmRlciB9O1xuIiwiaW1wb3J0IHsgcCBhcyBwYXJzZXIsIGYgYXMgZmxvd0RiIH0gZnJvbSBcIi4vZmxvd0RiLWZhMTI4OGIwLmpzXCI7XG5pbXBvcnQgKiBhcyBncmFwaGxpYiBmcm9tIFwiZGFncmUtZDMtZXMvc3JjL2dyYXBobGliL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBzZWxlY3QsIGN1cnZlTGluZWFyLCBzZWxlY3RBbGwgfSBmcm9tIFwiZDNcIjtcbmltcG9ydCB7IGsgYXMgZ2V0U3R5bGVzRnJvbUFycmF5LCBtIGFzIGV2YWx1YXRlLCBjIGFzIGdldENvbmZpZywgZSBhcyBjb21tb24sIGwgYXMgbG9nLCBuIGFzIGludGVycG9sYXRlVG9DdXJ2ZSwgbyBhcyBzZXR1cEdyYXBoVmlld2JveCB9IGZyb20gXCIuL21lcm1haWQtMGQxOTJlYzMuanNcIjtcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gXCJkYWdyZS1kMy1lc1wiO1xuaW1wb3J0IHsgYXBwbHlTdHlsZSB9IGZyb20gXCJkYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvdXRpbC5qc1wiO1xuaW1wb3J0IHsgYWRkSHRtbExhYmVsIH0gZnJvbSBcImRhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9sYWJlbC9hZGQtaHRtbC1sYWJlbC5qc1wiO1xuaW1wb3J0IHsgaW50ZXJzZWN0UG9seWdvbiB9IGZyb20gXCJkYWdyZS1kMy1lcy9zcmMvZGFncmUtanMvaW50ZXJzZWN0L2ludGVyc2VjdC1wb2x5Z29uLmpzXCI7XG5pbXBvcnQgeyBpbnRlcnNlY3RSZWN0IH0gZnJvbSBcImRhZ3JlLWQzLWVzL3NyYy9kYWdyZS1qcy9pbnRlcnNlY3QvaW50ZXJzZWN0LXJlY3QuanNcIjtcbmltcG9ydCB7IGYgYXMgZmxvd1JlbmRlcmVyVjIsIGEgYXMgZmxvd1N0eWxlcyB9IGZyb20gXCIuL3N0eWxlcy0wNjcxYTA5Ni5qc1wiO1xuaW1wb3J0IFwidHMtZGVkZW50XCI7XG5pbXBvcnQgXCJkYXlqc1wiO1xuaW1wb3J0IFwiQGJyYWludHJlZS9zYW5pdGl6ZS11cmxcIjtcbmltcG9ydCBcImRvbXB1cmlmeVwiO1xuaW1wb3J0IFwia2hyb21hXCI7XG5pbXBvcnQgXCJsb2Rhc2gtZXMvbWVtb2l6ZS5qc1wiO1xuaW1wb3J0IFwibG9kYXNoLWVzL21lcmdlLmpzXCI7XG5pbXBvcnQgXCJzdHlsaXNcIjtcbmltcG9ydCBcImxvZGFzaC1lcy9pc0VtcHR5LmpzXCI7XG5pbXBvcnQgXCIuL2luZGV4LWY5NDYyZjNmLmpzXCI7XG5pbXBvcnQgXCJkYWdyZS1kMy1lcy9zcmMvZGFncmUvaW5kZXguanNcIjtcbmltcG9ydCBcImRhZ3JlLWQzLWVzL3NyYy9ncmFwaGxpYi9qc29uLmpzXCI7XG5pbXBvcnQgXCIuL2VkZ2VzLWYxNWE3ZTA1LmpzXCI7XG5pbXBvcnQgXCIuL2NyZWF0ZVRleHQtODBjM2JlZmIuanNcIjtcbmltcG9ydCBcIm1kYXN0LXV0aWwtZnJvbS1tYXJrZG93blwiO1xuZnVuY3Rpb24gcXVlc3Rpb24ocGFyZW50LCBiYm94LCBub2RlKSB7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQ7XG4gIGNvbnN0IHMgPSAodyArIGgpICogMC45O1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiBzIC8gMiwgeTogMCB9LFxuICAgIHsgeDogcywgeTogLXMgLyAyIH0sXG4gICAgeyB4OiBzIC8gMiwgeTogLXMgfSxcbiAgICB7IHg6IDAsIHk6IC1zIC8gMiB9XG4gIF07XG4gIGNvbnN0IHNoYXBlU3ZnID0gaW5zZXJ0UG9seWdvblNoYXBlKHBhcmVudCwgcywgcywgcG9pbnRzKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5mdW5jdGlvbiBoZXhhZ29uKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICBjb25zdCBmID0gNDtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0O1xuICBjb25zdCBtID0gaCAvIGY7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgMiAqIG07XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IG0sIHk6IDAgfSxcbiAgICB7IHg6IHcgLSBtLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAtaCAvIDIgfSxcbiAgICB7IHg6IHcgLSBtLCB5OiAtaCB9LFxuICAgIHsgeDogbSwgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IC1oIC8gMiB9XG4gIF07XG4gIGNvbnN0IHNoYXBlU3ZnID0gaW5zZXJ0UG9seWdvblNoYXBlKHBhcmVudCwgdywgaCwgcG9pbnRzKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5mdW5jdGlvbiByZWN0X2xlZnRfaW52X2Fycm93KHBhcmVudCwgYmJveCwgbm9kZSkge1xuICBjb25zdCB3ID0gYmJveC53aWR0aDtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAtaCAvIDIsIHk6IDAgfSxcbiAgICB7IHg6IHcsIHk6IDAgfSxcbiAgICB7IHg6IHcsIHk6IC1oIH0sXG4gICAgeyB4OiAtaCAvIDIsIHk6IC1oIH0sXG4gICAgeyB4OiAwLCB5OiAtaCAvIDIgfVxuICBdO1xuICBjb25zdCBzaGFwZVN2ZyA9IGluc2VydFBvbHlnb25TaGFwZShwYXJlbnQsIHcsIGgsIHBvaW50cyk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0UG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuZnVuY3Rpb24gbGVhbl9yaWdodChwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgY29uc3QgdyA9IGJib3gud2lkdGg7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogLTIgKiBoIC8gNiwgeTogMCB9LFxuICAgIHsgeDogdyAtIGggLyA2LCB5OiAwIH0sXG4gICAgeyB4OiB3ICsgMiAqIGggLyA2LCB5OiAtaCB9LFxuICAgIHsgeDogaCAvIDYsIHk6IC1oIH1cbiAgXTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIGxlYW5fbGVmdChwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgY29uc3QgdyA9IGJib3gud2lkdGg7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogMiAqIGggLyA2LCB5OiAwIH0sXG4gICAgeyB4OiB3ICsgaCAvIDYsIHk6IDAgfSxcbiAgICB7IHg6IHcgLSAyICogaCAvIDYsIHk6IC1oIH0sXG4gICAgeyB4OiAtaCAvIDYsIHk6IC1oIH1cbiAgXTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIHRyYXBlem9pZChwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgY29uc3QgdyA9IGJib3gud2lkdGg7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogLTIgKiBoIC8gNiwgeTogMCB9LFxuICAgIHsgeDogdyArIDIgKiBoIC8gNiwgeTogMCB9LFxuICAgIHsgeDogdyAtIGggLyA2LCB5OiAtaCB9LFxuICAgIHsgeDogaCAvIDYsIHk6IC1oIH1cbiAgXTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIGludl90cmFwZXpvaWQocGFyZW50LCBiYm94LCBub2RlKSB7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IGggLyA2LCB5OiAwIH0sXG4gICAgeyB4OiB3IC0gaCAvIDYsIHk6IDAgfSxcbiAgICB7IHg6IHcgKyAyICogaCAvIDYsIHk6IC1oIH0sXG4gICAgeyB4OiAtMiAqIGggLyA2LCB5OiAtaCB9XG4gIF07XG4gIGNvbnN0IHNoYXBlU3ZnID0gaW5zZXJ0UG9seWdvblNoYXBlKHBhcmVudCwgdywgaCwgcG9pbnRzKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5mdW5jdGlvbiByZWN0X3JpZ2h0X2ludl9hcnJvdyhwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgY29uc3QgdyA9IGJib3gud2lkdGg7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogMCwgeTogMCB9LFxuICAgIHsgeDogdyArIGggLyAyLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAtaCAvIDIgfSxcbiAgICB7IHg6IHcgKyBoIC8gMiwgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IC1oIH1cbiAgXTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIHN0YWRpdW0ocGFyZW50LCBiYm94LCBub2RlKSB7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodDtcbiAgY29uc3QgdyA9IGJib3gud2lkdGggKyBoIC8gNDtcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwicmVjdFwiLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwicnhcIiwgaCAvIDIpLmF0dHIoXCJyeVwiLCBoIC8gMikuYXR0cihcInhcIiwgLXcgLyAyKS5hdHRyKFwieVwiLCAtaCAvIDIpLmF0dHIoXCJ3aWR0aFwiLCB3KS5hdHRyKFwiaGVpZ2h0XCIsIGgpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5mdW5jdGlvbiBzdWJyb3V0aW5lKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICBjb25zdCB3ID0gYmJveC53aWR0aDtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAtaCB9LFxuICAgIHsgeDogMCwgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IDAgfSxcbiAgICB7IHg6IC04LCB5OiAwIH0sXG4gICAgeyB4OiB3ICsgOCwgeTogMCB9LFxuICAgIHsgeDogdyArIDgsIHk6IC1oIH0sXG4gICAgeyB4OiAtOCwgeTogLWggfSxcbiAgICB7IHg6IC04LCB5OiAwIH1cbiAgXTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIGN5bGluZGVyKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICBjb25zdCB3ID0gYmJveC53aWR0aDtcbiAgY29uc3QgcnggPSB3IC8gMjtcbiAgY29uc3QgcnkgPSByeCAvICgyLjUgKyB3IC8gNTApO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQgKyByeTtcbiAgY29uc3Qgc2hhcGUgPSBcIk0gMCxcIiArIHJ5ICsgXCIgYSBcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIDAsMCwwIFwiICsgdyArIFwiIDAgYSBcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIDAsMCwwIFwiICsgLXcgKyBcIiAwIGwgMCxcIiArIGggKyBcIiBhIFwiICsgcnggKyBcIixcIiArIHJ5ICsgXCIgMCwwLDAgXCIgKyB3ICsgXCIgMCBsIDAsXCIgKyAtaDtcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuYXR0cihcImxhYmVsLW9mZnNldC15XCIsIHJ5KS5pbnNlcnQoXCJwYXRoXCIsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJkXCIsIHNoYXBlKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgLXcgLyAyICsgXCIsXCIgKyAtKGggLyAyICsgcnkpICsgXCIpXCIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0UmVjdChub2RlLCBwb2ludCk7XG4gICAgY29uc3QgeCA9IHBvcy54IC0gbm9kZS54O1xuICAgIGlmIChyeCAhPSAwICYmIChNYXRoLmFicyh4KSA8IG5vZGUud2lkdGggLyAyIHx8IE1hdGguYWJzKHgpID09IG5vZGUud2lkdGggLyAyICYmIE1hdGguYWJzKHBvcy55IC0gbm9kZS55KSA+IG5vZGUuaGVpZ2h0IC8gMiAtIHJ5KSkge1xuICAgICAgbGV0IHkgPSByeSAqIHJ5ICogKDEgLSB4ICogeCAvIChyeCAqIHJ4KSk7XG4gICAgICBpZiAoeSAhPSAwKSB7XG4gICAgICAgIHkgPSBNYXRoLnNxcnQoeSk7XG4gICAgICB9XG4gICAgICB5ID0gcnkgLSB5O1xuICAgICAgaWYgKHBvaW50LnkgLSBub2RlLnkgPiAwKSB7XG4gICAgICAgIHkgPSAteTtcbiAgICAgIH1cbiAgICAgIHBvcy55ICs9IHk7XG4gICAgfVxuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbmZ1bmN0aW9uIGFkZFRvUmVuZGVyKHJlbmRlcjIpIHtcbiAgcmVuZGVyMi5zaGFwZXMoKS5xdWVzdGlvbiA9IHF1ZXN0aW9uO1xuICByZW5kZXIyLnNoYXBlcygpLmhleGFnb24gPSBoZXhhZ29uO1xuICByZW5kZXIyLnNoYXBlcygpLnN0YWRpdW0gPSBzdGFkaXVtO1xuICByZW5kZXIyLnNoYXBlcygpLnN1YnJvdXRpbmUgPSBzdWJyb3V0aW5lO1xuICByZW5kZXIyLnNoYXBlcygpLmN5bGluZGVyID0gY3lsaW5kZXI7XG4gIHJlbmRlcjIuc2hhcGVzKCkucmVjdF9sZWZ0X2ludl9hcnJvdyA9IHJlY3RfbGVmdF9pbnZfYXJyb3c7XG4gIHJlbmRlcjIuc2hhcGVzKCkubGVhbl9yaWdodCA9IGxlYW5fcmlnaHQ7XG4gIHJlbmRlcjIuc2hhcGVzKCkubGVhbl9sZWZ0ID0gbGVhbl9sZWZ0O1xuICByZW5kZXIyLnNoYXBlcygpLnRyYXBlem9pZCA9IHRyYXBlem9pZDtcbiAgcmVuZGVyMi5zaGFwZXMoKS5pbnZfdHJhcGV6b2lkID0gaW52X3RyYXBlem9pZDtcbiAgcmVuZGVyMi5zaGFwZXMoKS5yZWN0X3JpZ2h0X2ludl9hcnJvdyA9IHJlY3RfcmlnaHRfaW52X2Fycm93O1xufVxuZnVuY3Rpb24gYWRkVG9SZW5kZXJWMihhZGRTaGFwZSkge1xuICBhZGRTaGFwZSh7IHF1ZXN0aW9uIH0pO1xuICBhZGRTaGFwZSh7IGhleGFnb24gfSk7XG4gIGFkZFNoYXBlKHsgc3RhZGl1bSB9KTtcbiAgYWRkU2hhcGUoeyBzdWJyb3V0aW5lIH0pO1xuICBhZGRTaGFwZSh7IGN5bGluZGVyIH0pO1xuICBhZGRTaGFwZSh7IHJlY3RfbGVmdF9pbnZfYXJyb3cgfSk7XG4gIGFkZFNoYXBlKHsgbGVhbl9yaWdodCB9KTtcbiAgYWRkU2hhcGUoeyBsZWFuX2xlZnQgfSk7XG4gIGFkZFNoYXBlKHsgdHJhcGV6b2lkIH0pO1xuICBhZGRTaGFwZSh7IGludl90cmFwZXpvaWQgfSk7XG4gIGFkZFNoYXBlKHsgcmVjdF9yaWdodF9pbnZfYXJyb3cgfSk7XG59XG5mdW5jdGlvbiBpbnNlcnRQb2x5Z29uU2hhcGUocGFyZW50LCB3LCBoLCBwb2ludHMpIHtcbiAgcmV0dXJuIHBhcmVudC5pbnNlcnQoXCJwb2x5Z29uXCIsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXG4gICAgXCJwb2ludHNcIixcbiAgICBwb2ludHMubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLnggKyBcIixcIiArIGQueTtcbiAgICB9KS5qb2luKFwiIFwiKVxuICApLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtdyAvIDIgKyBcIixcIiArIGggLyAyICsgXCIpXCIpO1xufVxuY29uc3QgZmxvd0NoYXJ0U2hhcGVzID0ge1xuICBhZGRUb1JlbmRlcixcbiAgYWRkVG9SZW5kZXJWMlxufTtcbmNvbnN0IGNvbmYgPSB7fTtcbmNvbnN0IHNldENvbmYgPSBmdW5jdGlvbihjbmYpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNuZik7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25mW2tleV0gPSBjbmZba2V5XTtcbiAgfVxufTtcbmNvbnN0IGFkZFZlcnRpY2VzID0gZnVuY3Rpb24odmVydCwgZywgc3ZnSWQsIHJvb3QsIF9kb2MsIGRpYWdPYmopIHtcbiAgY29uc3Qgc3ZnID0gIXJvb3QgPyBzZWxlY3QoYFtpZD1cIiR7c3ZnSWR9XCJdYCkgOiByb290LnNlbGVjdChgW2lkPVwiJHtzdmdJZH1cIl1gKTtcbiAgY29uc3QgZG9jID0gIV9kb2MgPyBkb2N1bWVudCA6IF9kb2M7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2ZXJ0KTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgY29uc3QgdmVydGV4ID0gdmVydFtpZF07XG4gICAgbGV0IGNsYXNzU3RyID0gXCJkZWZhdWx0XCI7XG4gICAgaWYgKHZlcnRleC5jbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYXNzU3RyID0gdmVydGV4LmNsYXNzZXMuam9pbihcIiBcIik7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlc0Zyb21BcnJheSh2ZXJ0ZXguc3R5bGVzKTtcbiAgICBsZXQgdmVydGV4VGV4dCA9IHZlcnRleC50ZXh0ICE9PSB2b2lkIDAgPyB2ZXJ0ZXgudGV4dCA6IHZlcnRleC5pZDtcbiAgICBsZXQgdmVydGV4Tm9kZTtcbiAgICBpZiAoZXZhbHVhdGUoZ2V0Q29uZmlnKCkuZmxvd2NoYXJ0Lmh0bWxMYWJlbHMpKSB7XG4gICAgICBjb25zdCBub2RlID0ge1xuICAgICAgICBsYWJlbDogdmVydGV4VGV4dC5yZXBsYWNlKFxuICAgICAgICAgIC9mYVtibHJzXT86ZmEtW1xcdy1dKy9nLFxuICAgICAgICAgIChzKSA9PiBgPGkgY2xhc3M9JyR7cy5yZXBsYWNlKFwiOlwiLCBcIiBcIil9Jz48L2k+YFxuICAgICAgICApXG4gICAgICB9O1xuICAgICAgdmVydGV4Tm9kZSA9IGFkZEh0bWxMYWJlbChzdmcsIG5vZGUpLm5vZGUoKTtcbiAgICAgIHZlcnRleE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2ZXJ0ZXhOb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ZnTGFiZWwgPSBkb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0ZXh0XCIpO1xuICAgICAgc3ZnTGFiZWwuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgc3R5bGVzLmxhYmVsU3R5bGUucmVwbGFjZShcImNvbG9yOlwiLCBcImZpbGw6XCIpKTtcbiAgICAgIGNvbnN0IHJvd3MgPSB2ZXJ0ZXhUZXh0LnNwbGl0KGNvbW1vbi5saW5lQnJlYWtSZWdleCk7XG4gICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XG4gICAgICAgIGNvbnN0IHRzcGFuID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidHNwYW5cIik7XG4gICAgICAgIHRzcGFuLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsIFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG4gICAgICAgIHRzcGFuLnNldEF0dHJpYnV0ZShcImR5XCIsIFwiMWVtXCIpO1xuICAgICAgICB0c3Bhbi5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMVwiKTtcbiAgICAgICAgdHNwYW4udGV4dENvbnRlbnQgPSByb3c7XG4gICAgICAgIHN2Z0xhYmVsLmFwcGVuZENoaWxkKHRzcGFuKTtcbiAgICAgIH1cbiAgICAgIHZlcnRleE5vZGUgPSBzdmdMYWJlbDtcbiAgICB9XG4gICAgbGV0IHJhZGlvdXMgPSAwO1xuICAgIGxldCBfc2hhcGUgPSBcIlwiO1xuICAgIHN3aXRjaCAodmVydGV4LnR5cGUpIHtcbiAgICAgIGNhc2UgXCJyb3VuZFwiOlxuICAgICAgICByYWRpb3VzID0gNTtcbiAgICAgICAgX3NoYXBlID0gXCJyZWN0XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNxdWFyZVwiOlxuICAgICAgICBfc2hhcGUgPSBcInJlY3RcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGlhbW9uZFwiOlxuICAgICAgICBfc2hhcGUgPSBcInF1ZXN0aW9uXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImhleGFnb25cIjpcbiAgICAgICAgX3NoYXBlID0gXCJoZXhhZ29uXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9kZFwiOlxuICAgICAgICBfc2hhcGUgPSBcInJlY3RfbGVmdF9pbnZfYXJyb3dcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGVhbl9yaWdodFwiOlxuICAgICAgICBfc2hhcGUgPSBcImxlYW5fcmlnaHRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGVhbl9sZWZ0XCI6XG4gICAgICAgIF9zaGFwZSA9IFwibGVhbl9sZWZ0XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRyYXBlem9pZFwiOlxuICAgICAgICBfc2hhcGUgPSBcInRyYXBlem9pZFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpbnZfdHJhcGV6b2lkXCI6XG4gICAgICAgIF9zaGFwZSA9IFwiaW52X3RyYXBlem9pZFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJvZGRfcmlnaHRcIjpcbiAgICAgICAgX3NoYXBlID0gXCJyZWN0X2xlZnRfaW52X2Fycm93XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNpcmNsZVwiOlxuICAgICAgICBfc2hhcGUgPSBcImNpcmNsZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlbGxpcHNlXCI6XG4gICAgICAgIF9zaGFwZSA9IFwiZWxsaXBzZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdGFkaXVtXCI6XG4gICAgICAgIF9zaGFwZSA9IFwic3RhZGl1bVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdWJyb3V0aW5lXCI6XG4gICAgICAgIF9zaGFwZSA9IFwic3Vicm91dGluZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjeWxpbmRlclwiOlxuICAgICAgICBfc2hhcGUgPSBcImN5bGluZGVyXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImdyb3VwXCI6XG4gICAgICAgIF9zaGFwZSA9IFwicmVjdFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIF9zaGFwZSA9IFwicmVjdFwiO1xuICAgIH1cbiAgICBsb2cud2FybihcIkFkZGluZyBub2RlXCIsIHZlcnRleC5pZCwgdmVydGV4LmRvbUlkKTtcbiAgICBnLnNldE5vZGUoZGlhZ09iai5kYi5sb29rVXBEb21JZCh2ZXJ0ZXguaWQpLCB7XG4gICAgICBsYWJlbFR5cGU6IFwic3ZnXCIsXG4gICAgICBsYWJlbFN0eWxlOiBzdHlsZXMubGFiZWxTdHlsZSxcbiAgICAgIHNoYXBlOiBfc2hhcGUsXG4gICAgICBsYWJlbDogdmVydGV4Tm9kZSxcbiAgICAgIHJ4OiByYWRpb3VzLFxuICAgICAgcnk6IHJhZGlvdXMsXG4gICAgICBjbGFzczogY2xhc3NTdHIsXG4gICAgICBzdHlsZTogc3R5bGVzLnN0eWxlLFxuICAgICAgaWQ6IGRpYWdPYmouZGIubG9va1VwRG9tSWQodmVydGV4LmlkKVxuICAgIH0pO1xuICB9KTtcbn07XG5jb25zdCBhZGRFZGdlcyA9IGZ1bmN0aW9uKGVkZ2VzLCBnLCBkaWFnT2JqKSB7XG4gIGxldCBjbnQgPSAwO1xuICBsZXQgZGVmYXVsdFN0eWxlO1xuICBsZXQgZGVmYXVsdExhYmVsU3R5bGU7XG4gIGlmIChlZGdlcy5kZWZhdWx0U3R5bGUgIT09IHZvaWQgMCkge1xuICAgIGNvbnN0IGRlZmF1bHRTdHlsZXMgPSBnZXRTdHlsZXNGcm9tQXJyYXkoZWRnZXMuZGVmYXVsdFN0eWxlKTtcbiAgICBkZWZhdWx0U3R5bGUgPSBkZWZhdWx0U3R5bGVzLnN0eWxlO1xuICAgIGRlZmF1bHRMYWJlbFN0eWxlID0gZGVmYXVsdFN0eWxlcy5sYWJlbFN0eWxlO1xuICB9XG4gIGVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSkge1xuICAgIGNudCsrO1xuICAgIGNvbnN0IGxpbmtJZCA9IFwiTC1cIiArIGVkZ2Uuc3RhcnQgKyBcIi1cIiArIGVkZ2UuZW5kO1xuICAgIGNvbnN0IGxpbmtOYW1lU3RhcnQgPSBcIkxTLVwiICsgZWRnZS5zdGFydDtcbiAgICBjb25zdCBsaW5rTmFtZUVuZCA9IFwiTEUtXCIgKyBlZGdlLmVuZDtcbiAgICBjb25zdCBlZGdlRGF0YSA9IHt9O1xuICAgIGlmIChlZGdlLnR5cGUgPT09IFwiYXJyb3dfb3BlblwiKSB7XG4gICAgICBlZGdlRGF0YS5hcnJvd2hlYWQgPSBcIm5vbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZURhdGEuYXJyb3doZWFkID0gXCJub3JtYWxcIjtcbiAgICB9XG4gICAgbGV0IHN0eWxlID0gXCJcIjtcbiAgICBsZXQgbGFiZWxTdHlsZSA9IFwiXCI7XG4gICAgaWYgKGVkZ2Uuc3R5bGUgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVzRnJvbUFycmF5KGVkZ2Uuc3R5bGUpO1xuICAgICAgc3R5bGUgPSBzdHlsZXMuc3R5bGU7XG4gICAgICBsYWJlbFN0eWxlID0gc3R5bGVzLmxhYmVsU3R5bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoZWRnZS5zdHJva2UpIHtcbiAgICAgICAgY2FzZSBcIm5vcm1hbFwiOlxuICAgICAgICAgIHN0eWxlID0gXCJmaWxsOm5vbmVcIjtcbiAgICAgICAgICBpZiAoZGVmYXVsdFN0eWxlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHN0eWxlID0gZGVmYXVsdFN0eWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsU3R5bGUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbGFiZWxTdHlsZSA9IGRlZmF1bHRMYWJlbFN0eWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRvdHRlZFwiOlxuICAgICAgICAgIHN0eWxlID0gXCJmaWxsOm5vbmU7c3Ryb2tlLXdpZHRoOjJweDtzdHJva2UtZGFzaGFycmF5OjM7XCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0aGlja1wiOlxuICAgICAgICAgIHN0eWxlID0gXCIgc3Ryb2tlLXdpZHRoOiAzLjVweDtmaWxsOm5vbmVcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZWRnZURhdGEuc3R5bGUgPSBzdHlsZTtcbiAgICBlZGdlRGF0YS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZTtcbiAgICBpZiAoZWRnZS5pbnRlcnBvbGF0ZSAhPT0gdm9pZCAwKSB7XG4gICAgICBlZGdlRGF0YS5jdXJ2ZSA9IGludGVycG9sYXRlVG9DdXJ2ZShlZGdlLmludGVycG9sYXRlLCBjdXJ2ZUxpbmVhcik7XG4gICAgfSBlbHNlIGlmIChlZGdlcy5kZWZhdWx0SW50ZXJwb2xhdGUgIT09IHZvaWQgMCkge1xuICAgICAgZWRnZURhdGEuY3VydmUgPSBpbnRlcnBvbGF0ZVRvQ3VydmUoZWRnZXMuZGVmYXVsdEludGVycG9sYXRlLCBjdXJ2ZUxpbmVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkZ2VEYXRhLmN1cnZlID0gaW50ZXJwb2xhdGVUb0N1cnZlKGNvbmYuY3VydmUsIGN1cnZlTGluZWFyKTtcbiAgICB9XG4gICAgaWYgKGVkZ2UudGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZWRnZS5zdHlsZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGVkZ2VEYXRhLmFycm93aGVhZFN0eWxlID0gXCJmaWxsOiAjMzMzXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkZ2VEYXRhLmFycm93aGVhZFN0eWxlID0gXCJmaWxsOiAjMzMzXCI7XG4gICAgICBlZGdlRGF0YS5sYWJlbHBvcyA9IFwiY1wiO1xuICAgICAgaWYgKGV2YWx1YXRlKGdldENvbmZpZygpLmZsb3djaGFydC5odG1sTGFiZWxzKSkge1xuICAgICAgICBlZGdlRGF0YS5sYWJlbFR5cGUgPSBcImh0bWxcIjtcbiAgICAgICAgZWRnZURhdGEubGFiZWwgPSBgPHNwYW4gaWQ9XCJMLSR7bGlua0lkfVwiIGNsYXNzPVwiZWRnZUxhYmVsIEwtJHtsaW5rTmFtZVN0YXJ0fScgTC0ke2xpbmtOYW1lRW5kfVwiIHN0eWxlPVwiJHtlZGdlRGF0YS5sYWJlbFN0eWxlfVwiPiR7ZWRnZS50ZXh0LnJlcGxhY2UoXG4gICAgICAgICAgL2ZhW2JscnNdPzpmYS1bXFx3LV0rL2csXG4gICAgICAgICAgKHMpID0+IGA8aSBjbGFzcz0nJHtzLnJlcGxhY2UoXCI6XCIsIFwiIFwiKX0nPjwvaT5gXG4gICAgICAgICl9PC9zcGFuPmA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlZGdlRGF0YS5sYWJlbFR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgZWRnZURhdGEubGFiZWwgPSBlZGdlLnRleHQucmVwbGFjZShjb21tb24ubGluZUJyZWFrUmVnZXgsIFwiXFxuXCIpO1xuICAgICAgICBpZiAoZWRnZS5zdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZWRnZURhdGEuc3R5bGUgPSBlZGdlRGF0YS5zdHlsZSB8fCBcInN0cm9rZTogIzMzMzsgc3Ryb2tlLXdpZHRoOiAxLjVweDtmaWxsOm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgICBlZGdlRGF0YS5sYWJlbFN0eWxlID0gZWRnZURhdGEubGFiZWxTdHlsZS5yZXBsYWNlKFwiY29sb3I6XCIsIFwiZmlsbDpcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGVkZ2VEYXRhLmlkID0gbGlua0lkO1xuICAgIGVkZ2VEYXRhLmNsYXNzID0gbGlua05hbWVTdGFydCArIFwiIFwiICsgbGlua05hbWVFbmQ7XG4gICAgZWRnZURhdGEubWlubGVuID0gZWRnZS5sZW5ndGggfHwgMTtcbiAgICBnLnNldEVkZ2UoZGlhZ09iai5kYi5sb29rVXBEb21JZChlZGdlLnN0YXJ0KSwgZGlhZ09iai5kYi5sb29rVXBEb21JZChlZGdlLmVuZCksIGVkZ2VEYXRhLCBjbnQpO1xuICB9KTtcbn07XG5jb25zdCBnZXRDbGFzc2VzID0gZnVuY3Rpb24odGV4dCwgZGlhZ09iaikge1xuICBsb2cuaW5mbyhcIkV4dHJhY3RpbmcgY2xhc3Nlc1wiKTtcbiAgcmV0dXJuIGRpYWdPYmouZGIuZ2V0Q2xhc3NlcygpO1xufTtcbmNvbnN0IGRyYXcgPSBmdW5jdGlvbih0ZXh0LCBpZCwgX3ZlcnNpb24sIGRpYWdPYmopIHtcbiAgbG9nLmluZm8oXCJEcmF3aW5nIGZsb3djaGFydFwiKTtcbiAgY29uc3QgeyBzZWN1cml0eUxldmVsLCBmbG93Y2hhcnQ6IGNvbmYyIH0gPSBnZXRDb25maWcoKTtcbiAgbGV0IHNhbmRib3hFbGVtZW50O1xuICBpZiAoc2VjdXJpdHlMZXZlbCA9PT0gXCJzYW5kYm94XCIpIHtcbiAgICBzYW5kYm94RWxlbWVudCA9IHNlbGVjdChcIiNpXCIgKyBpZCk7XG4gIH1cbiAgY29uc3Qgcm9vdCA9IHNlY3VyaXR5TGV2ZWwgPT09IFwic2FuZGJveFwiID8gc2VsZWN0KHNhbmRib3hFbGVtZW50Lm5vZGVzKClbMF0uY29udGVudERvY3VtZW50LmJvZHkpIDogc2VsZWN0KFwiYm9keVwiKTtcbiAgY29uc3QgZG9jID0gc2VjdXJpdHlMZXZlbCA9PT0gXCJzYW5kYm94XCIgPyBzYW5kYm94RWxlbWVudC5ub2RlcygpWzBdLmNvbnRlbnREb2N1bWVudCA6IGRvY3VtZW50O1xuICBsZXQgZGlyID0gZGlhZ09iai5kYi5nZXREaXJlY3Rpb24oKTtcbiAgaWYgKGRpciA9PT0gdm9pZCAwKSB7XG4gICAgZGlyID0gXCJURFwiO1xuICB9XG4gIGNvbnN0IG5vZGVTcGFjaW5nID0gY29uZjIubm9kZVNwYWNpbmcgfHwgNTA7XG4gIGNvbnN0IHJhbmtTcGFjaW5nID0gY29uZjIucmFua1NwYWNpbmcgfHwgNTA7XG4gIGNvbnN0IGcgPSBuZXcgZ3JhcGhsaWIuR3JhcGgoe1xuICAgIG11bHRpZ3JhcGg6IHRydWUsXG4gICAgY29tcG91bmQ6IHRydWVcbiAgfSkuc2V0R3JhcGgoe1xuICAgIHJhbmtkaXI6IGRpcixcbiAgICBub2Rlc2VwOiBub2RlU3BhY2luZyxcbiAgICByYW5rc2VwOiByYW5rU3BhY2luZyxcbiAgICBtYXJnaW54OiA4LFxuICAgIG1hcmdpbnk6IDhcbiAgfSkuc2V0RGVmYXVsdEVkZ2VMYWJlbChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge307XG4gIH0pO1xuICBsZXQgc3ViRztcbiAgY29uc3Qgc3ViR3JhcGhzID0gZGlhZ09iai5kYi5nZXRTdWJHcmFwaHMoKTtcbiAgZm9yIChsZXQgaTIgPSBzdWJHcmFwaHMubGVuZ3RoIC0gMTsgaTIgPj0gMDsgaTItLSkge1xuICAgIHN1YkcgPSBzdWJHcmFwaHNbaTJdO1xuICAgIGRpYWdPYmouZGIuYWRkVmVydGV4KHN1YkcuaWQsIHN1YkcudGl0bGUsIFwiZ3JvdXBcIiwgdm9pZCAwLCBzdWJHLmNsYXNzZXMpO1xuICB9XG4gIGNvbnN0IHZlcnQgPSBkaWFnT2JqLmRiLmdldFZlcnRpY2VzKCk7XG4gIGxvZy53YXJuKFwiR2V0IHZlcnRpY2VzXCIsIHZlcnQpO1xuICBjb25zdCBlZGdlcyA9IGRpYWdPYmouZGIuZ2V0RWRnZXMoKTtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKGkgPSBzdWJHcmFwaHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBzdWJHID0gc3ViR3JhcGhzW2ldO1xuICAgIHNlbGVjdEFsbChcImNsdXN0ZXJcIikuYXBwZW5kKFwidGV4dFwiKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1Ykcubm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBcIlNldHRpbmcgc3ViZ3JhcGhcIixcbiAgICAgICAgc3ViRy5ub2Rlc1tqXSxcbiAgICAgICAgZGlhZ09iai5kYi5sb29rVXBEb21JZChzdWJHLm5vZGVzW2pdKSxcbiAgICAgICAgZGlhZ09iai5kYi5sb29rVXBEb21JZChzdWJHLmlkKVxuICAgICAgKTtcbiAgICAgIGcuc2V0UGFyZW50KGRpYWdPYmouZGIubG9va1VwRG9tSWQoc3ViRy5ub2Rlc1tqXSksIGRpYWdPYmouZGIubG9va1VwRG9tSWQoc3ViRy5pZCkpO1xuICAgIH1cbiAgfVxuICBhZGRWZXJ0aWNlcyh2ZXJ0LCBnLCBpZCwgcm9vdCwgZG9jLCBkaWFnT2JqKTtcbiAgYWRkRWRnZXMoZWRnZXMsIGcsIGRpYWdPYmopO1xuICBjb25zdCByZW5kZXIkMSA9IG5ldyByZW5kZXIoKTtcbiAgZmxvd0NoYXJ0U2hhcGVzLmFkZFRvUmVuZGVyKHJlbmRlciQxKTtcbiAgcmVuZGVyJDEuYXJyb3dzKCkubm9uZSA9IGZ1bmN0aW9uIG5vcm1hbChwYXJlbnQsIGlkMiwgZWRnZSwgdHlwZSkge1xuICAgIGNvbnN0IG1hcmtlciA9IHBhcmVudC5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkMikuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTAgMTBcIikuYXR0cihcInJlZlhcIiwgOSkuYXR0cihcInJlZllcIiwgNSkuYXR0cihcIm1hcmtlclVuaXRzXCIsIFwic3Ryb2tlV2lkdGhcIikuYXR0cihcIm1hcmtlcldpZHRoXCIsIDgpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIik7XG4gICAgY29uc3QgcGF0aCA9IG1hcmtlci5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAwIDAgTCAwIDAgTCAwIDAgelwiKTtcbiAgICBhcHBseVN0eWxlKHBhdGgsIGVkZ2VbdHlwZSArIFwiU3R5bGVcIl0pO1xuICB9O1xuICByZW5kZXIkMS5hcnJvd3MoKS5ub3JtYWwgPSBmdW5jdGlvbiBub3JtYWwocGFyZW50LCBpZDIpIHtcbiAgICBjb25zdCBtYXJrZXIgPSBwYXJlbnQuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZDIpLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIDEwIDEwXCIpLmF0dHIoXCJyZWZYXCIsIDkpLmF0dHIoXCJyZWZZXCIsIDUpLmF0dHIoXCJtYXJrZXJVbml0c1wiLCBcInN0cm9rZVdpZHRoXCIpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA4KS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDYpLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpO1xuICAgIG1hcmtlci5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAwIDAgTCAxMCA1IEwgMCAxMCB6XCIpLmF0dHIoXCJjbGFzc1wiLCBcImFycm93aGVhZFBhdGhcIikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgMSkuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIFwiMSwwXCIpO1xuICB9O1xuICBjb25zdCBzdmcgPSByb290LnNlbGVjdChgW2lkPVwiJHtpZH1cIl1gKTtcbiAgY29uc3QgZWxlbWVudCA9IHJvb3Quc2VsZWN0KFwiI1wiICsgaWQgKyBcIiBnXCIpO1xuICByZW5kZXIkMShlbGVtZW50LCBnKTtcbiAgZWxlbWVudC5zZWxlY3RBbGwoXCJnLm5vZGVcIikuYXR0cihcInRpdGxlXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaWFnT2JqLmRiLmdldFRvb2x0aXAodGhpcy5pZCk7XG4gIH0pO1xuICBkaWFnT2JqLmRiLmluZGV4Tm9kZXMoXCJzdWJHcmFwaFwiICsgaSk7XG4gIGZvciAoaSA9IDA7IGkgPCBzdWJHcmFwaHMubGVuZ3RoOyBpKyspIHtcbiAgICBzdWJHID0gc3ViR3JhcGhzW2ldO1xuICAgIGlmIChzdWJHLnRpdGxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zdCBjbHVzdGVyUmVjdHMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgXCIjXCIgKyBpZCArICcgW2lkPVwiJyArIGRpYWdPYmouZGIubG9va1VwRG9tSWQoc3ViRy5pZCkgKyAnXCJdIHJlY3QnXG4gICAgICApO1xuICAgICAgY29uc3QgY2x1c3RlckVsID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgIFwiI1wiICsgaWQgKyAnIFtpZD1cIicgKyBkaWFnT2JqLmRiLmxvb2tVcERvbUlkKHN1YkcuaWQpICsgJ1wiXSdcbiAgICAgICk7XG4gICAgICBjb25zdCB4UG9zID0gY2x1c3RlclJlY3RzWzBdLnguYmFzZVZhbC52YWx1ZTtcbiAgICAgIGNvbnN0IHlQb3MgPSBjbHVzdGVyUmVjdHNbMF0ueS5iYXNlVmFsLnZhbHVlO1xuICAgICAgY29uc3QgX3dpZHRoID0gY2x1c3RlclJlY3RzWzBdLndpZHRoLmJhc2VWYWwudmFsdWU7XG4gICAgICBjb25zdCBjbHVzdGVyID0gc2VsZWN0KGNsdXN0ZXJFbFswXSk7XG4gICAgICBjb25zdCB0ZSA9IGNsdXN0ZXIuc2VsZWN0KFwiLmxhYmVsXCIpO1xuICAgICAgdGUuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7eFBvcyArIF93aWR0aCAvIDJ9LCAke3lQb3MgKyAxNH0pYCk7XG4gICAgICB0ZS5hdHRyKFwiaWRcIiwgaWQgKyBcIlRleHRcIik7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1YkcuY2xhc3Nlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjbHVzdGVyRWxbMF0uY2xhc3NMaXN0LmFkZChzdWJHLmNsYXNzZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWNvbmYyLmh0bWxMYWJlbHMpIHtcbiAgICBjb25zdCBsYWJlbHMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgnW2lkPVwiJyArIGlkICsgJ1wiXSAuZWRnZUxhYmVsIC5sYWJlbCcpO1xuICAgIGZvciAoY29uc3QgbGFiZWwgb2YgbGFiZWxzKSB7XG4gICAgICBjb25zdCBkaW0gPSBsYWJlbC5nZXRCQm94KCk7XG4gICAgICBjb25zdCByZWN0ID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicmVjdFwiKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKFwicnhcIiwgMCk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZShcInJ5XCIsIDApO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBkaW0ud2lkdGgpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgZGltLmhlaWdodCk7XG4gICAgICBsYWJlbC5pbnNlcnRCZWZvcmUocmVjdCwgbGFiZWwuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG4gIHNldHVwR3JhcGhWaWV3Ym94KGcsIHN2ZywgY29uZjIuZGlhZ3JhbVBhZGRpbmcsIGNvbmYyLnVzZU1heFdpZHRoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZlcnQpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgY29uc3QgdmVydGV4ID0gdmVydFtrZXldO1xuICAgIGlmICh2ZXJ0ZXgubGluaykge1xuICAgICAgY29uc3Qgbm9kZSA9IHJvb3Quc2VsZWN0KFwiI1wiICsgaWQgKyAnIFtpZD1cIicgKyBkaWFnT2JqLmRiLmxvb2tVcERvbUlkKGtleSkgKyAnXCJdJyk7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiYVwiKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiY2xhc3NcIiwgdmVydGV4LmNsYXNzZXMuam9pbihcIiBcIikpO1xuICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJocmVmXCIsIHZlcnRleC5saW5rKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicmVsXCIsIFwibm9vcGVuZXJcIik7XG4gICAgICAgIGlmIChzZWN1cml0eUxldmVsID09PSBcInNhbmRib3hcIikge1xuICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInRhcmdldFwiLCBcIl90b3BcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodmVydGV4LmxpbmtUYXJnZXQpIHtcbiAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0YXJnZXRcIiwgdmVydGV4LmxpbmtUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmtOb2RlID0gbm9kZS5pbnNlcnQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgICAgIH0sIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgICAgICBjb25zdCBzaGFwZSA9IG5vZGUuc2VsZWN0KFwiLmxhYmVsLWNvbnRhaW5lclwiKTtcbiAgICAgICAgaWYgKHNoYXBlKSB7XG4gICAgICAgICAgbGlua05vZGUuYXBwZW5kKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNoYXBlLm5vZGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbCA9IG5vZGUuc2VsZWN0KFwiLmxhYmVsXCIpO1xuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICBsaW5rTm9kZS5hcHBlbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWwubm9kZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBmbG93UmVuZGVyZXIgPSB7XG4gIHNldENvbmYsXG4gIGFkZFZlcnRpY2VzLFxuICBhZGRFZGdlcyxcbiAgZ2V0Q2xhc3NlcyxcbiAgZHJhd1xufTtcbmNvbnN0IGRpYWdyYW0gPSB7XG4gIHBhcnNlcixcbiAgZGI6IGZsb3dEYixcbiAgcmVuZGVyZXI6IGZsb3dSZW5kZXJlclYyLFxuICBzdHlsZXM6IGZsb3dTdHlsZXMsXG4gIGluaXQ6IChjbmYpID0+IHtcbiAgICBpZiAoIWNuZi5mbG93Y2hhcnQpIHtcbiAgICAgIGNuZi5mbG93Y2hhcnQgPSB7fTtcbiAgICB9XG4gICAgY25mLmZsb3djaGFydC5hcnJvd01hcmtlckFic29sdXRlID0gY25mLmFycm93TWFya2VyQWJzb2x1dGU7XG4gICAgZmxvd1JlbmRlcmVyLnNldENvbmYoY25mLmZsb3djaGFydCk7XG4gICAgZmxvd0RiLmNsZWFyKCk7XG4gICAgZmxvd0RiLnNldEdlbihcImdlbi0xXCIpO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgZGlhZ3JhbVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==