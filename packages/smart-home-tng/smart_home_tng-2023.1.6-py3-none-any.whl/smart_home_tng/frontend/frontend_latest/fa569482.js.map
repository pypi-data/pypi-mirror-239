{"version":3,"file":"fa569482.js","mappings":";;AAsDA;;AAKA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;AA9EA;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/energy/cards/energy-setup-wizard-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport {\n  EnergyInfo,\n  EnergyPreferences,\n  getEnergyInfo,\n  saveEnergyPreferences,\n} from \"../../../data/energy\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCard, Lovelace } from \"../../lovelace/types\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../../config/energy/components/ha-energy-grid-settings\";\nimport \"../../config/energy/components/ha-energy-solar-settings\";\nimport \"../../config/energy/components/ha-energy-battery-settings\";\nimport \"../../config/energy/components/ha-energy-gas-settings\";\nimport \"../../config/energy/components/ha-energy-device-settings\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\n\n@customElement(\"energy-setup-wizard-card\")\nexport class EnergySetupWizard extends LitElement implements LovelaceCard {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @state() private _info?: EnergyInfo;\n\n  @state() private _step = 0;\n\n  @state() private _preferences: EnergyPreferences = {\n    energy_sources: [],\n    device_consumption: [],\n  };\n\n  public getCardSize() {\n    return 10;\n  }\n\n  public setConfig(config: LovelaceCardConfig) {\n    if (config.preferences) {\n      this._preferences = config.preferences;\n    }\n  }\n\n  protected firstUpdated() {\n    this.hass.loadFragmentTranslation(\"config\");\n    this._fetchconfig();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <p>\n        ${this.hass.localize(\"ui.panel.energy.setup.step\", {\n          step: this._step + 1,\n          steps: 5,\n        })}\n      </p>\n      ${this._step === 0\n        ? html`<ha-energy-grid-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-grid-settings>`\n        : this._step === 1\n        ? html`<ha-energy-solar-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences}\n            .info=${this._info}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-solar-settings>`\n        : this._step === 2\n        ? html`<ha-energy-battery-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-battery-settings>`\n        : this._step === 3\n        ? html`<ha-energy-gas-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-gas-settings>`\n        : html`<ha-energy-device-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-device-settings>`}\n      <div class=\"buttons\">\n        ${this._step > 0\n          ? html`<mwc-button outlined @click=${this._back}\n              >${this.hass.localize(\"ui.panel.energy.setup.back\")}</mwc-button\n            >`\n          : html`<div></div>`}\n        ${this._step < 4\n          ? html`<mwc-button unelevated @click=${this._next}\n              >${this.hass.localize(\"ui.panel.energy.setup.next\")}</mwc-button\n            >`\n          : html`<mwc-button unelevated @click=${this._setupDone}>\n              ${this.hass.localize(\"ui.panel.energy.setup.done\")}\n            </mwc-button>`}\n      </div>\n    `;\n  }\n\n  private async _fetchconfig() {\n    this._info = await getEnergyInfo(this.hass);\n  }\n\n  private _prefsChanged(ev: CustomEvent) {\n    this._preferences = ev.detail.value;\n  }\n\n  private _back() {\n    if (this._step === 0) {\n      return;\n    }\n    this._step--;\n  }\n\n  private _next() {\n    if (this._step === 4) {\n      return;\n    }\n    this._step++;\n  }\n\n  private async _setupDone() {\n    if (!this._preferences) {\n      return;\n    }\n    try {\n      this._preferences = await saveEnergyPreferences(\n        this.hass,\n        this._preferences\n      );\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n    fireEvent(this, \"reload-energy-panel\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          padding: 16px;\n          max-width: 700px;\n          margin: 0 auto;\n        }\n        mwc-button {\n          margin-top: 8px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: space-between;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"energy-setup-wizard-card\": EnergySetupWizard;\n  }\n}\n"],"names":[],"sourceRoot":""}