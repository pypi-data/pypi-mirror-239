{"version":3,"file":"c46fa0d1.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;ACmCA;AAGA;;;;AAKA;;;;AAIA;AACA;;;AAGA;;AAEA;AAEA;AAEA;AACA;;;;;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjHA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/logs/error-log-card.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-ansi-to-html\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-select\";\nimport { fetchErrorLog } from \"../../../data/error_log\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport { fetchHassioLogs } from \"../../../data/hassio/supervisor\";\nimport { HomeAssistant } from \"../../../types\";\nimport { debounce } from \"../../../common/util/debounce\";\n\n@customElement(\"error-log-card\")\nclass ErrorLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter = \"\";\n\n  @property() public provider!: string;\n\n  @property({ type: Boolean, attribute: true }) public show = false;\n\n  @state() private _isLogLoaded = false;\n\n  @state() private _logHTML?: TemplateResult[] | TemplateResult | string;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"error-log-intro\">\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n          : \"\"}\n        ${this._logHTML\n          ? html`\n              <ha-card outlined>\n                <div class=\"header\">\n                  <h2>\n                    ${this.hass.localize(\"ui.panel.config.logs.full_logs\")}\n                  </h2>\n                  <ha-icon-button\n                    .path=${mdiRefresh}\n                    @click=${this._refresh}\n                    .label=${this.hass.localize(\"ui.common.refresh\")}\n                  ></ha-icon-button>\n                </div>\n                <div class=\"card-content error-log\">${this._logHTML}</div>\n              </ha-card>\n            `\n          : \"\"}\n        ${!this._logHTML\n          ? html`\n              <mwc-button raised @click=${this._refreshLogs}>\n                ${this.hass.localize(\"ui.panel.config.logs.load_logs\")}\n              </mwc-button>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _debounceSearch = debounce(\n    () => (this._isLogLoaded ? this._refreshLogs() : this._debounceSearch()),\n    150,\n    false\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass?.config.safe_mode || this.show) {\n      this.hass.loadFragmentTranslation(\"config\");\n      this._refreshLogs();\n    }\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"provider\")) {\n      this._logHTML = undefined;\n    }\n\n    if (\n      (changedProps.has(\"show\") && this.show) ||\n      (changedProps.has(\"provider\") && this.show)\n    ) {\n      this._refreshLogs();\n      return;\n    }\n\n    if (changedProps.has(\"filter\")) {\n      this._debounceSearch();\n    }\n  }\n\n  private async _refresh(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    button.progress = true;\n\n    await this._refreshLogs();\n    button.progress = false;\n  }\n\n  private async _refreshLogs(): Promise<void> {\n    this._logHTML = this.hass.localize(\"ui.panel.config.logs.loading_log\");\n    let log: string;\n\n    if (this.provider !== \"core\" && isComponentLoaded(this.hass, \"hassio\")) {\n      try {\n        log = await fetchHassioLogs(this.hass, this.provider);\n        if (this.filter) {\n          log = log\n            .split(\"\\n\")\n            .filter((entry) =>\n              entry.toLowerCase().includes(this.filter.toLowerCase())\n            )\n            .join(\"\\n\");\n        }\n        if (!log) {\n          this._logHTML = this.hass.localize(\"ui.panel.config.logs.no_errors\");\n          return;\n        }\n        this._logHTML = html`<ha-ansi-to-html .content=${log}>\n        </ha-ansi-to-html>`;\n        this._isLogLoaded = true;\n        return;\n      } catch (err: any) {\n        this._error = this.hass.localize(\n          \"ui.panel.config.logs.failed_get_logs\",\n          \"provider\",\n          this.provider,\n          \"error\",\n          extractApiErrorMessage(err)\n        );\n        return;\n      }\n    } else {\n      log = await fetchErrorLog(this.hass!);\n    }\n\n    this._isLogLoaded = true;\n\n    const split = log && log.split(\"\\n\");\n\n    this._logHTML = split\n      ? (this.filter\n          ? split.filter((entry) => {\n              if (this.filter) {\n                return entry.toLowerCase().includes(this.filter.toLowerCase());\n              }\n              return entry;\n            })\n          : split\n        ).map((entry) => {\n          if (entry.includes(\"INFO\"))\n            return html`<div class=\"info\">${entry}</div>`;\n\n          if (entry.includes(\"WARNING\"))\n            return html`<div class=\"warning\">${entry}</div>`;\n\n          if (\n            entry.includes(\"ERROR\") ||\n            entry.includes(\"FATAL\") ||\n            entry.includes(\"CRITICAL\")\n          )\n            return html`<div class=\"error\">${entry}</div>`;\n\n          return html`<div>${entry}</div>`;\n        })\n      : this.hass.localize(\"ui.panel.config.logs.no_errors\");\n  }\n\n  static styles: CSSResultGroup = css`\n    .error-log-intro {\n      text-align: center;\n      margin: 16px;\n    }\n\n    .header {\n      display: flex;\n      justify-content: space-between;\n      padding: 16px;\n    }\n\n    ha-select {\n      display: block;\n      max-width: 500px;\n      width: 100%;\n    }\n\n    ha-icon-button {\n      float: right;\n    }\n\n    .error-log {\n      font-family: var(--code-font-family, monospace);\n      clear: both;\n      text-align: left;\n      padding-top: 12px;\n    }\n\n    .error-log > div {\n      overflow: auto;\n      overflow-wrap: break-word;\n    }\n\n    .error-log > div:hover {\n      background-color: var(--secondary-background-color);\n    }\n\n    .error {\n      color: var(--error-color);\n    }\n\n    .warning {\n      color: var(--warning-color);\n    }\n\n    mwc-button {\n      direction: var(--direction);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"error-log-card\": ErrorLogCard;\n  }\n}\n"],"names":[],"sourceRoot":""}