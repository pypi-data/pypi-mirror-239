"""
This file is generated by sqldao-generator; don't modify anything.
If you need to do it, you should create another class.
"""
from dataclasses import dataclass, field
from datetime import datetime

from sqlalchemy import BinaryExpression, Column

from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.common.CriterionDelegate import CriterionDelegate
from sqldaogenerator.entity.Page import Page
from sqldaogenerator.resources.DaoTemplate import sample_dao
from sqldaogenerator.resources.EntityTemplate import Sample


@dataclass
class SampleCriterion:
    _column_criterion = None
    _where_criterion = None
    _modify_criterion = None
    _distinct = False

    def distinct(self):
        self._distinct = True
        return self

    def column(self):
        if self._column_criterion is None:
            self._column_criterion = ColumnCriterion(self)
        return self._column_criterion

    def where(self):
        if self._where_criterion is None:
            self._where_criterion = WhereCriterion(self)
        return self._where_criterion

    def modify(self):
        if self._modify_criterion is None:
            self._modify_criterion = ModifyCriterion(self)
        return self._modify_criterion

    @classmethod
    def builder(cls):
        return cls()

    def build(self):
        labels, columns, groups, counts, maxes, mines, sums = self._column_criterion.build() \
            if self._column_criterion else (None, None, None, None, None, None, None)
        page, filters = self._where_criterion.build() if self._where_criterion else (None, None)
        values = self._modify_criterion.build() if self._modify_criterion else None
        return Criterion(labels, columns, groups, counts, maxes, mines, sums, page, filters, values, self._distinct)

    def select(self) -> tuple[list[Sample], int]:
        return sample_dao.select(self.build())

    def insert(self) -> Sample:
        return sample_dao.insert(self.build())

    def update(self) -> int:
        return sample_dao.update(self.build())

    def delete(self) -> int:
        return sample_dao.delete(self.build())


@dataclass
class ColumnCriterion(CriterionDelegate):
    _criterion: SampleCriterion
    _labels: list[str] = field(default_factory=list)
    _columns: list[Column] = field(default_factory=list)
    _groups: list[Column] = field(default_factory=list)
    _counts: list = field(default_factory=list)
    _maxes: list = field(default_factory=list)
    _mines: list = field(default_factory=list)
    _sums: list = field(default_factory=list)

    def where(self):
        return self._criterion.where()

    def build(self):
        return self._labels, self._columns, self._groups, self._counts, self._maxes, self._mines, self._sums

    def id(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.id, group, count, max, min, sum)

    def column_char(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_char, group, count, max, min, sum)

    def column_varchar(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_varchar, group, count, max, min, sum)

    def column_text(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_text, group, count, max, min, sum)

    def column_json(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_json, group, count, max, min, sum)

    def column_tinyint(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_tinyint, group, count, max, min, sum)

    def column_int(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_int, group, count, max, min, sum)

    def column_double(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_double, group, count, max, min, sum)

    def column_datetime(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_datetime, group, count, max, min, sum)

    def column_timestamp(self, group=False, count=False, max=False, min=False, sum=False):
        return self._build_column(Sample.column_timestamp, group, count, max, min, sum)


@dataclass
class WhereCriterion(CriterionDelegate):
    _criterion: SampleCriterion
    _page: Page = field(default_factory=Page)
    _filters: list[BinaryExpression] = field(default_factory=list)

    def modify(self):
        return self._criterion.modify()

    def select(self):
        return self._criterion.select()

    def update(self):
        return self._criterion.update()

    def delete(self):
        return self._criterion.delete()

    def build(self):
        return self._page, self._filters

    def order_by(self, value: str):
        self._page.order_by = value
        return self

    def page_no(self, value: int):
        self._page.page_no = value
        return self

    def page_size(self, value: int):
        self._page.page_size = value
        return self

    def id(self, value: int = None, reverse=False):
        return self._build_equal(Sample.id, value, reverse)

    def id_null(self, reverse=False):
        return self._build_null(Sample.id, reverse)

    def id_in(self, value: list[int] = None, reverse=False):
        return self._build_in(Sample.id, value, reverse)

    def id_gte(self, value: int = None):
        return self._build_gte(Sample.id, value)

    def id_lte(self, value: int = None):
        return self._build_lte(Sample.id, value)

    def column_char(self, value: str = None, reverse=False):
        return self._build_equal(Sample.column_char, value, reverse)

    def column_char_null(self, reverse=False):
        return self._build_null(Sample.column_char, reverse)

    def column_char_in(self, value: list[str] = None, reverse=False):
        return self._build_in(Sample.column_char, value, reverse)

    def column_char_like(self, value: str = None, reverse=False, left="%", right="%"):
        return self._build_like(Sample.column_char, value, reverse, left, right)

    def column_varchar(self, value: str = None, reverse=False):
        return self._build_equal(Sample.column_varchar, value, reverse)

    def column_varchar_null(self, reverse=False):
        return self._build_null(Sample.column_varchar, reverse)

    def column_varchar_in(self, value: list[str] = None, reverse=False):
        return self._build_in(Sample.column_varchar, value, reverse)

    def column_varchar_like(self, value: str = None, reverse=False, left="%", right="%"):
        return self._build_like(Sample.column_varchar, value, reverse, left, right)

    def column_text(self, value: str = None, reverse=False):
        return self._build_equal(Sample.column_text, value, reverse)

    def column_text_null(self, reverse=False):
        return self._build_null(Sample.column_text, reverse)

    def column_text_in(self, value: list[str] = None, reverse=False):
        return self._build_in(Sample.column_text, value, reverse)

    def column_text_like(self, value: str = None, reverse=False, left="%", right="%"):
        return self._build_like(Sample.column_text, value, reverse, left, right)

    def column_json(self, value: str = None, reverse=False):
        return self._build_equal(Sample.column_json, value, reverse)

    def column_json_null(self, reverse=False):
        return self._build_null(Sample.column_json, reverse)

    def column_json_in(self, value: list[str] = None, reverse=False):
        return self._build_in(Sample.column_json, value, reverse)

    def column_json_like(self, value: str = None, reverse=False, left="%", right="%"):
        return self._build_like(Sample.column_json, value, reverse, left, right)

    def column_tinyint(self, value: int = None, reverse=False):
        return self._build_equal(Sample.column_tinyint, value, reverse)

    def column_tinyint_null(self, reverse=False):
        return self._build_null(Sample.column_tinyint, reverse)

    def column_tinyint_in(self, value: list[int] = None, reverse=False):
        return self._build_in(Sample.column_tinyint, value, reverse)

    def column_tinyint_gte(self, value: int = None):
        return self._build_gte(Sample.column_tinyint, value)

    def column_tinyint_lte(self, value: int = None):
        return self._build_lte(Sample.column_tinyint, value)

    def column_int(self, value: int = None, reverse=False):
        return self._build_equal(Sample.column_int, value, reverse)

    def column_int_null(self, reverse=False):
        return self._build_null(Sample.column_int, reverse)

    def column_int_in(self, value: list[int] = None, reverse=False):
        return self._build_in(Sample.column_int, value, reverse)

    def column_int_gte(self, value: int = None):
        return self._build_gte(Sample.column_int, value)

    def column_int_lte(self, value: int = None):
        return self._build_lte(Sample.column_int, value)

    def column_double(self, value: float = None, reverse=False):
        return self._build_equal(Sample.column_double, value, reverse)

    def column_double_null(self, reverse=False):
        return self._build_null(Sample.column_double, reverse)

    def column_double_in(self, value: list[float] = None, reverse=False):
        return self._build_in(Sample.column_double, value, reverse)

    def column_double_gte(self, value: float = None):
        return self._build_gte(Sample.column_double, value)

    def column_double_lte(self, value: float = None):
        return self._build_lte(Sample.column_double, value)

    def column_datetime(self, value: datetime | str = None, reverse=False):
        return self._build_equal(Sample.column_datetime, value, reverse)

    def column_datetime_null(self, reverse=False):
        return self._build_null(Sample.column_datetime, reverse)

    def column_datetime_in(self, value: list[datetime | str] = None, reverse=False):
        return self._build_in(Sample.column_datetime, value, reverse)

    def column_datetime_start(self, value: datetime | str = None):
        return self._build_gte(Sample.column_datetime, value)

    def column_datetime_end(self, value: datetime | str = None):
        return self._build_lte(Sample.column_datetime, value)

    def column_timestamp(self, value: datetime | str = None, reverse=False):
        return self._build_equal(Sample.column_timestamp, value, reverse)

    def column_timestamp_null(self, reverse=False):
        return self._build_null(Sample.column_timestamp, reverse)

    def column_timestamp_in(self, value: list[datetime | str] = None, reverse=False):
        return self._build_in(Sample.column_timestamp, value, reverse)

    def column_timestamp_start(self, value: datetime | str = None):
        return self._build_gte(Sample.column_timestamp, value)

    def column_timestamp_end(self, value: datetime | str = None):
        return self._build_lte(Sample.column_timestamp, value)


@dataclass
class ModifyCriterion(CriterionDelegate):
    _criterion: SampleCriterion
    _values: dict[str, any] = field(default_factory=dict)

    def where(self):
        return self._criterion.where()

    def insert(self):
        return self._criterion.insert()

    def update(self):
        return self._criterion.update()

    def delete(self):
        return self._criterion.delete()

    def build(self):
        return self._values

    def id(self, value: int):
        return self._build_modify(Sample.id, value)

    def column_char(self, value: str):
        return self._build_modify(Sample.column_char, value)

    def column_varchar(self, value: str):
        return self._build_modify(Sample.column_varchar, value)

    def column_text(self, value: str):
        return self._build_modify(Sample.column_text, value)

    def column_json(self, value: str):
        return self._build_modify(Sample.column_json, value)

    def column_tinyint(self, value: int):
        return self._build_modify(Sample.column_tinyint, value)

    def column_int(self, value: int):
        return self._build_modify(Sample.column_int, value)

    def column_double(self, value: float):
        return self._build_modify(Sample.column_double, value)

    def column_datetime(self, value: datetime | str):
        return self._build_modify(Sample.column_datetime, value)

    def column_timestamp(self, value: datetime | str):
        return self._build_modify(Sample.column_timestamp, value)
