# -*- coding: utf-8 -*-

import click
from state2inventory.provider.terraform import Terraform
from state2inventory.output.inventory import Inventory


@click.group()
@click.version_option("1.1.0", prog_name="state2inventory")
def cli() -> None:
    """A CLI tool to generate an Ansible inventory from different infrastructure
    states.
    """
    pass


@cli.command()
def multipass() -> None:
    """Command to generate an Ansible inventory from a multipass state file.
    Work in progress
    """
    click.echo("multipass command not yet implemented!")


@cli.command()
@click.option(
    "-s",
    "--state",
    "state_file",
    type=click.File(mode="r"),
    required=True,
    help='List of instances generated by the command "terraform show -json".',
)
@click.option(
    "-o",
    "--output",
    "output_file",
    type=click.File(mode="w"),
    required=True,
    help="Output Ansible inventory file path.",
)
@click.option(
    "-k",
    "--key",
    "key",
    type=click.STRING,
    required=False,
    help="Data key to extract from JSON terraform file (type, ip, groups, vars)."
    ' Default: {"type": "openstack_compute_instance_v2", '
    ' "ip": "access_ip_v4", '
    ' "groups": "host_groups", '
    ' "vars": "host_vars"} ',
)
@click.option(
    "--disable-naming/--naming",
    " /-N",
    "disable_naming",
    default=True,
    help="Flag to format group variable name to Ansible convention.",
)
@click.option(
    "--host/--disable-host",
    " /-H",
    "host",
    default=True,
    help="Flag to remove ansible_host variable in inventory.",
)
def terraform(
    state_file: click.File,
    output_file: click.File,
    key: str,
    disable_naming: bool,
    host: bool,
) -> None:
    """Command to generate an Ansible inventory from a terraform state file.

    Args:
        state_file (click.File): the input file generated by the command:
        "terraform show -json"
        output_file (click.File): the output inventory file
        key (str): data key to extract from JSON terraform file (type, ip, groups, vars)
        disable_naming (bool): flag to format group variable name to Ansible convention
        host (bool): flag to remove ansible_host variable in inventory

    Raises:
        click.ClickException: Error when reading input file or writing output file
    """
    provider = Terraform(state_file.read(), key)  # type: ignore
    try:
        inventory: Inventory = provider.parse(host)

        output = inventory.generate(not disable_naming)
        if len(output) > 1:
            output_file.write(output)  # type: ignore
            click.echo(f"Inventory file generated: {output_file.name}")
        else:
            click.echo("Warning no resource found!")

    except ValueError as ve:
        raise click.ClickException(str(ve))


if __name__ == "__main__":
    cli()  # pragma: no cover
