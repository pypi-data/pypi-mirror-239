[tool.ruff]
select = [
  "F402", # import-shadowed-by-loop-var                       |   Import {name} from line {line} shadowed by loop variable
  "F404", # late-future-import                                |   from __future__ imports must occur at the beginning of the file

  "F501", # percent-format-invalid-format                     |   %-format string has invalid format string
  "F502", # percent-format-expected-mapping                   |   %-format string expected mapping but got sequence
  "F503", # percent-format-expected-sequence                  |   %-format string expected sequence but got mapping
  "F504", # percent-format-extra-named-arguments              |   %-format string has unused named argument(s)
  "F505", # percent-format-missing-argument                   |   %-format string is missing argument(s) for placeholder(s)
  "F506", # percent-format-mixed-positional-and-named         |   %-format string has mixed positional and named placeholders
  "F507", # percent-format-positional-count-mismatch          |   %-format string has {wanted} placeholder(s) but {got} substitution(s)
  "F508", # percent-format-star-requires-sequence             |   %-format string * specifier requires sequence
  "F509", # percent-format-unsupported-format-character       |   %-format string has unsupported format character {char}

  "F521", # string-dot-format-invalid-format                  |   .format call has invalid format string
  "F522", # string-dot-format-extra-named-arguments           |   .format call has unused named argument(s)
  "F523", # string-dot-format-extra-positional-arguments      |   .format call has unused arguments at position(s)
  "F524", # string-dot-format-missing-arguments               |   .format call is missing argument(s) for placeholder(s)
  "F525", # string-dot-format-mixing-automatic                |   .format string mixes automatic and manual numbering

  "F601", # multi-value-repeated-key-literal                  |   Dictionary key literal {name} repeated
  "F602", # multi-value-repeated-key-variable                 |   Dictionary key {name} repeated

  "F621", # expressions-in-star-assignment                    |   Too many expressions in star-unpacking assignment >:3
  "F622", # multiple-starred-expressions                      |   Two starred expressions in assignment

  "F631", # assert-tuple                                      |   Assert test is a non-empty tuple, which is always True
  "F632", # is-literal                                        |   Use == to compare constant literals
  "F634", # if-tuple                                          |   If test is a tuple, which is always True

  "F701", # break-outside-loop                                |   break outside loop
  "F702", # continue-outside-loop                             |   continue not properly in loop
  "F704", # yield-outside-function                            |   yield statement outside of a function
  "F706", # return-outside-function                           |   return statement outside of a function
  "F707", # default-except-not-last                           |   An except block as not the last exception handler

  "F722", # forward-annotation-syntax-error                   |   Syntax error in forward annotation: def foo() -> "/":

  "F811", # redefined-while-unused                            |   Redefinition of unused {name} from line

  "F821", # undefined-name                                    |   Undefined name {name}
  "F822", # undefined-export                                  |   Undefined name {name} in __all__
  "F823", # undefined-local                                   |   Local variable {name} referenced before assignment

  "F841", # unused-variable                                   |   Local variable {name} is assigned to but never used

  "F901", # raise-not-implemented                             |   raise NotImplemented should be raise NotImplementedError





  "W191", # tab-indentation                                   |   Indentation contains tabs

# "W291", # trailing-whitespace                               |   Trailing whitespace
  "W292", # missing-newline-at-end-of-file                    |   No newline at end of file
  "W293", # blank-line-with-whitespace                        |   Blank line contains whitespace

  "W605", # invalid-escape-sequence                           |   Invalid escape sequence: \u\w\u





# "E101", # mixed-spaces-and-tabs                             |   Indentation contains mixed spaces and tabs

  "E221", # multiple-spaces-before-operator                   |   Multiple spaces before operator
  "E222", # multiple-spaces-after-operator                    |   Multiple spaces after operator
  "E223", # tab-before-operator                               |   Tab before operator
  "E224", # tab-after-operator                                |   Tab after operator

  "E231", # missing-whitespace                                |   Missing whitespace after '{token}' (2,1) -> (2, 1)
  "E242", # tab-after-comma                                   |   Tab after comma

  "E275", # missing-whitespace-after-keyword                  |   Missing whitespace after keyword

  "E401", # multiple-imports-on-one-line                      |   Multiple imports on one line
  "E402", # module-import-not-at-top-of-file                  |   Module level import not at top of file

  "E703", # useless-semicolon                                 |   Statement ends with an unnecessary semicolon

  "E711", # none-comparison                                   |   Comparison to None should be cond is None
  "E712", # true-false-comparison                             |   Comparison to True should be cond is True or if cond:
  "E713", # not-in-test                                       |   Test for membership should be not in
  "E714", # not-is-test                                       |   Test for object identity should be is not

  "E721", # type-comparison                                   |   Do not compare types, use isinstance()
  "E722", # bare-except                                       |   Do not use bare except

  "E731", # lambda-assignment                                 |   Do not assign a lambda expression, use a def





  "I001", # unsorted-imports                                  |   Import block is un-sorted or un-formatted
  "I002", # missing-required-import                           |   Missing required import: {name}





  "N804", # invalid-first-argument-name-for-class-method      |   First argument of a class method should be named cls
  "N805", # invalid-first-argument-name-for-method            |   First argument of a method should be named self

  "N818", # error-suffix-on-exception-name                    |   Exception name {name} should be named with an Error suffix





  "D200", # fits-on-one-line                                  |   One-line docstring should fit on one line

  "D201", # no-blank-line-before-function                     |   No blank lines allowed before function docstring (found {num_lines})
# "D202", # no-blank-line-after-function                      |   No blank lines allowed after function docstring (found {num_lines})
  "D205", # blank-line-after-summary                          |   1 blank line required between summary line and description

  "D206", # indent-with-spaces                                |   Docstring should be indented with spaces, not tabs

  "D207", # under-indentation                                 |   Docstring is under-indented
  "D208", # over-indentation                                  |   Docstring is over-indented

  "D209", # new-line-after-last-paragraph                     |   Multi-line docstring closing quotes should be on a separate line
  "D212", # multi-line-summary-first-line                     |   Multi-line docstring summary should start at the first line

  "D210", # surrounding-whitespace                            |   No whitespaces allowed surrounding docstring text

  "D300", # triple-single-quotes                              |   Use triple double quotes """

  "D400", # ends-in-period                                    |   First line should end with a period
  "D401", # non-imperative-mood                               |   First line of docstring should be in imperative mood: "{first_line}"
  "D402", # no-signature                                      |   First line should not be the function's signature
  "D403", # first-line-capitalized                            |   First word of the first line should be capitalized: {} -> {}
  "D404", # docstring-starts-with-this                        |   First word of the docstring should not be "This"
  "D405", # capitalize-section-name                           |   Section name should be properly capitalized ("{name}")

  "D418", # overload-with-docstring                           |   Function decorated with @overload shouldn't contain a docstring
  "D419", # empty-docstring                                   |   Docstring is empty





  "RUF",   # Ruff specific rules
  "FURB",  # I AM NOT A FURRIE - Colon
  "NPY",   # Numpy stuff
  "FLY",   # Mucha (the only thing it does is that it yells at hardcoded "".join((a, b)) and replaces with f'{a} {b}')
  "TRY",   # Something about exceptions
  "PL",    # PyLint
  "PTH",   # Pathlib
  "ARG",   # Unused arguments
  "TCH",   # Type checking (from typing import TYPE_CHECKING; if TYPE_CHECKING: import aaaa)
  "SIM",   # Simplifications
  "RET",   # Return stuff
  "PYI",   # Typevars, stubs & shit
  "PIE",   # Ï€e
  "ICN",   # Import conventions
  "ISC",   # Implicit string concatenation
  "DTZ",   # Datetimez
  "C4",    # Comprehension
  "COM",   # commas
  "A",     # builtins
  "B",     # bugbear
  "FBT",   # Boolean Trap
  "BLE",   # Blind exception
  "UP",    # pyupgrade
  "YTT",   # Flake8-2020
# "ANN",   # Type hinting / Annotaions
  "ASYNC", # Assync

]
ignore = [
  "ANN401", # any-type                                         |   Dynamically typed expressions (typing.Any) are disallowed in {name}
  "DTZ001", # call-datetime-without-tzinfo                     |   The use of datetime.datetime() without tzinfo argument is not allowed
]
show-fixes = true
target-version = "py311"
