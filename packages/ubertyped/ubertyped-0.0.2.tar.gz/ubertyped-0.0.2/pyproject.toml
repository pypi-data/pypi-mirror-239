[tool.poetry]
name = "ubertyped"
version = "0.0.2"
description = "Convert dataclass to TypedDict for fun and (type) safety ðŸª„"
authors = ["Viliam Valent <hello@valent.email>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ViliamV/ubertyped"
homepage = "https://github.com/ViliamV/ubertyped"
packages = [{ include = "ubertyped" }]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
mypy = "^1.0.1"
ruff = ">=0.1.3"
poethepoet = "^0.21.1"
pyright = "^1.1.318"
pytest = "^7.4.3"
pytest-mypy-testing = "^0.1.1"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.11"
plugins = ["ubertyped.mypy_plugin"]
follow_imports = "silent"
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_reexport = true
ignore_missing_imports = true
show_error_codes = true
cache_dir = ".cache/mypy/"

[tool.pyright]
typeCheckingMode = "strict"

[tool.ruff]
select = [
  "A",    # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # mccabe
  "E",    # pycodestyle
  "F",    # Pyflakes
  "N",    # pep8-naming
  "NPY",  # NumPy
  "PD",   # pandas-vet
  "PIE",  # flake8-pie
  "PLE",  # Pylint Error
  "PTH",  # flake8-use-pathlib
  "RUF",  # Ruff
  "S",    # flake8-bandit
  "SIM",  # flakes8-simplify
  "T20",  # flake8-print
  "UP",   # pyupgrade
  "I001", # isort
]
cache-dir = ".cache/ruff"
line-length = 120
target-version = "py311"
# Never enforce line length violations
ignore = ["E501"]
output-format = "grouped"
extend-exclude = [".cache"]
ignore-init-module-imports = true


[tool.pytest.ini_options]
testpaths = ["tests/"]
addopts = [
  "-ra",
  "--capture=no",
  "--strict-markers",
  "--cov-report=term-missing:skip-covered",
  "--no-cov-on-fail",
]
markers = [
  "slow: Slow tests",
  "database: Requires a DB connection",
  "integration: Dependent on some external source and may not suitable to run without setup & supervision",
]
cache_dir = ".cache/pytest/"

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Remove generated files"
cmd = """
    rm -rf .coverage
           .cache
           .pytest_cache
           ./**/__pycache__
           dist
           htmlcov
  """

[tool.poe.tasks.format]
help = "Run formating tools on the code base"
sequence = ["ruff --fix-only .", "ruff format ."]
default_item_type = "cmd"

[tool.poe.tasks.style]
help = "Check formating on the code base"
cmd = "ruff format --check ."

[tool.poe.tasks.type]
help = "Run the mypy type checker"
cmd = "mypy ubertyped"

[tool.poe.tasks.lint]
help = "Run ruff linter on package"
cmd = "ruff ."

[tool.poe.tasks.test]
help = "Run pytest"
cmd = "pytest --cov=ubertyped"
