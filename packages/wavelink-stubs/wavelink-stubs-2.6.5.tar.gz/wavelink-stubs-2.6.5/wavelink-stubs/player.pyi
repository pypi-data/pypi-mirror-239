from typing import Any, TypeAlias, final
from typing_extensions import Self

import discord
from discord.types.voice import GuildVoiceState, VoiceServerUpdate

from .ext import spotify
from .filters import Filter
from .node import Node
from .queue import Queue
from .tracks import Playable

__all__ = ("Player",)

_VoiceChannel: TypeAlias = discord.VoiceChannel | discord.StageChannel

class Player(discord.VoiceProtocol):
    client: discord.Client
    channel: _VoiceChannel  # type: ignore [reportIncompatibleVariableOverride] # Known
    nodes: list[Node]
    current_node: Node
    queue: Queue
    auto_queue: Queue

    def __call__(self, client: discord.Client, channel: _VoiceChannel) -> Self: ...
    def __init__(
        self,
        client: discord.Client = ...,
        channel: _VoiceChannel = ...,
        *,
        nodes: list[Node] | None = None,
        swap_node_on_disconnect: bool = True,
    ) -> None: ...
    @property
    def autoplay(self) -> bool: ...
    @autoplay.setter
    def autoplay(self, value: bool) -> None: ...
    def is_connected(self) -> bool: ...
    def is_playing(self) -> bool: ...
    def is_paused(self) -> bool: ...
    @property
    def volume(self) -> int: ...
    @property
    def guild(self) -> discord.Guild | None: ...
    @property
    def position(self) -> float: ...
    @property
    def ping(self) -> int: ...
    @property
    def current(self) -> Playable | None: ...
    @property
    def filter(self) -> dict[str, Any]: ...
    @final
    async def on_voice_server_update(self, data: VoiceServerUpdate) -> None: ...
    @final
    async def on_voice_state_update(self, data: GuildVoiceState) -> None: ...
    async def connect(self, *, timeout: float, reconnect: bool, **kwargs: Any) -> None: ...
    async def move_to(self, channel: discord.VoiceChannel) -> None: ...
    async def play(
        self,
        track: Playable | spotify.SpotifyTrack,
        replace: bool = ...,
        start: int | None = ...,
        end: int | None = ...,
        volume: int | None = ...,
        *,
        populate: bool = ...,
    ) -> Playable: ...
    async def set_volume(self, value: int) -> None: ...
    async def seek(self, position: int) -> None: ...
    async def pause(self) -> None: ...
    async def resume(self) -> None: ...
    async def stop(self, *, force: bool = True) -> None: ...
    async def set_filter(self, _filter: Filter, *, seek: bool = False) -> None: ...
    async def disconnect(self, **kwargs: Any) -> None: ...
